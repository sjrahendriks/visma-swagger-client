<?php
/**
 * ArticlesV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ArticlesV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticlesV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation articlesV2Get
     *
     * Gets articles.
     *
     * @param  bool $show_prices_with_two_decimals show_prices_with_two_decimals (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseArticleApi
     */
    public function articlesV2Get($show_prices_with_two_decimals = null)
    {
        list($response) = $this->articlesV2GetWithHttpInfo($show_prices_with_two_decimals);
        return $response;
    }

    /**
     * Operation articlesV2GetWithHttpInfo
     *
     * Gets articles.
     *
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2GetWithHttpInfo($show_prices_with_two_decimals = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseArticleApi';
        $request = $this->articlesV2GetRequest($show_prices_with_two_decimals);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2GetAsync
     *
     * Gets articles.
     *
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2GetAsync($show_prices_with_two_decimals = null)
    {
        return $this->articlesV2GetAsyncWithHttpInfo($show_prices_with_two_decimals)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2GetAsyncWithHttpInfo
     *
     * Gets articles.
     *
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2GetAsyncWithHttpInfo($show_prices_with_two_decimals = null)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseArticleApi';
        $request = $this->articlesV2GetRequest($show_prices_with_two_decimals);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Get'
     *
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2GetRequest($show_prices_with_two_decimals = null)
    {

        $resourcePath = '/v2/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($show_prices_with_two_decimals !== null) {
            $queryParams['showPricesWithTwoDecimals'] = ObjectSerializer::toQueryValue($show_prices_with_two_decimals, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation articlesV2Get_0
     *
     * Gets an article by id.
     *
     * @param  string $article_id article_id (required)
     * @param  bool $show_prices_with_two_decimals show_prices_with_two_decimals (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArticleApi
     */
    public function articlesV2Get_0($article_id, $show_prices_with_two_decimals = null)
    {
        list($response) = $this->articlesV2Get_0WithHttpInfo($article_id, $show_prices_with_two_decimals);
        return $response;
    }

    /**
     * Operation articlesV2Get_0WithHttpInfo
     *
     * Gets an article by id.
     *
     * @param  string $article_id (required)
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2Get_0WithHttpInfo($article_id, $show_prices_with_two_decimals = null)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2Get_0Request($article_id, $show_prices_with_two_decimals);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2Get_0Async
     *
     * Gets an article by id.
     *
     * @param  string $article_id (required)
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2Get_0Async($article_id, $show_prices_with_two_decimals = null)
    {
        return $this->articlesV2Get_0AsyncWithHttpInfo($article_id, $show_prices_with_two_decimals)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2Get_0AsyncWithHttpInfo
     *
     * Gets an article by id.
     *
     * @param  string $article_id (required)
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2Get_0AsyncWithHttpInfo($article_id, $show_prices_with_two_decimals = null)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2Get_0Request($article_id, $show_prices_with_two_decimals);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Get_0'
     *
     * @param  string $article_id (required)
     * @param  bool $show_prices_with_two_decimals (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2Get_0Request($article_id, $show_prices_with_two_decimals = null)
    {
        // verify the required parameter 'article_id' is set
        if ($article_id === null || (is_array($article_id) && count($article_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_id when calling articlesV2Get_0'
            );
        }

        $resourcePath = '/v2/articles/{articleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($show_prices_with_two_decimals !== null) {
            $queryParams['showPricesWithTwoDecimals'] = ObjectSerializer::toQueryValue($show_prices_with_two_decimals, null);
        }

        // path params
        if ($article_id !== null) {
            $resourcePath = str_replace(
                '{' . 'articleId' . '}',
                ObjectSerializer::toPathValue($article_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation articlesV2Post
     *
     * Create a single article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArticleApi
     */
    public function articlesV2Post($body)
    {
        list($response) = $this->articlesV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation articlesV2PostWithHttpInfo
     *
     * Create a single article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2PostAsync
     *
     * Create a single article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PostAsync($body)
    {
        return $this->articlesV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2PostAsyncWithHttpInfo
     *
     * Create a single article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Post'
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling articlesV2Post'
            );
        }

        $resourcePath = '/v2/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($name_english !== null) {
            $formParams['NameEnglish'] = ObjectSerializer::toFormValue($name_english);
        }
        // form params
        if ($net_price !== null) {
            $formParams['NetPrice'] = ObjectSerializer::toFormValue($net_price);
        }
        // form params
        if ($gross_price !== null) {
            $formParams['GrossPrice'] = ObjectSerializer::toFormValue($gross_price);
        }
        // form params
        if ($coding_id !== null) {
            $formParams['CodingId'] = ObjectSerializer::toFormValue($coding_id);
        }
        // form params
        if ($coding_name !== null) {
            $formParams['CodingName'] = ObjectSerializer::toFormValue($coding_name);
        }
        // form params
        if ($unit_id !== null) {
            $formParams['UnitId'] = ObjectSerializer::toFormValue($unit_id);
        }
        // form params
        if ($unit_name !== null) {
            $formParams['UnitName'] = ObjectSerializer::toFormValue($unit_name);
        }
        // form params
        if ($unit_abbreviation !== null) {
            $formParams['UnitAbbreviation'] = ObjectSerializer::toFormValue($unit_abbreviation);
        }
        // form params
        if ($stock_balance !== null) {
            $formParams['StockBalance'] = ObjectSerializer::toFormValue($stock_balance);
        }
        // form params
        if ($stock_balance_manually_changed_utc !== null) {
            $formParams['StockBalanceManuallyChangedUtc'] = ObjectSerializer::toFormValue($stock_balance_manually_changed_utc);
        }
        // form params
        if ($stock_balance_reserved !== null) {
            $formParams['StockBalanceReserved'] = ObjectSerializer::toFormValue($stock_balance_reserved);
        }
        // form params
        if ($stock_balance_available !== null) {
            $formParams['StockBalanceAvailable'] = ObjectSerializer::toFormValue($stock_balance_available);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($house_work_type !== null) {
            $formParams['HouseWorkType'] = ObjectSerializer::toFormValue($house_work_type);
        }
        // form params
        if ($purchase_price !== null) {
            $formParams['PurchasePrice'] = ObjectSerializer::toFormValue($purchase_price);
        }
        // form params
        if ($purchase_price_manually_changed_utc !== null) {
            $formParams['PurchasePriceManuallyChangedUtc'] = ObjectSerializer::toFormValue($purchase_price_manually_changed_utc);
        }
        // form params
        if ($send_to_webshop !== null) {
            $formParams['SendToWebshop'] = ObjectSerializer::toFormValue($send_to_webshop);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($article_labels !== null) {
            $formParams['ArticleLabels'] = ObjectSerializer::toFormValue($article_labels);
        }
        // form params
        if ($is_stock !== null) {
            $formParams['IsStock'] = ObjectSerializer::toFormValue($is_stock);
        }
        // form params
        if ($stock_location_reference !== null) {
            $formParams['StockLocationReference'] = ObjectSerializer::toFormValue($stock_location_reference);
        }
        // form params
        if ($freight_costs !== null) {
            $formParams['FreightCosts'] = ObjectSerializer::toFormValue($freight_costs);
        }
        // form params
        if ($freight_costs_manually_changed_utc !== null) {
            $formParams['FreightCostsManuallyChangedUtc'] = ObjectSerializer::toFormValue($freight_costs_manually_changed_utc);
        }
        // form params
        if ($update_stock_prices !== null) {
            $formParams['UpdateStockPrices'] = ObjectSerializer::toFormValue($update_stock_prices);
        }
        // form params
        if ($barcodes !== null) {
            $formParams['Barcodes'] = ObjectSerializer::toFormValue($barcodes);
        }
        // form params
        if ($stock_value !== null) {
            $formParams['StockValue'] = ObjectSerializer::toFormValue($stock_value);
        }
        // form params
        if ($green_technology_type !== null) {
            $formParams['GreenTechnologyType'] = ObjectSerializer::toFormValue($green_technology_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation articlesV2Post
     *
     * Create a single article.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     * @param  string $number number (required)
     * @param  string $name name (required)
     * @param  string $name_english name_english (required)
     * @param  double $net_price net_price (required)
     * @param  double $gross_price gross_price (required)
     * @param  string $coding_id coding_id (required)
     * @param  string $coding_name coding_name (required)
     * @param  string $unit_id unit_id (required)
     * @param  string $unit_name unit_name (required)
     * @param  string $unit_abbreviation unit_abbreviation (required)
     * @param  double $stock_balance stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved stock_balance_reserved (required)
     * @param  double $stock_balance_available stock_balance_available (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $changed_utc changed_utc (required)
     * @param  int $house_work_type house_work_type (required)
     * @param  double $purchase_price purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop send_to_webshop (required)
     * @param  bool $uses_moss uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels article_labels (required)
     * @param  bool $is_stock is_stock (required)
     * @param  string $stock_location_reference stock_location_reference (required)
     * @param  double $freight_costs freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes barcodes (required)
     * @param  double $stock_value stock_value (required)
     * @param  int $green_technology_type green_technology_type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArticleApi
     */
    public function articlesV2Post($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
    {
        list($response) = $this->articlesV2PostWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type);
        return $response;
    }

    /**
     * Operation articlesV2PostWithHttpInfo
     *
     * Create a single article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2PostWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PostRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2PostAsync
     *
     * Create a single article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PostAsync($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
    {
        return $this->articlesV2PostAsyncWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2PostAsyncWithHttpInfo
     *
     * Create a single article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PostAsyncWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PostRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Post'
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2PostRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling articlesV2Post'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling articlesV2Post'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling articlesV2Post'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling articlesV2Post'
            );
        }
        // verify the required parameter 'name_english' is set
        if ($name_english === null || (is_array($name_english) && count($name_english) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_english when calling articlesV2Post'
            );
        }
        // verify the required parameter 'net_price' is set
        if ($net_price === null || (is_array($net_price) && count($net_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $net_price when calling articlesV2Post'
            );
        }
        // verify the required parameter 'gross_price' is set
        if ($gross_price === null || (is_array($gross_price) && count($gross_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gross_price when calling articlesV2Post'
            );
        }
        // verify the required parameter 'coding_id' is set
        if ($coding_id === null || (is_array($coding_id) && count($coding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coding_id when calling articlesV2Post'
            );
        }
        // verify the required parameter 'coding_name' is set
        if ($coding_name === null || (is_array($coding_name) && count($coding_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coding_name when calling articlesV2Post'
            );
        }
        // verify the required parameter 'unit_id' is set
        if ($unit_id === null || (is_array($unit_id) && count($unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_id when calling articlesV2Post'
            );
        }
        // verify the required parameter 'unit_name' is set
        if ($unit_name === null || (is_array($unit_name) && count($unit_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_name when calling articlesV2Post'
            );
        }
        // verify the required parameter 'unit_abbreviation' is set
        if ($unit_abbreviation === null || (is_array($unit_abbreviation) && count($unit_abbreviation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_abbreviation when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_balance' is set
        if ($stock_balance === null || (is_array($stock_balance) && count($stock_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_balance_manually_changed_utc' is set
        if ($stock_balance_manually_changed_utc === null || (is_array($stock_balance_manually_changed_utc) && count($stock_balance_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_manually_changed_utc when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_balance_reserved' is set
        if ($stock_balance_reserved === null || (is_array($stock_balance_reserved) && count($stock_balance_reserved) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_reserved when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_balance_available' is set
        if ($stock_balance_available === null || (is_array($stock_balance_available) && count($stock_balance_available) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_available when calling articlesV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling articlesV2Post'
            );
        }
        // verify the required parameter 'changed_utc' is set
        if ($changed_utc === null || (is_array($changed_utc) && count($changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changed_utc when calling articlesV2Post'
            );
        }
        // verify the required parameter 'house_work_type' is set
        if ($house_work_type === null || (is_array($house_work_type) && count($house_work_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_work_type when calling articlesV2Post'
            );
        }
        // verify the required parameter 'purchase_price' is set
        if ($purchase_price === null || (is_array($purchase_price) && count($purchase_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_price when calling articlesV2Post'
            );
        }
        // verify the required parameter 'purchase_price_manually_changed_utc' is set
        if ($purchase_price_manually_changed_utc === null || (is_array($purchase_price_manually_changed_utc) && count($purchase_price_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_price_manually_changed_utc when calling articlesV2Post'
            );
        }
        // verify the required parameter 'send_to_webshop' is set
        if ($send_to_webshop === null || (is_array($send_to_webshop) && count($send_to_webshop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_to_webshop when calling articlesV2Post'
            );
        }
        // verify the required parameter 'uses_moss' is set
        if ($uses_moss === null || (is_array($uses_moss) && count($uses_moss) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_moss when calling articlesV2Post'
            );
        }
        // verify the required parameter 'article_labels' is set
        if ($article_labels === null || (is_array($article_labels) && count($article_labels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_labels when calling articlesV2Post'
            );
        }
        // verify the required parameter 'is_stock' is set
        if ($is_stock === null || (is_array($is_stock) && count($is_stock) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_stock when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_location_reference' is set
        if ($stock_location_reference === null || (is_array($stock_location_reference) && count($stock_location_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_reference when calling articlesV2Post'
            );
        }
        // verify the required parameter 'freight_costs' is set
        if ($freight_costs === null || (is_array($freight_costs) && count($freight_costs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_costs when calling articlesV2Post'
            );
        }
        // verify the required parameter 'freight_costs_manually_changed_utc' is set
        if ($freight_costs_manually_changed_utc === null || (is_array($freight_costs_manually_changed_utc) && count($freight_costs_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_costs_manually_changed_utc when calling articlesV2Post'
            );
        }
        // verify the required parameter 'update_stock_prices' is set
        if ($update_stock_prices === null || (is_array($update_stock_prices) && count($update_stock_prices) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_stock_prices when calling articlesV2Post'
            );
        }
        // verify the required parameter 'barcodes' is set
        if ($barcodes === null || (is_array($barcodes) && count($barcodes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcodes when calling articlesV2Post'
            );
        }
        // verify the required parameter 'stock_value' is set
        if ($stock_value === null || (is_array($stock_value) && count($stock_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_value when calling articlesV2Post'
            );
        }
        // verify the required parameter 'green_technology_type' is set
        if ($green_technology_type === null || (is_array($green_technology_type) && count($green_technology_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $green_technology_type when calling articlesV2Post'
            );
        }

        $resourcePath = '/v2/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($name_english !== null) {
            $formParams['NameEnglish'] = ObjectSerializer::toFormValue($name_english);
        }
        // form params
        if ($net_price !== null) {
            $formParams['NetPrice'] = ObjectSerializer::toFormValue($net_price);
        }
        // form params
        if ($gross_price !== null) {
            $formParams['GrossPrice'] = ObjectSerializer::toFormValue($gross_price);
        }
        // form params
        if ($coding_id !== null) {
            $formParams['CodingId'] = ObjectSerializer::toFormValue($coding_id);
        }
        // form params
        if ($coding_name !== null) {
            $formParams['CodingName'] = ObjectSerializer::toFormValue($coding_name);
        }
        // form params
        if ($unit_id !== null) {
            $formParams['UnitId'] = ObjectSerializer::toFormValue($unit_id);
        }
        // form params
        if ($unit_name !== null) {
            $formParams['UnitName'] = ObjectSerializer::toFormValue($unit_name);
        }
        // form params
        if ($unit_abbreviation !== null) {
            $formParams['UnitAbbreviation'] = ObjectSerializer::toFormValue($unit_abbreviation);
        }
        // form params
        if ($stock_balance !== null) {
            $formParams['StockBalance'] = ObjectSerializer::toFormValue($stock_balance);
        }
        // form params
        if ($stock_balance_manually_changed_utc !== null) {
            $formParams['StockBalanceManuallyChangedUtc'] = ObjectSerializer::toFormValue($stock_balance_manually_changed_utc);
        }
        // form params
        if ($stock_balance_reserved !== null) {
            $formParams['StockBalanceReserved'] = ObjectSerializer::toFormValue($stock_balance_reserved);
        }
        // form params
        if ($stock_balance_available !== null) {
            $formParams['StockBalanceAvailable'] = ObjectSerializer::toFormValue($stock_balance_available);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($house_work_type !== null) {
            $formParams['HouseWorkType'] = ObjectSerializer::toFormValue($house_work_type);
        }
        // form params
        if ($purchase_price !== null) {
            $formParams['PurchasePrice'] = ObjectSerializer::toFormValue($purchase_price);
        }
        // form params
        if ($purchase_price_manually_changed_utc !== null) {
            $formParams['PurchasePriceManuallyChangedUtc'] = ObjectSerializer::toFormValue($purchase_price_manually_changed_utc);
        }
        // form params
        if ($send_to_webshop !== null) {
            $formParams['SendToWebshop'] = ObjectSerializer::toFormValue($send_to_webshop);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($article_labels !== null) {
            $formParams['ArticleLabels'] = ObjectSerializer::toFormValue($article_labels);
        }
        // form params
        if ($is_stock !== null) {
            $formParams['IsStock'] = ObjectSerializer::toFormValue($is_stock);
        }
        // form params
        if ($stock_location_reference !== null) {
            $formParams['StockLocationReference'] = ObjectSerializer::toFormValue($stock_location_reference);
        }
        // form params
        if ($freight_costs !== null) {
            $formParams['FreightCosts'] = ObjectSerializer::toFormValue($freight_costs);
        }
        // form params
        if ($freight_costs_manually_changed_utc !== null) {
            $formParams['FreightCostsManuallyChangedUtc'] = ObjectSerializer::toFormValue($freight_costs_manually_changed_utc);
        }
        // form params
        if ($update_stock_prices !== null) {
            $formParams['UpdateStockPrices'] = ObjectSerializer::toFormValue($update_stock_prices);
        }
        // form params
        if ($barcodes !== null) {
            $formParams['Barcodes'] = ObjectSerializer::toFormValue($barcodes);
        }
        // form params
        if ($stock_value !== null) {
            $formParams['StockValue'] = ObjectSerializer::toFormValue($stock_value);
        }
        // form params
        if ($green_technology_type !== null) {
            $formParams['GreenTechnologyType'] = ObjectSerializer::toFormValue($green_technology_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation articlesV2Put
     *
     * Replace the data in an article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body body (required)
     * @param  string $article_id article_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArticleApi
     */
    public function articlesV2Put($body, $article_id)
    {
        list($response) = $this->articlesV2PutWithHttpInfo($body, $article_id);
        return $response;
    }

    /**
     * Operation articlesV2PutWithHttpInfo
     *
     * Replace the data in an article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     * @param  string $article_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2PutWithHttpInfo($body, $article_id)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PutRequest($body, $article_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2PutAsync
     *
     * Replace the data in an article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PutAsync($body, $article_id)
    {
        return $this->articlesV2PutAsyncWithHttpInfo($body, $article_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2PutAsyncWithHttpInfo
     *
     * Replace the data in an article.
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PutAsyncWithHttpInfo($body, $article_id)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PutRequest($body, $article_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Put'
     *
     * @param  \Swagger\Client\Model\ArticleApi $body (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2PutRequest($body, $article_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling articlesV2Put'
            );
        }
        // verify the required parameter 'article_id' is set
        if ($article_id === null || (is_array($article_id) && count($article_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_id when calling articlesV2Put'
            );
        }

        $resourcePath = '/v2/articles/{articleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($article_id !== null) {
            $resourcePath = str_replace(
                '{' . 'articleId' . '}',
                ObjectSerializer::toPathValue($article_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($name_english !== null) {
            $formParams['NameEnglish'] = ObjectSerializer::toFormValue($name_english);
        }
        // form params
        if ($net_price !== null) {
            $formParams['NetPrice'] = ObjectSerializer::toFormValue($net_price);
        }
        // form params
        if ($gross_price !== null) {
            $formParams['GrossPrice'] = ObjectSerializer::toFormValue($gross_price);
        }
        // form params
        if ($coding_id !== null) {
            $formParams['CodingId'] = ObjectSerializer::toFormValue($coding_id);
        }
        // form params
        if ($coding_name !== null) {
            $formParams['CodingName'] = ObjectSerializer::toFormValue($coding_name);
        }
        // form params
        if ($unit_id !== null) {
            $formParams['UnitId'] = ObjectSerializer::toFormValue($unit_id);
        }
        // form params
        if ($unit_name !== null) {
            $formParams['UnitName'] = ObjectSerializer::toFormValue($unit_name);
        }
        // form params
        if ($unit_abbreviation !== null) {
            $formParams['UnitAbbreviation'] = ObjectSerializer::toFormValue($unit_abbreviation);
        }
        // form params
        if ($stock_balance !== null) {
            $formParams['StockBalance'] = ObjectSerializer::toFormValue($stock_balance);
        }
        // form params
        if ($stock_balance_manually_changed_utc !== null) {
            $formParams['StockBalanceManuallyChangedUtc'] = ObjectSerializer::toFormValue($stock_balance_manually_changed_utc);
        }
        // form params
        if ($stock_balance_reserved !== null) {
            $formParams['StockBalanceReserved'] = ObjectSerializer::toFormValue($stock_balance_reserved);
        }
        // form params
        if ($stock_balance_available !== null) {
            $formParams['StockBalanceAvailable'] = ObjectSerializer::toFormValue($stock_balance_available);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($house_work_type !== null) {
            $formParams['HouseWorkType'] = ObjectSerializer::toFormValue($house_work_type);
        }
        // form params
        if ($purchase_price !== null) {
            $formParams['PurchasePrice'] = ObjectSerializer::toFormValue($purchase_price);
        }
        // form params
        if ($purchase_price_manually_changed_utc !== null) {
            $formParams['PurchasePriceManuallyChangedUtc'] = ObjectSerializer::toFormValue($purchase_price_manually_changed_utc);
        }
        // form params
        if ($send_to_webshop !== null) {
            $formParams['SendToWebshop'] = ObjectSerializer::toFormValue($send_to_webshop);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($article_labels !== null) {
            $formParams['ArticleLabels'] = ObjectSerializer::toFormValue($article_labels);
        }
        // form params
        if ($is_stock !== null) {
            $formParams['IsStock'] = ObjectSerializer::toFormValue($is_stock);
        }
        // form params
        if ($stock_location_reference !== null) {
            $formParams['StockLocationReference'] = ObjectSerializer::toFormValue($stock_location_reference);
        }
        // form params
        if ($freight_costs !== null) {
            $formParams['FreightCosts'] = ObjectSerializer::toFormValue($freight_costs);
        }
        // form params
        if ($freight_costs_manually_changed_utc !== null) {
            $formParams['FreightCostsManuallyChangedUtc'] = ObjectSerializer::toFormValue($freight_costs_manually_changed_utc);
        }
        // form params
        if ($update_stock_prices !== null) {
            $formParams['UpdateStockPrices'] = ObjectSerializer::toFormValue($update_stock_prices);
        }
        // form params
        if ($barcodes !== null) {
            $formParams['Barcodes'] = ObjectSerializer::toFormValue($barcodes);
        }
        // form params
        if ($stock_value !== null) {
            $formParams['StockValue'] = ObjectSerializer::toFormValue($stock_value);
        }
        // form params
        if ($green_technology_type !== null) {
            $formParams['GreenTechnologyType'] = ObjectSerializer::toFormValue($green_technology_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation articlesV2Put
     *
     * Replace the data in an article.
     *
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     * @param  string $number number (required)
     * @param  string $name name (required)
     * @param  string $name_english name_english (required)
     * @param  double $net_price net_price (required)
     * @param  double $gross_price gross_price (required)
     * @param  string $coding_id coding_id (required)
     * @param  string $coding_name coding_name (required)
     * @param  string $unit_id unit_id (required)
     * @param  string $unit_name unit_name (required)
     * @param  string $unit_abbreviation unit_abbreviation (required)
     * @param  double $stock_balance stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved stock_balance_reserved (required)
     * @param  double $stock_balance_available stock_balance_available (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $changed_utc changed_utc (required)
     * @param  int $house_work_type house_work_type (required)
     * @param  double $purchase_price purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop send_to_webshop (required)
     * @param  bool $uses_moss uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels article_labels (required)
     * @param  bool $is_stock is_stock (required)
     * @param  string $stock_location_reference stock_location_reference (required)
     * @param  double $freight_costs freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes barcodes (required)
     * @param  double $stock_value stock_value (required)
     * @param  int $green_technology_type green_technology_type (required)
     * @param  string $article_id article_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArticleApi
     */
    public function articlesV2Put($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
    {
        list($response) = $this->articlesV2PutWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id);
        return $response;
    }

    /**
     * Operation articlesV2PutWithHttpInfo
     *
     * Replace the data in an article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     * @param  string $article_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArticleApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function articlesV2PutWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PutRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArticleApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation articlesV2PutAsync
     *
     * Replace the data in an article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PutAsync($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
    {
        return $this->articlesV2PutAsyncWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation articlesV2PutAsyncWithHttpInfo
     *
     * Replace the data in an article.
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function articlesV2PutAsyncWithHttpInfo($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
    {
        $returnType = '\Swagger\Client\Model\ArticleApi';
        $request = $this->articlesV2PutRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'articlesV2Put'
     *
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  string $number (required)
     * @param  string $name (required)
     * @param  string $name_english (required)
     * @param  double $net_price (required)
     * @param  double $gross_price (required)
     * @param  string $coding_id (required)
     * @param  string $coding_name (required)
     * @param  string $unit_id (required)
     * @param  string $unit_name (required)
     * @param  string $unit_abbreviation (required)
     * @param  double $stock_balance (required)
     * @param  \DateTime $stock_balance_manually_changed_utc (required)
     * @param  double $stock_balance_reserved (required)
     * @param  double $stock_balance_available (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $changed_utc (required)
     * @param  int $house_work_type (required)
     * @param  double $purchase_price (required)
     * @param  \DateTime $purchase_price_manually_changed_utc (required)
     * @param  bool $send_to_webshop (required)
     * @param  bool $uses_moss (required)
     * @param  \Swagger\Client\Model\ArticleLabelApi[] $article_labels (required)
     * @param  bool $is_stock (required)
     * @param  string $stock_location_reference (required)
     * @param  double $freight_costs (required)
     * @param  \DateTime $freight_costs_manually_changed_utc (required)
     * @param  bool $update_stock_prices (required)
     * @param  \Swagger\Client\Model\ArticleBarcodeApi[] $barcodes (required)
     * @param  double $stock_value (required)
     * @param  int $green_technology_type (required)
     * @param  string $article_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function articlesV2PutRequest($id, $is_active, $number, $name, $name_english, $net_price, $gross_price, $coding_id, $coding_name, $unit_id, $unit_name, $unit_abbreviation, $stock_balance, $stock_balance_manually_changed_utc, $stock_balance_reserved, $stock_balance_available, $created_utc, $changed_utc, $house_work_type, $purchase_price, $purchase_price_manually_changed_utc, $send_to_webshop, $uses_moss, $article_labels, $is_stock, $stock_location_reference, $freight_costs, $freight_costs_manually_changed_utc, $update_stock_prices, $barcodes, $stock_value, $green_technology_type, $article_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling articlesV2Put'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling articlesV2Put'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling articlesV2Put'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling articlesV2Put'
            );
        }
        // verify the required parameter 'name_english' is set
        if ($name_english === null || (is_array($name_english) && count($name_english) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name_english when calling articlesV2Put'
            );
        }
        // verify the required parameter 'net_price' is set
        if ($net_price === null || (is_array($net_price) && count($net_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $net_price when calling articlesV2Put'
            );
        }
        // verify the required parameter 'gross_price' is set
        if ($gross_price === null || (is_array($gross_price) && count($gross_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gross_price when calling articlesV2Put'
            );
        }
        // verify the required parameter 'coding_id' is set
        if ($coding_id === null || (is_array($coding_id) && count($coding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coding_id when calling articlesV2Put'
            );
        }
        // verify the required parameter 'coding_name' is set
        if ($coding_name === null || (is_array($coding_name) && count($coding_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coding_name when calling articlesV2Put'
            );
        }
        // verify the required parameter 'unit_id' is set
        if ($unit_id === null || (is_array($unit_id) && count($unit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_id when calling articlesV2Put'
            );
        }
        // verify the required parameter 'unit_name' is set
        if ($unit_name === null || (is_array($unit_name) && count($unit_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_name when calling articlesV2Put'
            );
        }
        // verify the required parameter 'unit_abbreviation' is set
        if ($unit_abbreviation === null || (is_array($unit_abbreviation) && count($unit_abbreviation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_abbreviation when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_balance' is set
        if ($stock_balance === null || (is_array($stock_balance) && count($stock_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_balance_manually_changed_utc' is set
        if ($stock_balance_manually_changed_utc === null || (is_array($stock_balance_manually_changed_utc) && count($stock_balance_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_manually_changed_utc when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_balance_reserved' is set
        if ($stock_balance_reserved === null || (is_array($stock_balance_reserved) && count($stock_balance_reserved) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_reserved when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_balance_available' is set
        if ($stock_balance_available === null || (is_array($stock_balance_available) && count($stock_balance_available) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_balance_available when calling articlesV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling articlesV2Put'
            );
        }
        // verify the required parameter 'changed_utc' is set
        if ($changed_utc === null || (is_array($changed_utc) && count($changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changed_utc when calling articlesV2Put'
            );
        }
        // verify the required parameter 'house_work_type' is set
        if ($house_work_type === null || (is_array($house_work_type) && count($house_work_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_work_type when calling articlesV2Put'
            );
        }
        // verify the required parameter 'purchase_price' is set
        if ($purchase_price === null || (is_array($purchase_price) && count($purchase_price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_price when calling articlesV2Put'
            );
        }
        // verify the required parameter 'purchase_price_manually_changed_utc' is set
        if ($purchase_price_manually_changed_utc === null || (is_array($purchase_price_manually_changed_utc) && count($purchase_price_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_price_manually_changed_utc when calling articlesV2Put'
            );
        }
        // verify the required parameter 'send_to_webshop' is set
        if ($send_to_webshop === null || (is_array($send_to_webshop) && count($send_to_webshop) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_to_webshop when calling articlesV2Put'
            );
        }
        // verify the required parameter 'uses_moss' is set
        if ($uses_moss === null || (is_array($uses_moss) && count($uses_moss) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_moss when calling articlesV2Put'
            );
        }
        // verify the required parameter 'article_labels' is set
        if ($article_labels === null || (is_array($article_labels) && count($article_labels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_labels when calling articlesV2Put'
            );
        }
        // verify the required parameter 'is_stock' is set
        if ($is_stock === null || (is_array($is_stock) && count($is_stock) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_stock when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_location_reference' is set
        if ($stock_location_reference === null || (is_array($stock_location_reference) && count($stock_location_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_reference when calling articlesV2Put'
            );
        }
        // verify the required parameter 'freight_costs' is set
        if ($freight_costs === null || (is_array($freight_costs) && count($freight_costs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_costs when calling articlesV2Put'
            );
        }
        // verify the required parameter 'freight_costs_manually_changed_utc' is set
        if ($freight_costs_manually_changed_utc === null || (is_array($freight_costs_manually_changed_utc) && count($freight_costs_manually_changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_costs_manually_changed_utc when calling articlesV2Put'
            );
        }
        // verify the required parameter 'update_stock_prices' is set
        if ($update_stock_prices === null || (is_array($update_stock_prices) && count($update_stock_prices) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_stock_prices when calling articlesV2Put'
            );
        }
        // verify the required parameter 'barcodes' is set
        if ($barcodes === null || (is_array($barcodes) && count($barcodes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcodes when calling articlesV2Put'
            );
        }
        // verify the required parameter 'stock_value' is set
        if ($stock_value === null || (is_array($stock_value) && count($stock_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_value when calling articlesV2Put'
            );
        }
        // verify the required parameter 'green_technology_type' is set
        if ($green_technology_type === null || (is_array($green_technology_type) && count($green_technology_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $green_technology_type when calling articlesV2Put'
            );
        }
        // verify the required parameter 'article_id' is set
        if ($article_id === null || (is_array($article_id) && count($article_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $article_id when calling articlesV2Put'
            );
        }

        $resourcePath = '/v2/articles/{articleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($article_id !== null) {
            $resourcePath = str_replace(
                '{' . 'articleId' . '}',
                ObjectSerializer::toPathValue($article_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($name_english !== null) {
            $formParams['NameEnglish'] = ObjectSerializer::toFormValue($name_english);
        }
        // form params
        if ($net_price !== null) {
            $formParams['NetPrice'] = ObjectSerializer::toFormValue($net_price);
        }
        // form params
        if ($gross_price !== null) {
            $formParams['GrossPrice'] = ObjectSerializer::toFormValue($gross_price);
        }
        // form params
        if ($coding_id !== null) {
            $formParams['CodingId'] = ObjectSerializer::toFormValue($coding_id);
        }
        // form params
        if ($coding_name !== null) {
            $formParams['CodingName'] = ObjectSerializer::toFormValue($coding_name);
        }
        // form params
        if ($unit_id !== null) {
            $formParams['UnitId'] = ObjectSerializer::toFormValue($unit_id);
        }
        // form params
        if ($unit_name !== null) {
            $formParams['UnitName'] = ObjectSerializer::toFormValue($unit_name);
        }
        // form params
        if ($unit_abbreviation !== null) {
            $formParams['UnitAbbreviation'] = ObjectSerializer::toFormValue($unit_abbreviation);
        }
        // form params
        if ($stock_balance !== null) {
            $formParams['StockBalance'] = ObjectSerializer::toFormValue($stock_balance);
        }
        // form params
        if ($stock_balance_manually_changed_utc !== null) {
            $formParams['StockBalanceManuallyChangedUtc'] = ObjectSerializer::toFormValue($stock_balance_manually_changed_utc);
        }
        // form params
        if ($stock_balance_reserved !== null) {
            $formParams['StockBalanceReserved'] = ObjectSerializer::toFormValue($stock_balance_reserved);
        }
        // form params
        if ($stock_balance_available !== null) {
            $formParams['StockBalanceAvailable'] = ObjectSerializer::toFormValue($stock_balance_available);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($house_work_type !== null) {
            $formParams['HouseWorkType'] = ObjectSerializer::toFormValue($house_work_type);
        }
        // form params
        if ($purchase_price !== null) {
            $formParams['PurchasePrice'] = ObjectSerializer::toFormValue($purchase_price);
        }
        // form params
        if ($purchase_price_manually_changed_utc !== null) {
            $formParams['PurchasePriceManuallyChangedUtc'] = ObjectSerializer::toFormValue($purchase_price_manually_changed_utc);
        }
        // form params
        if ($send_to_webshop !== null) {
            $formParams['SendToWebshop'] = ObjectSerializer::toFormValue($send_to_webshop);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($article_labels !== null) {
            $formParams['ArticleLabels'] = ObjectSerializer::toFormValue($article_labels);
        }
        // form params
        if ($is_stock !== null) {
            $formParams['IsStock'] = ObjectSerializer::toFormValue($is_stock);
        }
        // form params
        if ($stock_location_reference !== null) {
            $formParams['StockLocationReference'] = ObjectSerializer::toFormValue($stock_location_reference);
        }
        // form params
        if ($freight_costs !== null) {
            $formParams['FreightCosts'] = ObjectSerializer::toFormValue($freight_costs);
        }
        // form params
        if ($freight_costs_manually_changed_utc !== null) {
            $formParams['FreightCostsManuallyChangedUtc'] = ObjectSerializer::toFormValue($freight_costs_manually_changed_utc);
        }
        // form params
        if ($update_stock_prices !== null) {
            $formParams['UpdateStockPrices'] = ObjectSerializer::toFormValue($update_stock_prices);
        }
        // form params
        if ($barcodes !== null) {
            $formParams['Barcodes'] = ObjectSerializer::toFormValue($barcodes);
        }
        // form params
        if ($stock_value !== null) {
            $formParams['StockValue'] = ObjectSerializer::toFormValue($stock_value);
        }
        // form params
        if ($green_technology_type !== null) {
            $formParams['GreenTechnologyType'] = ObjectSerializer::toFormValue($green_technology_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
