<?php
/**
 * BankAccountsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * BankAccountsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bankAccountsV2Delete
     *
     * Delete a bank account.
     *
     * @param  string $bank_account_id bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function bankAccountsV2Delete($bank_account_id)
    {
        list($response) = $this->bankAccountsV2DeleteWithHttpInfo($bank_account_id);
        return $response;
    }

    /**
     * Operation bankAccountsV2DeleteWithHttpInfo
     *
     * Delete a bank account.
     *
     * @param  string $bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2DeleteWithHttpInfo($bank_account_id)
    {
        $returnType = 'object';
        $request = $this->bankAccountsV2DeleteRequest($bank_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2DeleteAsync
     *
     * Delete a bank account.
     *
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2DeleteAsync($bank_account_id)
    {
        return $this->bankAccountsV2DeleteAsyncWithHttpInfo($bank_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2DeleteAsyncWithHttpInfo
     *
     * Delete a bank account.
     *
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2DeleteAsyncWithHttpInfo($bank_account_id)
    {
        $returnType = 'object';
        $request = $this->bankAccountsV2DeleteRequest($bank_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Delete'
     *
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2DeleteRequest($bank_account_id)
    {
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling bankAccountsV2Delete'
            );
        }

        $resourcePath = '/v2/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Get
     *
     * Get a list of bank accounts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseBankAccountApi
     */
    public function bankAccountsV2Get()
    {
        list($response) = $this->bankAccountsV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation bankAccountsV2GetWithHttpInfo
     *
     * Get a list of bank accounts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseBankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseBankAccountApi';
        $request = $this->bankAccountsV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseBankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2GetAsync
     *
     * Get a list of bank accounts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2GetAsync()
    {
        return $this->bankAccountsV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2GetAsyncWithHttpInfo
     *
     * Get a list of bank accounts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseBankAccountApi';
        $request = $this->bankAccountsV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2GetRequest()
    {

        $resourcePath = '/v2/bankaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Get_0
     *
     * Get a specific bank account.
     *
     * @param  string $bank_account_id Id of the requested bank account. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BankAccountApi
     */
    public function bankAccountsV2Get_0($bank_account_id)
    {
        list($response) = $this->bankAccountsV2Get_0WithHttpInfo($bank_account_id);
        return $response;
    }

    /**
     * Operation bankAccountsV2Get_0WithHttpInfo
     *
     * Get a specific bank account.
     *
     * @param  string $bank_account_id Id of the requested bank account. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2Get_0WithHttpInfo($bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2Get_0Request($bank_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2Get_0Async
     *
     * Get a specific bank account.
     *
     * @param  string $bank_account_id Id of the requested bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2Get_0Async($bank_account_id)
    {
        return $this->bankAccountsV2Get_0AsyncWithHttpInfo($bank_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2Get_0AsyncWithHttpInfo
     *
     * Get a specific bank account.
     *
     * @param  string $bank_account_id Id of the requested bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2Get_0AsyncWithHttpInfo($bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2Get_0Request($bank_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Get_0'
     *
     * @param  string $bank_account_id Id of the requested bank account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2Get_0Request($bank_account_id)
    {
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling bankAccountsV2Get_0'
            );
        }

        $resourcePath = '/v2/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Post
     *
     * Create a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BankAccountApi
     */
    public function bankAccountsV2Post($body)
    {
        list($response) = $this->bankAccountsV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation bankAccountsV2PostWithHttpInfo
     *
     * Create a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2PostAsync
     *
     * Create a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PostAsync($body)
    {
        return $this->bankAccountsV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2PostAsyncWithHttpInfo
     *
     * Create a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Post'
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bankAccountsV2Post'
            );
        }

        $resourcePath = '/v2/bankaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($bank !== null) {
            $formParams['Bank'] = ObjectSerializer::toFormValue($bank);
        }
        // form params
        if ($bank_account_type !== null) {
            $formParams['BankAccountType'] = ObjectSerializer::toFormValue($bank_account_type);
        }
        // form params
        if ($bank_account_type_description !== null) {
            $formParams['BankAccountTypeDescription'] = ObjectSerializer::toFormValue($bank_account_type_description);
        }
        // form params
        if ($bban !== null) {
            $formParams['Bban'] = ObjectSerializer::toFormValue($bban);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($ledger_account_number !== null) {
            $formParams['LedgerAccountNumber'] = ObjectSerializer::toFormValue($ledger_account_number);
        }
        // form params
        if ($has_active_bank_agreement !== null) {
            $formParams['HasActiveBankAgreement'] = ObjectSerializer::toFormValue($has_active_bank_agreement);
        }
        // form params
        if ($is_default_cheque_account !== null) {
            $formParams['IsDefaultChequeAccount'] = ObjectSerializer::toFormValue($is_default_cheque_account);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Post
     *
     * Create a bank account.
     *
     * @param  string $bank bank (required)
     * @param  int $bank_account_type bank_account_type (required)
     * @param  string $bank_account_type_description bank_account_type_description (required)
     * @param  string $bban bban (required)
     * @param  string $iban iban (required)
     * @param  string $name name (required)
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     * @param  int $ledger_account_number ledger_account_number (required)
     * @param  bool $has_active_bank_agreement has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account is_default_cheque_account (required)
     * @param  string $currency_code currency_code (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BankAccountApi
     */
    public function bankAccountsV2Post($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
    {
        list($response) = $this->bankAccountsV2PostWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc);
        return $response;
    }

    /**
     * Operation bankAccountsV2PostWithHttpInfo
     *
     * Create a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2PostWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PostRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2PostAsync
     *
     * Create a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PostAsync($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
    {
        return $this->bankAccountsV2PostAsyncWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2PostAsyncWithHttpInfo
     *
     * Create a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PostAsyncWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PostRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Post'
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2PostRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc)
    {
        // verify the required parameter 'bank' is set
        if ($bank === null || (is_array($bank) && count($bank) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'bank_account_type' is set
        if ($bank_account_type === null || (is_array($bank_account_type) && count($bank_account_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_type when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'bank_account_type_description' is set
        if ($bank_account_type_description === null || (is_array($bank_account_type_description) && count($bank_account_type_description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_type_description when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'bban' is set
        if ($bban === null || (is_array($bban) && count($bban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bban when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'iban' is set
        if ($iban === null || (is_array($iban) && count($iban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iban when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'ledger_account_number' is set
        if ($ledger_account_number === null || (is_array($ledger_account_number) && count($ledger_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger_account_number when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'has_active_bank_agreement' is set
        if ($has_active_bank_agreement === null || (is_array($has_active_bank_agreement) && count($has_active_bank_agreement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $has_active_bank_agreement when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'is_default_cheque_account' is set
        if ($is_default_cheque_account === null || (is_array($is_default_cheque_account) && count($is_default_cheque_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_default_cheque_account when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling bankAccountsV2Post'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling bankAccountsV2Post'
            );
        }

        $resourcePath = '/v2/bankaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($bank !== null) {
            $formParams['Bank'] = ObjectSerializer::toFormValue($bank);
        }
        // form params
        if ($bank_account_type !== null) {
            $formParams['BankAccountType'] = ObjectSerializer::toFormValue($bank_account_type);
        }
        // form params
        if ($bank_account_type_description !== null) {
            $formParams['BankAccountTypeDescription'] = ObjectSerializer::toFormValue($bank_account_type_description);
        }
        // form params
        if ($bban !== null) {
            $formParams['Bban'] = ObjectSerializer::toFormValue($bban);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($ledger_account_number !== null) {
            $formParams['LedgerAccountNumber'] = ObjectSerializer::toFormValue($ledger_account_number);
        }
        // form params
        if ($has_active_bank_agreement !== null) {
            $formParams['HasActiveBankAgreement'] = ObjectSerializer::toFormValue($has_active_bank_agreement);
        }
        // form params
        if ($is_default_cheque_account !== null) {
            $formParams['IsDefaultChequeAccount'] = ObjectSerializer::toFormValue($is_default_cheque_account);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Put
     *
     * Replace a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body body (required)
     * @param  string $bank_account_id bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BankAccountApi
     */
    public function bankAccountsV2Put($body, $bank_account_id)
    {
        list($response) = $this->bankAccountsV2PutWithHttpInfo($body, $bank_account_id);
        return $response;
    }

    /**
     * Operation bankAccountsV2PutWithHttpInfo
     *
     * Replace a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2PutWithHttpInfo($body, $bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PutRequest($body, $bank_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2PutAsync
     *
     * Replace a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PutAsync($body, $bank_account_id)
    {
        return $this->bankAccountsV2PutAsyncWithHttpInfo($body, $bank_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2PutAsyncWithHttpInfo
     *
     * Replace a bank account.
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PutAsyncWithHttpInfo($body, $bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PutRequest($body, $bank_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Put'
     *
     * @param  \Swagger\Client\Model\BankAccountApi $body (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2PutRequest($body, $bank_account_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling bankAccountsV2Put'
            );
        }

        $resourcePath = '/v2/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // form params
        if ($bank !== null) {
            $formParams['Bank'] = ObjectSerializer::toFormValue($bank);
        }
        // form params
        if ($bank_account_type !== null) {
            $formParams['BankAccountType'] = ObjectSerializer::toFormValue($bank_account_type);
        }
        // form params
        if ($bank_account_type_description !== null) {
            $formParams['BankAccountTypeDescription'] = ObjectSerializer::toFormValue($bank_account_type_description);
        }
        // form params
        if ($bban !== null) {
            $formParams['Bban'] = ObjectSerializer::toFormValue($bban);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($ledger_account_number !== null) {
            $formParams['LedgerAccountNumber'] = ObjectSerializer::toFormValue($ledger_account_number);
        }
        // form params
        if ($has_active_bank_agreement !== null) {
            $formParams['HasActiveBankAgreement'] = ObjectSerializer::toFormValue($has_active_bank_agreement);
        }
        // form params
        if ($is_default_cheque_account !== null) {
            $formParams['IsDefaultChequeAccount'] = ObjectSerializer::toFormValue($is_default_cheque_account);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankAccountsV2Put
     *
     * Replace a bank account.
     *
     * @param  string $bank bank (required)
     * @param  int $bank_account_type bank_account_type (required)
     * @param  string $bank_account_type_description bank_account_type_description (required)
     * @param  string $bban bban (required)
     * @param  string $iban iban (required)
     * @param  string $name name (required)
     * @param  string $id id (required)
     * @param  bool $is_active is_active (required)
     * @param  int $ledger_account_number ledger_account_number (required)
     * @param  bool $has_active_bank_agreement has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account is_default_cheque_account (required)
     * @param  string $currency_code currency_code (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  string $bank_account_id bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BankAccountApi
     */
    public function bankAccountsV2Put($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
    {
        list($response) = $this->bankAccountsV2PutWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id);
        return $response;
    }

    /**
     * Operation bankAccountsV2PutWithHttpInfo
     *
     * Replace a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BankAccountApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankAccountsV2PutWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PutRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BankAccountApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankAccountsV2PutAsync
     *
     * Replace a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PutAsync($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
    {
        return $this->bankAccountsV2PutAsyncWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankAccountsV2PutAsyncWithHttpInfo
     *
     * Replace a bank account.
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankAccountsV2PutAsyncWithHttpInfo($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
    {
        $returnType = '\Swagger\Client\Model\BankAccountApi';
        $request = $this->bankAccountsV2PutRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankAccountsV2Put'
     *
     * @param  string $bank (required)
     * @param  int $bank_account_type (required)
     * @param  string $bank_account_type_description (required)
     * @param  string $bban (required)
     * @param  string $iban (required)
     * @param  string $name (required)
     * @param  string $id (required)
     * @param  bool $is_active (required)
     * @param  int $ledger_account_number (required)
     * @param  bool $has_active_bank_agreement (required)
     * @param  bool $is_default_cheque_account (required)
     * @param  string $currency_code (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $bank_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bankAccountsV2PutRequest($bank, $bank_account_type, $bank_account_type_description, $bban, $iban, $name, $id, $is_active, $ledger_account_number, $has_active_bank_agreement, $is_default_cheque_account, $currency_code, $modified_utc, $bank_account_id)
    {
        // verify the required parameter 'bank' is set
        if ($bank === null || (is_array($bank) && count($bank) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'bank_account_type' is set
        if ($bank_account_type === null || (is_array($bank_account_type) && count($bank_account_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_type when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'bank_account_type_description' is set
        if ($bank_account_type_description === null || (is_array($bank_account_type_description) && count($bank_account_type_description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_type_description when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'bban' is set
        if ($bban === null || (is_array($bban) && count($bban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bban when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'iban' is set
        if ($iban === null || (is_array($iban) && count($iban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iban when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'ledger_account_number' is set
        if ($ledger_account_number === null || (is_array($ledger_account_number) && count($ledger_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ledger_account_number when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'has_active_bank_agreement' is set
        if ($has_active_bank_agreement === null || (is_array($has_active_bank_agreement) && count($has_active_bank_agreement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $has_active_bank_agreement when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'is_default_cheque_account' is set
        if ($is_default_cheque_account === null || (is_array($is_default_cheque_account) && count($is_default_cheque_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_default_cheque_account when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling bankAccountsV2Put'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling bankAccountsV2Put'
            );
        }

        $resourcePath = '/v2/bankaccounts/{bankAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bank_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bankAccountId' . '}',
                ObjectSerializer::toPathValue($bank_account_id),
                $resourcePath
            );
        }

        // form params
        if ($bank !== null) {
            $formParams['Bank'] = ObjectSerializer::toFormValue($bank);
        }
        // form params
        if ($bank_account_type !== null) {
            $formParams['BankAccountType'] = ObjectSerializer::toFormValue($bank_account_type);
        }
        // form params
        if ($bank_account_type_description !== null) {
            $formParams['BankAccountTypeDescription'] = ObjectSerializer::toFormValue($bank_account_type_description);
        }
        // form params
        if ($bban !== null) {
            $formParams['Bban'] = ObjectSerializer::toFormValue($bban);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($ledger_account_number !== null) {
            $formParams['LedgerAccountNumber'] = ObjectSerializer::toFormValue($ledger_account_number);
        }
        // form params
        if ($has_active_bank_agreement !== null) {
            $formParams['HasActiveBankAgreement'] = ObjectSerializer::toFormValue($has_active_bank_agreement);
        }
        // form params
        if ($is_default_cheque_account !== null) {
            $formParams['IsDefaultChequeAccount'] = ObjectSerializer::toFormValue($is_default_cheque_account);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
