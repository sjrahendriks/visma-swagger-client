<?php
/**
 * CompanySettingsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CompanySettingsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanySettingsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companySettingsV2Get
     *
     * Get company settings.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2Get()
    {
        list($response) = $this->companySettingsV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation companySettingsV2GetWithHttpInfo
     *
     * Get company settings.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2GetAsync
     *
     * Get company settings.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2GetAsync()
    {
        return $this->companySettingsV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2GetAsyncWithHttpInfo
     *
     * Get company settings.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2GetRequest()
    {

        $resourcePath = '/v2/companysettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2Put
     *
     * Replace company settings.
     *
     * @param  \Swagger\Client\Model\CompanySettingsApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2Put($body)
    {
        list($response) = $this->companySettingsV2PutWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation companySettingsV2PutWithHttpInfo
     *
     * Replace company settings.
     *
     * @param  \Swagger\Client\Model\CompanySettingsApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2PutWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2PutRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2PutAsync
     *
     * Replace company settings.
     *
     * @param  \Swagger\Client\Model\CompanySettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2PutAsync($body)
    {
        return $this->companySettingsV2PutAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2PutAsyncWithHttpInfo
     *
     * Replace company settings.
     *
     * @param  \Swagger\Client\Model\CompanySettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2PutAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2PutRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2Put'
     *
     * @param  \Swagger\Client\Model\CompanySettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2PutRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling companySettingsV2Put'
            );
        }

        $resourcePath = '/v2/companysettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($email !== null) {
            $formParams['Email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($phone !== null) {
            $formParams['Phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($website !== null) {
            $formParams['Website'] = ObjectSerializer::toFormValue($website);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($vat_code !== null) {
            $formParams['VatCode'] = ObjectSerializer::toFormValue($vat_code);
        }
        // form params
        if ($bank_giro !== null) {
            $formParams['BankGiro'] = ObjectSerializer::toFormValue($bank_giro);
        }
        // form params
        if ($plus_giro !== null) {
            $formParams['PlusGiro'] = ObjectSerializer::toFormValue($plus_giro);
        }
        // form params
        if ($bank_account !== null) {
            $formParams['BankAccount'] = ObjectSerializer::toFormValue($bank_account);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($accounting_locked_to !== null) {
            $formParams['AccountingLockedTo'] = ObjectSerializer::toFormValue($accounting_locked_to);
        }
        // form params
        if ($accounting_lock_interval !== null) {
            $formParams['AccountingLockInterval'] = ObjectSerializer::toFormValue($accounting_lock_interval);
        }
        // form params
        if ($tax_declaration_date !== null) {
            $formParams['TaxDeclarationDate'] = ObjectSerializer::toFormValue($tax_declaration_date);
        }
        // form params
        if ($gln !== null) {
            $formParams['Gln'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($product_variant !== null) {
            $formParams['ProductVariant'] = ObjectSerializer::toFormValue($product_variant);
        }
        // form params
        if ($type_of_business !== null) {
            $formParams['TypeOfBusiness'] = ObjectSerializer::toFormValue($type_of_business);
        }
        // form params
        if ($vat_period !== null) {
            $formParams['VatPeriod'] = ObjectSerializer::toFormValue($vat_period);
        }
        // form params
        if ($activated_modules !== null) {
            $formParams['ActivatedModules'] = ObjectSerializer::toFormValue($activated_modules);
        }
        // form params
        if ($company_text !== null) {
            $formParams['CompanyText'] = ObjectSerializer::toFormValue($company_text);
        }
        // form params
        if ($next_customer_number !== null) {
            $formParams['NextCustomerNumber'] = ObjectSerializer::toFormValue($next_customer_number);
        }
        // form params
        if ($next_supplier_number !== null) {
            $formParams['NextSupplierNumber'] = ObjectSerializer::toFormValue($next_supplier_number);
        }
        // form params
        if ($next_customer_invoice_number !== null) {
            $formParams['NextCustomerInvoiceNumber'] = ObjectSerializer::toFormValue($next_customer_invoice_number);
        }
        // form params
        if ($next_quote_number !== null) {
            $formParams['NextQuoteNumber'] = ObjectSerializer::toFormValue($next_quote_number);
        }
        // form params
        if ($show_prices_excl_vat_pc !== null) {
            $formParams['ShowPricesExclVatPC'] = ObjectSerializer::toFormValue($show_prices_excl_vat_pc);
        }
        // form params
        if ($is_payslip_activated !== null) {
            $formParams['IsPayslipActivated'] = ObjectSerializer::toFormValue($is_payslip_activated);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($uses_payment_reference_number !== null) {
            $formParams['UsesPaymentReferenceNumber'] = ObjectSerializer::toFormValue($uses_payment_reference_number);
        }
        // form params
        if ($domestic_currency_rounding !== null) {
            $formParams['DomesticCurrencyRounding'] = ObjectSerializer::toFormValue($domestic_currency_rounding);
        }
        // form params
        if ($auto_invoice !== null) {
            $formParams['AutoInvoice'] = ObjectSerializer::toFormValue($auto_invoice);
        }
        // form params
        if ($approval_settings !== null) {
            $formParams['ApprovalSettings'] = ObjectSerializer::toFormValue($approval_settings);
        }
        // form params
        if ($uses_reverse_construction_vat !== null) {
            $formParams['UsesReverseConstructionVat'] = ObjectSerializer::toFormValue($uses_reverse_construction_vat);
        }
        // form params
        if ($uses_rot_reduced_invoicing !== null) {
            $formParams['UsesRotReducedInvoicing'] = ObjectSerializer::toFormValue($uses_rot_reduced_invoicing);
        }
        // form params
        if ($company_rot_rut_settings !== null) {
            $formParams['CompanyRotRutSettings'] = ObjectSerializer::toFormValue($company_rot_rut_settings);
        }
        // form params
        if ($company_status !== null) {
            $formParams['CompanyStatus'] = ObjectSerializer::toFormValue($company_status);
        }
        // form params
        if ($company_identifier !== null) {
            $formParams['CompanyIdentifier'] = ObjectSerializer::toFormValue($company_identifier);
        }
        // form params
        if ($bankgiro_number_print !== null) {
            $formParams['BankgiroNumberPrint'] = ObjectSerializer::toFormValue($bankgiro_number_print);
        }
        // form params
        if ($keep_original_draft_date !== null) {
            $formParams['KeepOriginalDraftDate'] = ObjectSerializer::toFormValue($keep_original_draft_date);
        }
        // form params
        if ($use_automatic_vat_calculation !== null) {
            $formParams['UseAutomaticVatCalculation'] = ObjectSerializer::toFormValue($use_automatic_vat_calculation);
        }
        // form params
        if ($show_cost_center_reminder !== null) {
            $formParams['ShowCostCenterReminder'] = ObjectSerializer::toFormValue($show_cost_center_reminder);
        }
        // form params
        if ($show_project_reminder !== null) {
            $formParams['ShowProjectReminder'] = ObjectSerializer::toFormValue($show_project_reminder);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2Put
     *
     * Replace company settings.
     *
     * @param  string $name name (required)
     * @param  string $email email (required)
     * @param  string $phone phone (required)
     * @param  string $mobile_phone mobile_phone (required)
     * @param  string $address1 address1 (required)
     * @param  string $address2 address2 (required)
     * @param  string $country_code country_code (required)
     * @param  string $postal_code postal_code (required)
     * @param  string $city city (required)
     * @param  string $website website (required)
     * @param  string $currency_code currency_code (required)
     * @param  string $terms_of_payment_id terms_of_payment_id (required)
     * @param  string $corporate_identity_number corporate_identity_number (required)
     * @param  string $vat_code vat_code (required)
     * @param  string $bank_giro bank_giro (required)
     * @param  string $plus_giro plus_giro (required)
     * @param  string $bank_account bank_account (required)
     * @param  string $iban iban (required)
     * @param  \DateTime $accounting_locked_to accounting_locked_to (required)
     * @param  int $accounting_lock_interval accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date tax_declaration_date (required)
     * @param  string $gln gln (required)
     * @param  int $product_variant product_variant (required)
     * @param  int $type_of_business type_of_business (required)
     * @param  int $vat_period vat_period (required)
     * @param  string[] $activated_modules activated_modules (required)
     * @param  \Swagger\Client\Model\CompanyTextsApi $company_text company_text (required)
     * @param  int $next_customer_number next_customer_number (required)
     * @param  int $next_supplier_number next_supplier_number (required)
     * @param  int $next_customer_invoice_number next_customer_invoice_number (required)
     * @param  int $next_quote_number next_quote_number (required)
     * @param  bool $show_prices_excl_vat_pc show_prices_excl_vat_pc (required)
     * @param  bool $is_payslip_activated is_payslip_activated (required)
     * @param  bool $uses_moss uses_moss (required)
     * @param  bool $uses_payment_reference_number uses_payment_reference_number (required)
     * @param  int $domestic_currency_rounding domestic_currency_rounding (required)
     * @param  \Swagger\Client\Model\AutoInvoiceApi $auto_invoice auto_invoice (required)
     * @param  \Swagger\Client\Model\ApprovalSettingsApi $approval_settings approval_settings (required)
     * @param  bool $uses_reverse_construction_vat uses_reverse_construction_vat (required)
     * @param  bool $uses_rot_reduced_invoicing uses_rot_reduced_invoicing (required)
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $company_rot_rut_settings company_rot_rut_settings (required)
     * @param  int $company_status company_status (required)
     * @param  string $company_identifier company_identifier (required)
     * @param  string $bankgiro_number_print bankgiro_number_print (required)
     * @param  bool $keep_original_draft_date keep_original_draft_date (required)
     * @param  bool $use_automatic_vat_calculation use_automatic_vat_calculation (required)
     * @param  bool $show_cost_center_reminder show_cost_center_reminder (required)
     * @param  bool $show_project_reminder show_project_reminder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2Put($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
    {
        list($response) = $this->companySettingsV2PutWithHttpInfo($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder);
        return $response;
    }

    /**
     * Operation companySettingsV2PutWithHttpInfo
     *
     * Replace company settings.
     *
     * @param  string $name (required)
     * @param  string $email (required)
     * @param  string $phone (required)
     * @param  string $mobile_phone (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  string $country_code (required)
     * @param  string $postal_code (required)
     * @param  string $city (required)
     * @param  string $website (required)
     * @param  string $currency_code (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $vat_code (required)
     * @param  string $bank_giro (required)
     * @param  string $plus_giro (required)
     * @param  string $bank_account (required)
     * @param  string $iban (required)
     * @param  \DateTime $accounting_locked_to (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     * @param  string $gln (required)
     * @param  int $product_variant (required)
     * @param  int $type_of_business (required)
     * @param  int $vat_period (required)
     * @param  string[] $activated_modules (required)
     * @param  \Swagger\Client\Model\CompanyTextsApi $company_text (required)
     * @param  int $next_customer_number (required)
     * @param  int $next_supplier_number (required)
     * @param  int $next_customer_invoice_number (required)
     * @param  int $next_quote_number (required)
     * @param  bool $show_prices_excl_vat_pc (required)
     * @param  bool $is_payslip_activated (required)
     * @param  bool $uses_moss (required)
     * @param  bool $uses_payment_reference_number (required)
     * @param  int $domestic_currency_rounding (required)
     * @param  \Swagger\Client\Model\AutoInvoiceApi $auto_invoice (required)
     * @param  \Swagger\Client\Model\ApprovalSettingsApi $approval_settings (required)
     * @param  bool $uses_reverse_construction_vat (required)
     * @param  bool $uses_rot_reduced_invoicing (required)
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $company_rot_rut_settings (required)
     * @param  int $company_status (required)
     * @param  string $company_identifier (required)
     * @param  string $bankgiro_number_print (required)
     * @param  bool $keep_original_draft_date (required)
     * @param  bool $use_automatic_vat_calculation (required)
     * @param  bool $show_cost_center_reminder (required)
     * @param  bool $show_project_reminder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2PutWithHttpInfo($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2PutRequest($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2PutAsync
     *
     * Replace company settings.
     *
     * @param  string $name (required)
     * @param  string $email (required)
     * @param  string $phone (required)
     * @param  string $mobile_phone (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  string $country_code (required)
     * @param  string $postal_code (required)
     * @param  string $city (required)
     * @param  string $website (required)
     * @param  string $currency_code (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $vat_code (required)
     * @param  string $bank_giro (required)
     * @param  string $plus_giro (required)
     * @param  string $bank_account (required)
     * @param  string $iban (required)
     * @param  \DateTime $accounting_locked_to (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     * @param  string $gln (required)
     * @param  int $product_variant (required)
     * @param  int $type_of_business (required)
     * @param  int $vat_period (required)
     * @param  string[] $activated_modules (required)
     * @param  \Swagger\Client\Model\CompanyTextsApi $company_text (required)
     * @param  int $next_customer_number (required)
     * @param  int $next_supplier_number (required)
     * @param  int $next_customer_invoice_number (required)
     * @param  int $next_quote_number (required)
     * @param  bool $show_prices_excl_vat_pc (required)
     * @param  bool $is_payslip_activated (required)
     * @param  bool $uses_moss (required)
     * @param  bool $uses_payment_reference_number (required)
     * @param  int $domestic_currency_rounding (required)
     * @param  \Swagger\Client\Model\AutoInvoiceApi $auto_invoice (required)
     * @param  \Swagger\Client\Model\ApprovalSettingsApi $approval_settings (required)
     * @param  bool $uses_reverse_construction_vat (required)
     * @param  bool $uses_rot_reduced_invoicing (required)
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $company_rot_rut_settings (required)
     * @param  int $company_status (required)
     * @param  string $company_identifier (required)
     * @param  string $bankgiro_number_print (required)
     * @param  bool $keep_original_draft_date (required)
     * @param  bool $use_automatic_vat_calculation (required)
     * @param  bool $show_cost_center_reminder (required)
     * @param  bool $show_project_reminder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2PutAsync($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
    {
        return $this->companySettingsV2PutAsyncWithHttpInfo($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2PutAsyncWithHttpInfo
     *
     * Replace company settings.
     *
     * @param  string $name (required)
     * @param  string $email (required)
     * @param  string $phone (required)
     * @param  string $mobile_phone (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  string $country_code (required)
     * @param  string $postal_code (required)
     * @param  string $city (required)
     * @param  string $website (required)
     * @param  string $currency_code (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $vat_code (required)
     * @param  string $bank_giro (required)
     * @param  string $plus_giro (required)
     * @param  string $bank_account (required)
     * @param  string $iban (required)
     * @param  \DateTime $accounting_locked_to (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     * @param  string $gln (required)
     * @param  int $product_variant (required)
     * @param  int $type_of_business (required)
     * @param  int $vat_period (required)
     * @param  string[] $activated_modules (required)
     * @param  \Swagger\Client\Model\CompanyTextsApi $company_text (required)
     * @param  int $next_customer_number (required)
     * @param  int $next_supplier_number (required)
     * @param  int $next_customer_invoice_number (required)
     * @param  int $next_quote_number (required)
     * @param  bool $show_prices_excl_vat_pc (required)
     * @param  bool $is_payslip_activated (required)
     * @param  bool $uses_moss (required)
     * @param  bool $uses_payment_reference_number (required)
     * @param  int $domestic_currency_rounding (required)
     * @param  \Swagger\Client\Model\AutoInvoiceApi $auto_invoice (required)
     * @param  \Swagger\Client\Model\ApprovalSettingsApi $approval_settings (required)
     * @param  bool $uses_reverse_construction_vat (required)
     * @param  bool $uses_rot_reduced_invoicing (required)
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $company_rot_rut_settings (required)
     * @param  int $company_status (required)
     * @param  string $company_identifier (required)
     * @param  string $bankgiro_number_print (required)
     * @param  bool $keep_original_draft_date (required)
     * @param  bool $use_automatic_vat_calculation (required)
     * @param  bool $show_cost_center_reminder (required)
     * @param  bool $show_project_reminder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2PutAsyncWithHttpInfo($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2PutRequest($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2Put'
     *
     * @param  string $name (required)
     * @param  string $email (required)
     * @param  string $phone (required)
     * @param  string $mobile_phone (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  string $country_code (required)
     * @param  string $postal_code (required)
     * @param  string $city (required)
     * @param  string $website (required)
     * @param  string $currency_code (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $vat_code (required)
     * @param  string $bank_giro (required)
     * @param  string $plus_giro (required)
     * @param  string $bank_account (required)
     * @param  string $iban (required)
     * @param  \DateTime $accounting_locked_to (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     * @param  string $gln (required)
     * @param  int $product_variant (required)
     * @param  int $type_of_business (required)
     * @param  int $vat_period (required)
     * @param  string[] $activated_modules (required)
     * @param  \Swagger\Client\Model\CompanyTextsApi $company_text (required)
     * @param  int $next_customer_number (required)
     * @param  int $next_supplier_number (required)
     * @param  int $next_customer_invoice_number (required)
     * @param  int $next_quote_number (required)
     * @param  bool $show_prices_excl_vat_pc (required)
     * @param  bool $is_payslip_activated (required)
     * @param  bool $uses_moss (required)
     * @param  bool $uses_payment_reference_number (required)
     * @param  int $domestic_currency_rounding (required)
     * @param  \Swagger\Client\Model\AutoInvoiceApi $auto_invoice (required)
     * @param  \Swagger\Client\Model\ApprovalSettingsApi $approval_settings (required)
     * @param  bool $uses_reverse_construction_vat (required)
     * @param  bool $uses_rot_reduced_invoicing (required)
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $company_rot_rut_settings (required)
     * @param  int $company_status (required)
     * @param  string $company_identifier (required)
     * @param  string $bankgiro_number_print (required)
     * @param  bool $keep_original_draft_date (required)
     * @param  bool $use_automatic_vat_calculation (required)
     * @param  bool $show_cost_center_reminder (required)
     * @param  bool $show_project_reminder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2PutRequest($name, $email, $phone, $mobile_phone, $address1, $address2, $country_code, $postal_code, $city, $website, $currency_code, $terms_of_payment_id, $corporate_identity_number, $vat_code, $bank_giro, $plus_giro, $bank_account, $iban, $accounting_locked_to, $accounting_lock_interval, $tax_declaration_date, $gln, $product_variant, $type_of_business, $vat_period, $activated_modules, $company_text, $next_customer_number, $next_supplier_number, $next_customer_invoice_number, $next_quote_number, $show_prices_excl_vat_pc, $is_payslip_activated, $uses_moss, $uses_payment_reference_number, $domestic_currency_rounding, $auto_invoice, $approval_settings, $uses_reverse_construction_vat, $uses_rot_reduced_invoicing, $company_rot_rut_settings, $company_status, $company_identifier, $bankgiro_number_print, $keep_original_draft_date, $use_automatic_vat_calculation, $show_cost_center_reminder, $show_project_reminder)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'phone' is set
        if ($phone === null || (is_array($phone) && count($phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'mobile_phone' is set
        if ($mobile_phone === null || (is_array($mobile_phone) && count($mobile_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mobile_phone when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'address1' is set
        if ($address1 === null || (is_array($address1) && count($address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address1 when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'address2' is set
        if ($address2 === null || (is_array($address2) && count($address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address2 when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'postal_code' is set
        if ($postal_code === null || (is_array($postal_code) && count($postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postal_code when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'website' is set
        if ($website === null || (is_array($website) && count($website) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $website when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'terms_of_payment_id' is set
        if ($terms_of_payment_id === null || (is_array($terms_of_payment_id) && count($terms_of_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment_id when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'corporate_identity_number' is set
        if ($corporate_identity_number === null || (is_array($corporate_identity_number) && count($corporate_identity_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_identity_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'vat_code' is set
        if ($vat_code === null || (is_array($vat_code) && count($vat_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_code when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'bank_giro' is set
        if ($bank_giro === null || (is_array($bank_giro) && count($bank_giro) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_giro when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'plus_giro' is set
        if ($plus_giro === null || (is_array($plus_giro) && count($plus_giro) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plus_giro when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'bank_account' is set
        if ($bank_account === null || (is_array($bank_account) && count($bank_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'iban' is set
        if ($iban === null || (is_array($iban) && count($iban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $iban when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'accounting_locked_to' is set
        if ($accounting_locked_to === null || (is_array($accounting_locked_to) && count($accounting_locked_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accounting_locked_to when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'accounting_lock_interval' is set
        if ($accounting_lock_interval === null || (is_array($accounting_lock_interval) && count($accounting_lock_interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accounting_lock_interval when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'tax_declaration_date' is set
        if ($tax_declaration_date === null || (is_array($tax_declaration_date) && count($tax_declaration_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_declaration_date when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'gln' is set
        if ($gln === null || (is_array($gln) && count($gln) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gln when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'product_variant' is set
        if ($product_variant === null || (is_array($product_variant) && count($product_variant) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_variant when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'type_of_business' is set
        if ($type_of_business === null || (is_array($type_of_business) && count($type_of_business) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type_of_business when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'vat_period' is set
        if ($vat_period === null || (is_array($vat_period) && count($vat_period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_period when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'activated_modules' is set
        if ($activated_modules === null || (is_array($activated_modules) && count($activated_modules) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activated_modules when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'company_text' is set
        if ($company_text === null || (is_array($company_text) && count($company_text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_text when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'next_customer_number' is set
        if ($next_customer_number === null || (is_array($next_customer_number) && count($next_customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_customer_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'next_supplier_number' is set
        if ($next_supplier_number === null || (is_array($next_supplier_number) && count($next_supplier_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_supplier_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'next_customer_invoice_number' is set
        if ($next_customer_invoice_number === null || (is_array($next_customer_invoice_number) && count($next_customer_invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_customer_invoice_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'next_quote_number' is set
        if ($next_quote_number === null || (is_array($next_quote_number) && count($next_quote_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $next_quote_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'show_prices_excl_vat_pc' is set
        if ($show_prices_excl_vat_pc === null || (is_array($show_prices_excl_vat_pc) && count($show_prices_excl_vat_pc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $show_prices_excl_vat_pc when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'is_payslip_activated' is set
        if ($is_payslip_activated === null || (is_array($is_payslip_activated) && count($is_payslip_activated) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_payslip_activated when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'uses_moss' is set
        if ($uses_moss === null || (is_array($uses_moss) && count($uses_moss) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_moss when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'uses_payment_reference_number' is set
        if ($uses_payment_reference_number === null || (is_array($uses_payment_reference_number) && count($uses_payment_reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_payment_reference_number when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'domestic_currency_rounding' is set
        if ($domestic_currency_rounding === null || (is_array($domestic_currency_rounding) && count($domestic_currency_rounding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domestic_currency_rounding when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'auto_invoice' is set
        if ($auto_invoice === null || (is_array($auto_invoice) && count($auto_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_invoice when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'approval_settings' is set
        if ($approval_settings === null || (is_array($approval_settings) && count($approval_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approval_settings when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'uses_reverse_construction_vat' is set
        if ($uses_reverse_construction_vat === null || (is_array($uses_reverse_construction_vat) && count($uses_reverse_construction_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_reverse_construction_vat when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'uses_rot_reduced_invoicing' is set
        if ($uses_rot_reduced_invoicing === null || (is_array($uses_rot_reduced_invoicing) && count($uses_rot_reduced_invoicing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_rot_reduced_invoicing when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'company_rot_rut_settings' is set
        if ($company_rot_rut_settings === null || (is_array($company_rot_rut_settings) && count($company_rot_rut_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_rot_rut_settings when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'company_status' is set
        if ($company_status === null || (is_array($company_status) && count($company_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_status when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'company_identifier' is set
        if ($company_identifier === null || (is_array($company_identifier) && count($company_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_identifier when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'bankgiro_number_print' is set
        if ($bankgiro_number_print === null || (is_array($bankgiro_number_print) && count($bankgiro_number_print) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankgiro_number_print when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'keep_original_draft_date' is set
        if ($keep_original_draft_date === null || (is_array($keep_original_draft_date) && count($keep_original_draft_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keep_original_draft_date when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'use_automatic_vat_calculation' is set
        if ($use_automatic_vat_calculation === null || (is_array($use_automatic_vat_calculation) && count($use_automatic_vat_calculation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $use_automatic_vat_calculation when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'show_cost_center_reminder' is set
        if ($show_cost_center_reminder === null || (is_array($show_cost_center_reminder) && count($show_cost_center_reminder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $show_cost_center_reminder when calling companySettingsV2Put'
            );
        }
        // verify the required parameter 'show_project_reminder' is set
        if ($show_project_reminder === null || (is_array($show_project_reminder) && count($show_project_reminder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $show_project_reminder when calling companySettingsV2Put'
            );
        }

        $resourcePath = '/v2/companysettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($email !== null) {
            $formParams['Email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($phone !== null) {
            $formParams['Phone'] = ObjectSerializer::toFormValue($phone);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($website !== null) {
            $formParams['Website'] = ObjectSerializer::toFormValue($website);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($vat_code !== null) {
            $formParams['VatCode'] = ObjectSerializer::toFormValue($vat_code);
        }
        // form params
        if ($bank_giro !== null) {
            $formParams['BankGiro'] = ObjectSerializer::toFormValue($bank_giro);
        }
        // form params
        if ($plus_giro !== null) {
            $formParams['PlusGiro'] = ObjectSerializer::toFormValue($plus_giro);
        }
        // form params
        if ($bank_account !== null) {
            $formParams['BankAccount'] = ObjectSerializer::toFormValue($bank_account);
        }
        // form params
        if ($iban !== null) {
            $formParams['Iban'] = ObjectSerializer::toFormValue($iban);
        }
        // form params
        if ($accounting_locked_to !== null) {
            $formParams['AccountingLockedTo'] = ObjectSerializer::toFormValue($accounting_locked_to);
        }
        // form params
        if ($accounting_lock_interval !== null) {
            $formParams['AccountingLockInterval'] = ObjectSerializer::toFormValue($accounting_lock_interval);
        }
        // form params
        if ($tax_declaration_date !== null) {
            $formParams['TaxDeclarationDate'] = ObjectSerializer::toFormValue($tax_declaration_date);
        }
        // form params
        if ($gln !== null) {
            $formParams['Gln'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($product_variant !== null) {
            $formParams['ProductVariant'] = ObjectSerializer::toFormValue($product_variant);
        }
        // form params
        if ($type_of_business !== null) {
            $formParams['TypeOfBusiness'] = ObjectSerializer::toFormValue($type_of_business);
        }
        // form params
        if ($vat_period !== null) {
            $formParams['VatPeriod'] = ObjectSerializer::toFormValue($vat_period);
        }
        // form params
        if ($activated_modules !== null) {
            $formParams['ActivatedModules'] = ObjectSerializer::toFormValue($activated_modules);
        }
        // form params
        if ($company_text !== null) {
            $formParams['CompanyText'] = ObjectSerializer::toFormValue($company_text);
        }
        // form params
        if ($next_customer_number !== null) {
            $formParams['NextCustomerNumber'] = ObjectSerializer::toFormValue($next_customer_number);
        }
        // form params
        if ($next_supplier_number !== null) {
            $formParams['NextSupplierNumber'] = ObjectSerializer::toFormValue($next_supplier_number);
        }
        // form params
        if ($next_customer_invoice_number !== null) {
            $formParams['NextCustomerInvoiceNumber'] = ObjectSerializer::toFormValue($next_customer_invoice_number);
        }
        // form params
        if ($next_quote_number !== null) {
            $formParams['NextQuoteNumber'] = ObjectSerializer::toFormValue($next_quote_number);
        }
        // form params
        if ($show_prices_excl_vat_pc !== null) {
            $formParams['ShowPricesExclVatPC'] = ObjectSerializer::toFormValue($show_prices_excl_vat_pc);
        }
        // form params
        if ($is_payslip_activated !== null) {
            $formParams['IsPayslipActivated'] = ObjectSerializer::toFormValue($is_payslip_activated);
        }
        // form params
        if ($uses_moss !== null) {
            $formParams['UsesMoss'] = ObjectSerializer::toFormValue($uses_moss);
        }
        // form params
        if ($uses_payment_reference_number !== null) {
            $formParams['UsesPaymentReferenceNumber'] = ObjectSerializer::toFormValue($uses_payment_reference_number);
        }
        // form params
        if ($domestic_currency_rounding !== null) {
            $formParams['DomesticCurrencyRounding'] = ObjectSerializer::toFormValue($domestic_currency_rounding);
        }
        // form params
        if ($auto_invoice !== null) {
            $formParams['AutoInvoice'] = ObjectSerializer::toFormValue($auto_invoice);
        }
        // form params
        if ($approval_settings !== null) {
            $formParams['ApprovalSettings'] = ObjectSerializer::toFormValue($approval_settings);
        }
        // form params
        if ($uses_reverse_construction_vat !== null) {
            $formParams['UsesReverseConstructionVat'] = ObjectSerializer::toFormValue($uses_reverse_construction_vat);
        }
        // form params
        if ($uses_rot_reduced_invoicing !== null) {
            $formParams['UsesRotReducedInvoicing'] = ObjectSerializer::toFormValue($uses_rot_reduced_invoicing);
        }
        // form params
        if ($company_rot_rut_settings !== null) {
            $formParams['CompanyRotRutSettings'] = ObjectSerializer::toFormValue($company_rot_rut_settings);
        }
        // form params
        if ($company_status !== null) {
            $formParams['CompanyStatus'] = ObjectSerializer::toFormValue($company_status);
        }
        // form params
        if ($company_identifier !== null) {
            $formParams['CompanyIdentifier'] = ObjectSerializer::toFormValue($company_identifier);
        }
        // form params
        if ($bankgiro_number_print !== null) {
            $formParams['BankgiroNumberPrint'] = ObjectSerializer::toFormValue($bankgiro_number_print);
        }
        // form params
        if ($keep_original_draft_date !== null) {
            $formParams['KeepOriginalDraftDate'] = ObjectSerializer::toFormValue($keep_original_draft_date);
        }
        // form params
        if ($use_automatic_vat_calculation !== null) {
            $formParams['UseAutomaticVatCalculation'] = ObjectSerializer::toFormValue($use_automatic_vat_calculation);
        }
        // form params
        if ($show_cost_center_reminder !== null) {
            $formParams['ShowCostCenterReminder'] = ObjectSerializer::toFormValue($show_cost_center_reminder);
        }
        // form params
        if ($show_project_reminder !== null) {
            $formParams['ShowProjectReminder'] = ObjectSerializer::toFormValue($show_project_reminder);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettings
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockSettingsApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2UpdateAccountingLockSettings($body)
    {
        list($response) = $this->companySettingsV2UpdateAccountingLockSettingsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsWithHttpInfo
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockSettingsApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2UpdateAccountingLockSettingsWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateAccountingLockSettingsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsAsync
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateAccountingLockSettingsAsync($body)
    {
        return $this->companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateAccountingLockSettingsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2UpdateAccountingLockSettings'
     *
     * @param  \Swagger\Client\Model\AccountingLockSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2UpdateAccountingLockSettingsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling companySettingsV2UpdateAccountingLockSettings'
            );
        }

        $resourcePath = '/v2/companysettings/accountinglocksettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($accounting_locked_as_of !== null) {
            $formParams['AccountingLockedAsOf'] = ObjectSerializer::toFormValue($accounting_locked_as_of);
        }
        // form params
        if ($accounting_lock_interval !== null) {
            $formParams['AccountingLockInterval'] = ObjectSerializer::toFormValue($accounting_lock_interval);
        }
        // form params
        if ($tax_declaration_date !== null) {
            $formParams['TaxDeclarationDate'] = ObjectSerializer::toFormValue($tax_declaration_date);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettings
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockDateApi $accounting_locked_as_of accounting_locked_as_of (required)
     * @param  int $accounting_lock_interval accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date tax_declaration_date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2UpdateAccountingLockSettings($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
    {
        list($response) = $this->companySettingsV2UpdateAccountingLockSettingsWithHttpInfo($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date);
        return $response;
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsWithHttpInfo
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockDateApi $accounting_locked_as_of (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2UpdateAccountingLockSettingsWithHttpInfo($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateAccountingLockSettingsRequest($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsAsync
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockDateApi $accounting_locked_as_of (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateAccountingLockSettingsAsync($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
    {
        return $this->companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo
     *
     * Update accounting lock interval settings.
     *
     * @param  \Swagger\Client\Model\AccountingLockDateApi $accounting_locked_as_of (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateAccountingLockSettingsAsyncWithHttpInfo($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateAccountingLockSettingsRequest($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2UpdateAccountingLockSettings'
     *
     * @param  \Swagger\Client\Model\AccountingLockDateApi $accounting_locked_as_of (required)
     * @param  int $accounting_lock_interval (required)
     * @param  \Swagger\Client\Model\TaxDeclarationDateApi $tax_declaration_date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2UpdateAccountingLockSettingsRequest($accounting_locked_as_of, $accounting_lock_interval, $tax_declaration_date)
    {
        // verify the required parameter 'accounting_locked_as_of' is set
        if ($accounting_locked_as_of === null || (is_array($accounting_locked_as_of) && count($accounting_locked_as_of) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accounting_locked_as_of when calling companySettingsV2UpdateAccountingLockSettings'
            );
        }
        // verify the required parameter 'accounting_lock_interval' is set
        if ($accounting_lock_interval === null || (is_array($accounting_lock_interval) && count($accounting_lock_interval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accounting_lock_interval when calling companySettingsV2UpdateAccountingLockSettings'
            );
        }
        // verify the required parameter 'tax_declaration_date' is set
        if ($tax_declaration_date === null || (is_array($tax_declaration_date) && count($tax_declaration_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_declaration_date when calling companySettingsV2UpdateAccountingLockSettings'
            );
        }

        $resourcePath = '/v2/companysettings/accountinglocksettings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($accounting_locked_as_of !== null) {
            $formParams['AccountingLockedAsOf'] = ObjectSerializer::toFormValue($accounting_locked_as_of);
        }
        // form params
        if ($accounting_lock_interval !== null) {
            $formParams['AccountingLockInterval'] = ObjectSerializer::toFormValue($accounting_lock_interval);
        }
        // form params
        if ($tax_declaration_date !== null) {
            $formParams['TaxDeclarationDate'] = ObjectSerializer::toFormValue($tax_declaration_date);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettings
     *
     * Update ROT/RUT settings.
     *
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2UpdateRotRutSettings($body)
    {
        list($response) = $this->companySettingsV2UpdateRotRutSettingsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsWithHttpInfo
     *
     * Update ROT/RUT settings.
     *
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2UpdateRotRutSettingsWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateRotRutSettingsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsAsync
     *
     * Update ROT/RUT settings.
     *
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateRotRutSettingsAsync($body)
    {
        return $this->companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo
     *
     * Update ROT/RUT settings.
     *
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateRotRutSettingsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2UpdateRotRutSettings'
     *
     * @param  \Swagger\Client\Model\CompanyRotRutSettingsApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2UpdateRotRutSettingsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling companySettingsV2UpdateRotRutSettings'
            );
        }

        $resourcePath = '/v2/companysettings/rotrut';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($rut_max_amount_for_pers_below65_year !== null) {
            $formParams['RutMaxAmountForPersBelow65Year'] = ObjectSerializer::toFormValue($rut_max_amount_for_pers_below65_year);
        }
        // form params
        if ($rut_max_amount_for_pers_over65_year !== null) {
            $formParams['RutMaxAmountForPersOver65Year'] = ObjectSerializer::toFormValue($rut_max_amount_for_pers_over65_year);
        }
        // form params
        if ($rut_reduced_invoicing_percent !== null) {
            $formParams['RutReducedInvoicingPercent'] = ObjectSerializer::toFormValue($rut_reduced_invoicing_percent);
        }
        // form params
        if ($rot_reduced_invoicing_max_amount !== null) {
            $formParams['RotReducedInvoicingMaxAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_max_amount);
        }
        // form params
        if ($rot_reduced_invoicing_percent !== null) {
            $formParams['RotReducedInvoicingPercent'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_percent);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettings
     *
     * Update ROT/RUT settings.
     *
     * @param  double $rut_max_amount_for_pers_below65_year rut_max_amount_for_pers_below65_year (required)
     * @param  double $rut_max_amount_for_pers_over65_year rut_max_amount_for_pers_over65_year (required)
     * @param  double $rut_reduced_invoicing_percent rut_reduced_invoicing_percent (required)
     * @param  double $rot_reduced_invoicing_max_amount rot_reduced_invoicing_max_amount (required)
     * @param  double $rot_reduced_invoicing_percent rot_reduced_invoicing_percent (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanySettingsApi
     */
    public function companySettingsV2UpdateRotRutSettings($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
    {
        list($response) = $this->companySettingsV2UpdateRotRutSettingsWithHttpInfo($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent);
        return $response;
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsWithHttpInfo
     *
     * Update ROT/RUT settings.
     *
     * @param  double $rut_max_amount_for_pers_below65_year (required)
     * @param  double $rut_max_amount_for_pers_over65_year (required)
     * @param  double $rut_reduced_invoicing_percent (required)
     * @param  double $rot_reduced_invoicing_max_amount (required)
     * @param  double $rot_reduced_invoicing_percent (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanySettingsApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySettingsV2UpdateRotRutSettingsWithHttpInfo($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateRotRutSettingsRequest($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanySettingsApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsAsync
     *
     * Update ROT/RUT settings.
     *
     * @param  double $rut_max_amount_for_pers_below65_year (required)
     * @param  double $rut_max_amount_for_pers_over65_year (required)
     * @param  double $rut_reduced_invoicing_percent (required)
     * @param  double $rot_reduced_invoicing_max_amount (required)
     * @param  double $rot_reduced_invoicing_percent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateRotRutSettingsAsync($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
    {
        return $this->companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo
     *
     * Update ROT/RUT settings.
     *
     * @param  double $rut_max_amount_for_pers_below65_year (required)
     * @param  double $rut_max_amount_for_pers_over65_year (required)
     * @param  double $rut_reduced_invoicing_percent (required)
     * @param  double $rot_reduced_invoicing_max_amount (required)
     * @param  double $rot_reduced_invoicing_percent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySettingsV2UpdateRotRutSettingsAsyncWithHttpInfo($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
    {
        $returnType = '\Swagger\Client\Model\CompanySettingsApi';
        $request = $this->companySettingsV2UpdateRotRutSettingsRequest($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySettingsV2UpdateRotRutSettings'
     *
     * @param  double $rut_max_amount_for_pers_below65_year (required)
     * @param  double $rut_max_amount_for_pers_over65_year (required)
     * @param  double $rut_reduced_invoicing_percent (required)
     * @param  double $rot_reduced_invoicing_max_amount (required)
     * @param  double $rot_reduced_invoicing_percent (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySettingsV2UpdateRotRutSettingsRequest($rut_max_amount_for_pers_below65_year, $rut_max_amount_for_pers_over65_year, $rut_reduced_invoicing_percent, $rot_reduced_invoicing_max_amount, $rot_reduced_invoicing_percent)
    {
        // verify the required parameter 'rut_max_amount_for_pers_below65_year' is set
        if ($rut_max_amount_for_pers_below65_year === null || (is_array($rut_max_amount_for_pers_below65_year) && count($rut_max_amount_for_pers_below65_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rut_max_amount_for_pers_below65_year when calling companySettingsV2UpdateRotRutSettings'
            );
        }
        // verify the required parameter 'rut_max_amount_for_pers_over65_year' is set
        if ($rut_max_amount_for_pers_over65_year === null || (is_array($rut_max_amount_for_pers_over65_year) && count($rut_max_amount_for_pers_over65_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rut_max_amount_for_pers_over65_year when calling companySettingsV2UpdateRotRutSettings'
            );
        }
        // verify the required parameter 'rut_reduced_invoicing_percent' is set
        if ($rut_reduced_invoicing_percent === null || (is_array($rut_reduced_invoicing_percent) && count($rut_reduced_invoicing_percent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rut_reduced_invoicing_percent when calling companySettingsV2UpdateRotRutSettings'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_max_amount' is set
        if ($rot_reduced_invoicing_max_amount === null || (is_array($rot_reduced_invoicing_max_amount) && count($rot_reduced_invoicing_max_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_max_amount when calling companySettingsV2UpdateRotRutSettings'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_percent' is set
        if ($rot_reduced_invoicing_percent === null || (is_array($rot_reduced_invoicing_percent) && count($rot_reduced_invoicing_percent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_percent when calling companySettingsV2UpdateRotRutSettings'
            );
        }

        $resourcePath = '/v2/companysettings/rotrut';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($rut_max_amount_for_pers_below65_year !== null) {
            $formParams['RutMaxAmountForPersBelow65Year'] = ObjectSerializer::toFormValue($rut_max_amount_for_pers_below65_year);
        }
        // form params
        if ($rut_max_amount_for_pers_over65_year !== null) {
            $formParams['RutMaxAmountForPersOver65Year'] = ObjectSerializer::toFormValue($rut_max_amount_for_pers_over65_year);
        }
        // form params
        if ($rut_reduced_invoicing_percent !== null) {
            $formParams['RutReducedInvoicingPercent'] = ObjectSerializer::toFormValue($rut_reduced_invoicing_percent);
        }
        // form params
        if ($rot_reduced_invoicing_max_amount !== null) {
            $formParams['RotReducedInvoicingMaxAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_max_amount);
        }
        // form params
        if ($rot_reduced_invoicing_percent !== null) {
            $formParams['RotReducedInvoicingPercent'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_percent);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
