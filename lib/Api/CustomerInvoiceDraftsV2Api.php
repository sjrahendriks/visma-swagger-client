<?php
/**
 * CustomerInvoiceDraftsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CustomerInvoiceDraftsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceDraftsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoice
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationApi $body Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceApi
     */
    public function customerInvoiceDraftsV2ConvertToInvoice($body, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        list($response) = $this->customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($body, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationApi $body Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($body, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($body, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsync
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationApi $body Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsync($body, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        return $this->customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($body, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationApi $body Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($body, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($body, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2ConvertToInvoice'
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationApi $body Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2ConvertToInvoiceRequest($body, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keep_original_draft_date !== null) {
            $queryParams['keepOriginalDraftDate'] = ObjectSerializer::toQueryValue($keep_original_draft_date, null);
        }
        // query params
        if ($override_company_keep_original_draft_date !== null) {
            $queryParams['overrideCompanyKeepOriginalDraftDate'] = ObjectSerializer::toQueryValue($override_company_keep_original_draft_date, null);
        }

        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($total_amount_invoice_currency !== null) {
            $formParams['TotalAmountInvoiceCurrency'] = ObjectSerializer::toFormValue($total_amount_invoice_currency);
        }
        // form params
        if ($total_vat_amount_invoice_currency !== null) {
            $formParams['TotalVatAmountInvoiceCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_invoice_currency);
        }
        // form params
        if ($total_roundings_invoice_currency !== null) {
            $formParams['TotalRoundingsInvoiceCurrency'] = ObjectSerializer::toFormValue($total_roundings_invoice_currency);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoice
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  double $total_amount_invoice_currency total_amount_invoice_currency (required)
     * @param  double $total_vat_amount_invoice_currency total_vat_amount_invoice_currency (required)
     * @param  double $total_roundings_invoice_currency total_roundings_invoice_currency (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationRowApi[] $rows rows (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceApi
     */
    public function customerInvoiceDraftsV2ConvertToInvoice($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        list($response) = $this->customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  double $total_amount_invoice_currency (required)
     * @param  double $total_vat_amount_invoice_currency (required)
     * @param  double $total_roundings_invoice_currency (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationRowApi[] $rows (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsync
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  double $total_amount_invoice_currency (required)
     * @param  double $total_vat_amount_invoice_currency (required)
     * @param  double $total_roundings_invoice_currency (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationRowApi[] $rows (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsync($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        return $this->customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  double $total_amount_invoice_currency (required)
     * @param  double $total_vat_amount_invoice_currency (required)
     * @param  double $total_roundings_invoice_currency (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationRowApi[] $rows (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date, $override_company_keep_original_draft_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2ConvertToInvoice'
     *
     * @param  double $total_amount_invoice_currency (required)
     * @param  double $total_vat_amount_invoice_currency (required)
     * @param  double $total_roundings_invoice_currency (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftValidationRowApi[] $rows (required)
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#x27;s invoice date is used (past or future), or if date misses, the draft&#x27;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#x27;s invoice date is used if it&#x27;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#x27;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2ConvertToInvoiceRequest($total_amount_invoice_currency, $total_vat_amount_invoice_currency, $total_roundings_invoice_currency, $rows, $customer_invoice_draft_id, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        // verify the required parameter 'total_amount_invoice_currency' is set
        if ($total_amount_invoice_currency === null || (is_array($total_amount_invoice_currency) && count($total_amount_invoice_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount_invoice_currency when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'total_vat_amount_invoice_currency' is set
        if ($total_vat_amount_invoice_currency === null || (is_array($total_vat_amount_invoice_currency) && count($total_vat_amount_invoice_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_vat_amount_invoice_currency when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'total_roundings_invoice_currency' is set
        if ($total_roundings_invoice_currency === null || (is_array($total_roundings_invoice_currency) && count($total_roundings_invoice_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_roundings_invoice_currency when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keep_original_draft_date !== null) {
            $queryParams['keepOriginalDraftDate'] = ObjectSerializer::toQueryValue($keep_original_draft_date, null);
        }
        // query params
        if ($override_company_keep_original_draft_date !== null) {
            $queryParams['overrideCompanyKeepOriginalDraftDate'] = ObjectSerializer::toQueryValue($override_company_keep_original_draft_date, null);
        }

        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($total_amount_invoice_currency !== null) {
            $formParams['TotalAmountInvoiceCurrency'] = ObjectSerializer::toFormValue($total_amount_invoice_currency);
        }
        // form params
        if ($total_vat_amount_invoice_currency !== null) {
            $formParams['TotalVatAmountInvoiceCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_invoice_currency);
        }
        // form params
        if ($total_roundings_invoice_currency !== null) {
            $formParams['TotalRoundingsInvoiceCurrency'] = ObjectSerializer::toFormValue($total_roundings_invoice_currency);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Delete
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerInvoiceDraftsV2Delete($customer_invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2DeleteWithHttpInfo($customer_invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteWithHttpInfo
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2DeleteWithHttpInfo($customer_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteAsync
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2DeleteAsync($customer_invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2DeleteAsyncWithHttpInfo($customer_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteAsyncWithHttpInfo
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2DeleteAsyncWithHttpInfo($customer_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Delete'
     *
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id)
    {
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2Delete'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Get
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseCustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Get()
    {
        list($response) = $this->customerInvoiceDraftsV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2GetWithHttpInfo
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseCustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseCustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseCustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2GetAsync
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2GetAsync()
    {
        return $this->customerInvoiceDraftsV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2GetAsyncWithHttpInfo
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseCustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2GetRequest()
    {

        $resourcePath = '/v2/customerinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Get_0($invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2Get_0WithHttpInfo($invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0WithHttpInfo
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2Get_0WithHttpInfo($invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2Get_0Request($invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0Async
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2Get_0Async($invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2Get_0AsyncWithHttpInfo($invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0AsyncWithHttpInfo
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2Get_0AsyncWithHttpInfo($invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2Get_0Request($invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Get_0'
     *
     * @param  string $invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2Get_0Request($invoice_draft_id)
    {
        // verify the required parameter 'invoice_draft_id' is set
        if ($invoice_draft_id === null || (is_array($invoice_draft_id) && count($invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_draft_id when calling customerInvoiceDraftsV2Get_0'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{invoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceDraftId' . '}',
                ObjectSerializer::toPathValue($invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Post
     *
     * Create a single customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Post($body)
    {
        list($response) = $this->customerInvoiceDraftsV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PostWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsync
     *
     * Create a single customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsync($body)
    {
        return $this->customerInvoiceDraftsV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsyncWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Post'
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customerInvoiceDraftsV2Post'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($house_work_other_costs !== null) {
            $formParams['HouseWorkOtherCosts'] = ObjectSerializer::toFormValue($house_work_other_costs);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($your_reference !== null) {
            $formParams['YourReference'] = ObjectSerializer::toFormValue($your_reference);
        }
        // form params
        if ($our_reference !== null) {
            $formParams['OurReference'] = ObjectSerializer::toFormValue($our_reference);
        }
        // form params
        if ($buyers_order_reference !== null) {
            $formParams['BuyersOrderReference'] = ObjectSerializer::toFormValue($buyers_order_reference);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_currency_code !== null) {
            $formParams['InvoiceCurrencyCode'] = ObjectSerializer::toFormValue($invoice_currency_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($delivery_date !== null) {
            $formParams['DeliveryDate'] = ObjectSerializer::toFormValue($delivery_date);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($total_vat_amount !== null) {
            $formParams['TotalVatAmount'] = ObjectSerializer::toFormValue($total_vat_amount);
        }
        // form params
        if ($total_roundings !== null) {
            $formParams['TotalRoundings'] = ObjectSerializer::toFormValue($total_roundings);
        }
        // form params
        if ($total_amount_base_currency !== null) {
            $formParams['TotalAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_amount_base_currency);
        }
        // form params
        if ($total_vat_amount_base_currency !== null) {
            $formParams['TotalVatAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_base_currency);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($replace_unit_price_when_zero !== null) {
            $formParams['ReplaceUnitPriceWhenZero'] = ObjectSerializer::toFormValue($replace_unit_price_when_zero);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Post
     *
     * Create a single customer invoice draft.
     *
     * @param  string $id id (required)
     * @param  string $customer_id customer_id (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  bool $is_credit_invoice is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type rot_property_type (required)
     * @param  double $house_work_other_costs house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons (required)
     * @param  string $your_reference your_reference (required)
     * @param  string $our_reference our_reference (required)
     * @param  string $buyers_order_reference buyers_order_reference (required)
     * @param  string $electronic_reference electronic_reference (required)
     * @param  string $invoice_customer_name invoice_customer_name (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $invoice_currency_code invoice_currency_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_method_name delivery_method_name (required)
     * @param  string $delivery_term_name delivery_term_name (required)
     * @param  string $delivery_method_code delivery_method_code (required)
     * @param  string $delivery_term_code delivery_term_code (required)
     * @param  bool $eu_third_party eu_third_party (required)
     * @param  bool $customer_is_private_person customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments sales_document_attachments (required)
     * @param  \DateTime $invoice_date invoice_date (required)
     * @param  \DateTime $delivery_date delivery_date (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $total_vat_amount total_vat_amount (required)
     * @param  double $total_roundings total_roundings (required)
     * @param  double $total_amount_base_currency total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency total_vat_amount_base_currency (required)
     * @param  string $customer_number customer_number (required)
     * @param  bool $includes_vat includes_vat (required)
     * @param  bool $replace_unit_price_when_zero replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology uses_green_technology (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Post($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
    {
        list($response) = $this->customerInvoiceDraftsV2PostWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PostWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PostWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsync
     *
     * Create a single customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsync($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
    {
        return $this->customerInvoiceDraftsV2PostAsyncWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsyncWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsyncWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Post'
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PostRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'is_credit_invoice' is set
        if ($is_credit_invoice === null || (is_array($is_credit_invoice) && count($is_credit_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_credit_invoice when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_type' is set
        if ($rot_reduced_invoicing_type === null || (is_array($rot_reduced_invoicing_type) && count($rot_reduced_invoicing_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_type when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_property_name' is set
        if ($rot_reduced_invoicing_property_name === null || (is_array($rot_reduced_invoicing_property_name) && count($rot_reduced_invoicing_property_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_property_name when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_org_number' is set
        if ($rot_reduced_invoicing_org_number === null || (is_array($rot_reduced_invoicing_org_number) && count($rot_reduced_invoicing_org_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_org_number when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_amount' is set
        if ($rot_reduced_invoicing_amount === null || (is_array($rot_reduced_invoicing_amount) && count($rot_reduced_invoicing_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_amount when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_automatic_distribution' is set
        if ($rot_reduced_invoicing_automatic_distribution === null || (is_array($rot_reduced_invoicing_automatic_distribution) && count($rot_reduced_invoicing_automatic_distribution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_automatic_distribution when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rot_property_type' is set
        if ($rot_property_type === null || (is_array($rot_property_type) && count($rot_property_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_property_type when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'house_work_other_costs' is set
        if ($house_work_other_costs === null || (is_array($house_work_other_costs) && count($house_work_other_costs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_work_other_costs when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'persons' is set
        if ($persons === null || (is_array($persons) && count($persons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $persons when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'your_reference' is set
        if ($your_reference === null || (is_array($your_reference) && count($your_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $your_reference when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'our_reference' is set
        if ($our_reference === null || (is_array($our_reference) && count($our_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $our_reference when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'buyers_order_reference' is set
        if ($buyers_order_reference === null || (is_array($buyers_order_reference) && count($buyers_order_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyers_order_reference when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'electronic_reference' is set
        if ($electronic_reference === null || (is_array($electronic_reference) && count($electronic_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_reference when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_customer_name' is set
        if ($invoice_customer_name === null || (is_array($invoice_customer_name) && count($invoice_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_customer_name when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_currency_code' is set
        if ($invoice_currency_code === null || (is_array($invoice_currency_code) && count($invoice_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_currency_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_method_name' is set
        if ($delivery_method_name === null || (is_array($delivery_method_name) && count($delivery_method_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_name when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_term_name' is set
        if ($delivery_term_name === null || (is_array($delivery_term_name) && count($delivery_term_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_name when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_method_code' is set
        if ($delivery_method_code === null || (is_array($delivery_method_code) && count($delivery_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_term_code' is set
        if ($delivery_term_code === null || (is_array($delivery_term_code) && count($delivery_term_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_code when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'eu_third_party' is set
        if ($eu_third_party === null || (is_array($eu_third_party) && count($eu_third_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eu_third_party when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'customer_is_private_person' is set
        if ($customer_is_private_person === null || (is_array($customer_is_private_person) && count($customer_is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_is_private_person when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'reverse_charge_on_construction_services' is set
        if ($reverse_charge_on_construction_services === null || (is_array($reverse_charge_on_construction_services) && count($reverse_charge_on_construction_services) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_charge_on_construction_services when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'sales_document_attachments' is set
        if ($sales_document_attachments === null || (is_array($sales_document_attachments) && count($sales_document_attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_attachments when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_date' is set
        if ($invoice_date === null || (is_array($invoice_date) && count($invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_date when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'delivery_date' is set
        if ($delivery_date === null || (is_array($delivery_date) && count($delivery_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_date when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_vat_amount' is set
        if ($total_vat_amount === null || (is_array($total_vat_amount) && count($total_vat_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_vat_amount when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_roundings' is set
        if ($total_roundings === null || (is_array($total_roundings) && count($total_roundings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_roundings when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_amount_base_currency' is set
        if ($total_amount_base_currency === null || (is_array($total_amount_base_currency) && count($total_amount_base_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount_base_currency when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_vat_amount_base_currency' is set
        if ($total_vat_amount_base_currency === null || (is_array($total_vat_amount_base_currency) && count($total_vat_amount_base_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_vat_amount_base_currency when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'includes_vat' is set
        if ($includes_vat === null || (is_array($includes_vat) && count($includes_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includes_vat when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'replace_unit_price_when_zero' is set
        if ($replace_unit_price_when_zero === null || (is_array($replace_unit_price_when_zero) && count($replace_unit_price_when_zero) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replace_unit_price_when_zero when calling customerInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'uses_green_technology' is set
        if ($uses_green_technology === null || (is_array($uses_green_technology) && count($uses_green_technology) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_green_technology when calling customerInvoiceDraftsV2Post'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($house_work_other_costs !== null) {
            $formParams['HouseWorkOtherCosts'] = ObjectSerializer::toFormValue($house_work_other_costs);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($your_reference !== null) {
            $formParams['YourReference'] = ObjectSerializer::toFormValue($your_reference);
        }
        // form params
        if ($our_reference !== null) {
            $formParams['OurReference'] = ObjectSerializer::toFormValue($our_reference);
        }
        // form params
        if ($buyers_order_reference !== null) {
            $formParams['BuyersOrderReference'] = ObjectSerializer::toFormValue($buyers_order_reference);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_currency_code !== null) {
            $formParams['InvoiceCurrencyCode'] = ObjectSerializer::toFormValue($invoice_currency_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($delivery_date !== null) {
            $formParams['DeliveryDate'] = ObjectSerializer::toFormValue($delivery_date);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($total_vat_amount !== null) {
            $formParams['TotalVatAmount'] = ObjectSerializer::toFormValue($total_vat_amount);
        }
        // form params
        if ($total_roundings !== null) {
            $formParams['TotalRoundings'] = ObjectSerializer::toFormValue($total_roundings);
        }
        // form params
        if ($total_amount_base_currency !== null) {
            $formParams['TotalAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_amount_base_currency);
        }
        // form params
        if ($total_vat_amount_base_currency !== null) {
            $formParams['TotalVatAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_base_currency);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($replace_unit_price_when_zero !== null) {
            $formParams['ReplaceUnitPriceWhenZero'] = ObjectSerializer::toFormValue($replace_unit_price_when_zero);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Put
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body body (required)
     * @param  string $customer_invoice_draft_id customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Put($body, $customer_invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2PutWithHttpInfo($body, $customer_invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PutWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PutWithHttpInfo($body, $customer_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($body, $customer_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsync
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsync($body, $customer_invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2PutAsyncWithHttpInfo($body, $customer_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsyncWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsyncWithHttpInfo($body, $customer_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($body, $customer_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Put'
     *
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftApi $body (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PutRequest($body, $customer_invoice_draft_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2Put'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($house_work_other_costs !== null) {
            $formParams['HouseWorkOtherCosts'] = ObjectSerializer::toFormValue($house_work_other_costs);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($your_reference !== null) {
            $formParams['YourReference'] = ObjectSerializer::toFormValue($your_reference);
        }
        // form params
        if ($our_reference !== null) {
            $formParams['OurReference'] = ObjectSerializer::toFormValue($our_reference);
        }
        // form params
        if ($buyers_order_reference !== null) {
            $formParams['BuyersOrderReference'] = ObjectSerializer::toFormValue($buyers_order_reference);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_currency_code !== null) {
            $formParams['InvoiceCurrencyCode'] = ObjectSerializer::toFormValue($invoice_currency_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($delivery_date !== null) {
            $formParams['DeliveryDate'] = ObjectSerializer::toFormValue($delivery_date);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($total_vat_amount !== null) {
            $formParams['TotalVatAmount'] = ObjectSerializer::toFormValue($total_vat_amount);
        }
        // form params
        if ($total_roundings !== null) {
            $formParams['TotalRoundings'] = ObjectSerializer::toFormValue($total_roundings);
        }
        // form params
        if ($total_amount_base_currency !== null) {
            $formParams['TotalAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_amount_base_currency);
        }
        // form params
        if ($total_vat_amount_base_currency !== null) {
            $formParams['TotalVatAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_base_currency);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($replace_unit_price_when_zero !== null) {
            $formParams['ReplaceUnitPriceWhenZero'] = ObjectSerializer::toFormValue($replace_unit_price_when_zero);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Put
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $id id (required)
     * @param  string $customer_id customer_id (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  bool $is_credit_invoice is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type rot_property_type (required)
     * @param  double $house_work_other_costs house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons (required)
     * @param  string $your_reference your_reference (required)
     * @param  string $our_reference our_reference (required)
     * @param  string $buyers_order_reference buyers_order_reference (required)
     * @param  string $electronic_reference electronic_reference (required)
     * @param  string $invoice_customer_name invoice_customer_name (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $invoice_currency_code invoice_currency_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_method_name delivery_method_name (required)
     * @param  string $delivery_term_name delivery_term_name (required)
     * @param  string $delivery_method_code delivery_method_code (required)
     * @param  string $delivery_term_code delivery_term_code (required)
     * @param  bool $eu_third_party eu_third_party (required)
     * @param  bool $customer_is_private_person customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments sales_document_attachments (required)
     * @param  \DateTime $invoice_date invoice_date (required)
     * @param  \DateTime $delivery_date delivery_date (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $total_vat_amount total_vat_amount (required)
     * @param  double $total_roundings total_roundings (required)
     * @param  double $total_amount_base_currency total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency total_vat_amount_base_currency (required)
     * @param  string $customer_number customer_number (required)
     * @param  bool $includes_vat includes_vat (required)
     * @param  bool $replace_unit_price_when_zero replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology uses_green_technology (required)
     * @param  string $customer_invoice_draft_id customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Put($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2PutWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PutWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PutWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsync
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsync($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2PutAsyncWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsyncWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsyncWithHttpInfo($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Put'
     *
     * @param  string $id (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $is_credit_invoice (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  int $rot_property_type (required)
     * @param  double $house_work_other_costs (required)
     * @param  \Swagger\Client\Model\CustomerInvoiceDraftRowApi[] $rows (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  string $your_reference (required)
     * @param  string $our_reference (required)
     * @param  string $buyers_order_reference (required)
     * @param  string $electronic_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_currency_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_term_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  bool $eu_third_party (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $delivery_date (required)
     * @param  double $total_amount (required)
     * @param  double $total_vat_amount (required)
     * @param  double $total_roundings (required)
     * @param  double $total_amount_base_currency (required)
     * @param  double $total_vat_amount_base_currency (required)
     * @param  string $customer_number (required)
     * @param  bool $includes_vat (required)
     * @param  bool $replace_unit_price_when_zero (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $customer_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PutRequest($id, $customer_id, $created_utc, $is_credit_invoice, $rot_reduced_invoicing_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $rot_property_type, $house_work_other_costs, $rows, $persons, $your_reference, $our_reference, $buyers_order_reference, $electronic_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $invoice_currency_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_term_name, $delivery_method_code, $delivery_term_code, $eu_third_party, $customer_is_private_person, $reverse_charge_on_construction_services, $sales_document_attachments, $invoice_date, $delivery_date, $total_amount, $total_vat_amount, $total_roundings, $total_amount_base_currency, $total_vat_amount_base_currency, $customer_number, $includes_vat, $replace_unit_price_when_zero, $uses_green_technology, $customer_invoice_draft_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'is_credit_invoice' is set
        if ($is_credit_invoice === null || (is_array($is_credit_invoice) && count($is_credit_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_credit_invoice when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_type' is set
        if ($rot_reduced_invoicing_type === null || (is_array($rot_reduced_invoicing_type) && count($rot_reduced_invoicing_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_type when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_property_name' is set
        if ($rot_reduced_invoicing_property_name === null || (is_array($rot_reduced_invoicing_property_name) && count($rot_reduced_invoicing_property_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_property_name when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_org_number' is set
        if ($rot_reduced_invoicing_org_number === null || (is_array($rot_reduced_invoicing_org_number) && count($rot_reduced_invoicing_org_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_org_number when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_amount' is set
        if ($rot_reduced_invoicing_amount === null || (is_array($rot_reduced_invoicing_amount) && count($rot_reduced_invoicing_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_amount when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_automatic_distribution' is set
        if ($rot_reduced_invoicing_automatic_distribution === null || (is_array($rot_reduced_invoicing_automatic_distribution) && count($rot_reduced_invoicing_automatic_distribution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_automatic_distribution when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rot_property_type' is set
        if ($rot_property_type === null || (is_array($rot_property_type) && count($rot_property_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_property_type when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'house_work_other_costs' is set
        if ($house_work_other_costs === null || (is_array($house_work_other_costs) && count($house_work_other_costs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_work_other_costs when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'persons' is set
        if ($persons === null || (is_array($persons) && count($persons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $persons when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'your_reference' is set
        if ($your_reference === null || (is_array($your_reference) && count($your_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $your_reference when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'our_reference' is set
        if ($our_reference === null || (is_array($our_reference) && count($our_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $our_reference when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'buyers_order_reference' is set
        if ($buyers_order_reference === null || (is_array($buyers_order_reference) && count($buyers_order_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyers_order_reference when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'electronic_reference' is set
        if ($electronic_reference === null || (is_array($electronic_reference) && count($electronic_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_reference when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_customer_name' is set
        if ($invoice_customer_name === null || (is_array($invoice_customer_name) && count($invoice_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_customer_name when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_currency_code' is set
        if ($invoice_currency_code === null || (is_array($invoice_currency_code) && count($invoice_currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_currency_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_method_name' is set
        if ($delivery_method_name === null || (is_array($delivery_method_name) && count($delivery_method_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_name when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_term_name' is set
        if ($delivery_term_name === null || (is_array($delivery_term_name) && count($delivery_term_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_name when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_method_code' is set
        if ($delivery_method_code === null || (is_array($delivery_method_code) && count($delivery_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_term_code' is set
        if ($delivery_term_code === null || (is_array($delivery_term_code) && count($delivery_term_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_code when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'eu_third_party' is set
        if ($eu_third_party === null || (is_array($eu_third_party) && count($eu_third_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eu_third_party when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_is_private_person' is set
        if ($customer_is_private_person === null || (is_array($customer_is_private_person) && count($customer_is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_is_private_person when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'reverse_charge_on_construction_services' is set
        if ($reverse_charge_on_construction_services === null || (is_array($reverse_charge_on_construction_services) && count($reverse_charge_on_construction_services) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_charge_on_construction_services when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'sales_document_attachments' is set
        if ($sales_document_attachments === null || (is_array($sales_document_attachments) && count($sales_document_attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_attachments when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_date' is set
        if ($invoice_date === null || (is_array($invoice_date) && count($invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_date when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'delivery_date' is set
        if ($delivery_date === null || (is_array($delivery_date) && count($delivery_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_date when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_vat_amount' is set
        if ($total_vat_amount === null || (is_array($total_vat_amount) && count($total_vat_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_vat_amount when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_roundings' is set
        if ($total_roundings === null || (is_array($total_roundings) && count($total_roundings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_roundings when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_amount_base_currency' is set
        if ($total_amount_base_currency === null || (is_array($total_amount_base_currency) && count($total_amount_base_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount_base_currency when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_vat_amount_base_currency' is set
        if ($total_vat_amount_base_currency === null || (is_array($total_vat_amount_base_currency) && count($total_vat_amount_base_currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_vat_amount_base_currency when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'includes_vat' is set
        if ($includes_vat === null || (is_array($includes_vat) && count($includes_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includes_vat when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'replace_unit_price_when_zero' is set
        if ($replace_unit_price_when_zero === null || (is_array($replace_unit_price_when_zero) && count($replace_unit_price_when_zero) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replace_unit_price_when_zero when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'uses_green_technology' is set
        if ($uses_green_technology === null || (is_array($uses_green_technology) && count($uses_green_technology) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_green_technology when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2Put'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($house_work_other_costs !== null) {
            $formParams['HouseWorkOtherCosts'] = ObjectSerializer::toFormValue($house_work_other_costs);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($your_reference !== null) {
            $formParams['YourReference'] = ObjectSerializer::toFormValue($your_reference);
        }
        // form params
        if ($our_reference !== null) {
            $formParams['OurReference'] = ObjectSerializer::toFormValue($our_reference);
        }
        // form params
        if ($buyers_order_reference !== null) {
            $formParams['BuyersOrderReference'] = ObjectSerializer::toFormValue($buyers_order_reference);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_currency_code !== null) {
            $formParams['InvoiceCurrencyCode'] = ObjectSerializer::toFormValue($invoice_currency_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($delivery_date !== null) {
            $formParams['DeliveryDate'] = ObjectSerializer::toFormValue($delivery_date);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($total_vat_amount !== null) {
            $formParams['TotalVatAmount'] = ObjectSerializer::toFormValue($total_vat_amount);
        }
        // form params
        if ($total_roundings !== null) {
            $formParams['TotalRoundings'] = ObjectSerializer::toFormValue($total_roundings);
        }
        // form params
        if ($total_amount_base_currency !== null) {
            $formParams['TotalAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_amount_base_currency);
        }
        // form params
        if ($total_vat_amount_base_currency !== null) {
            $formParams['TotalVatAmountBaseCurrency'] = ObjectSerializer::toFormValue($total_vat_amount_base_currency);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($replace_unit_price_when_zero !== null) {
            $formParams['ReplaceUnitPriceWhenZero'] = ObjectSerializer::toFormValue($replace_unit_price_when_zero);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
