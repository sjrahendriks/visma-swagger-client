<?php
/**
 * CustomersV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CustomersV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomersV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customersV2Delete
     *
     * Delete a customer.
     *
     * @param  string $customer_id customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customersV2Delete($customer_id)
    {
        list($response) = $this->customersV2DeleteWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customersV2DeleteWithHttpInfo
     *
     * Delete a customer.
     *
     * @param  string $customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2DeleteWithHttpInfo($customer_id)
    {
        $returnType = 'object';
        $request = $this->customersV2DeleteRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2DeleteAsync
     *
     * Delete a customer.
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2DeleteAsync($customer_id)
    {
        return $this->customersV2DeleteAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2DeleteAsyncWithHttpInfo
     *
     * Delete a customer.
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2DeleteAsyncWithHttpInfo($customer_id)
    {
        $returnType = 'object';
        $request = $this->customersV2DeleteRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Delete'
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2DeleteRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersV2Delete'
            );
        }

        $resourcePath = '/v2/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Get
     *
     * Get all customers.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseCustomerApi
     */
    public function customersV2Get()
    {
        list($response) = $this->customersV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation customersV2GetWithHttpInfo
     *
     * Get all customers.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseCustomerApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseCustomerApi';
        $request = $this->customersV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseCustomerApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2GetAsync
     *
     * Get all customers.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2GetAsync()
    {
        return $this->customersV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2GetAsyncWithHttpInfo
     *
     * Get all customers.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseCustomerApi';
        $request = $this->customersV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2GetRequest()
    {

        $resourcePath = '/v2/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2GetAutoInvoiceRecipients
     *
     * Check this list if the provided customer can receive e-invoices. An empty list is retrieved if the customer   is a private person or is not found in the network.
     *
     * @param  string $customer_id Id of the customer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseAutoInvoiceAddressApi
     */
    public function customersV2GetAutoInvoiceRecipients($customer_id)
    {
        list($response) = $this->customersV2GetAutoInvoiceRecipientsWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customersV2GetAutoInvoiceRecipientsWithHttpInfo
     *
     * Check this list if the provided customer can receive e-invoices. An empty list is retrieved if the customer   is a private person or is not found in the network.
     *
     * @param  string $customer_id Id of the customer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseAutoInvoiceAddressApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2GetAutoInvoiceRecipientsWithHttpInfo($customer_id)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseAutoInvoiceAddressApi';
        $request = $this->customersV2GetAutoInvoiceRecipientsRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseAutoInvoiceAddressApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2GetAutoInvoiceRecipientsAsync
     *
     * Check this list if the provided customer can receive e-invoices. An empty list is retrieved if the customer   is a private person or is not found in the network.
     *
     * @param  string $customer_id Id of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2GetAutoInvoiceRecipientsAsync($customer_id)
    {
        return $this->customersV2GetAutoInvoiceRecipientsAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2GetAutoInvoiceRecipientsAsyncWithHttpInfo
     *
     * Check this list if the provided customer can receive e-invoices. An empty list is retrieved if the customer   is a private person or is not found in the network.
     *
     * @param  string $customer_id Id of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2GetAutoInvoiceRecipientsAsyncWithHttpInfo($customer_id)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseAutoInvoiceAddressApi';
        $request = $this->customersV2GetAutoInvoiceRecipientsRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2GetAutoInvoiceRecipients'
     *
     * @param  string $customer_id Id of the customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2GetAutoInvoiceRecipientsRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersV2GetAutoInvoiceRecipients'
            );
        }

        $resourcePath = '/v2/customers/{customerId}/autoinvoicerecipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Get_0
     *
     * Get a specific customer.
     *
     * @param  string $customer_id Id of the requested customer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customersV2Get_0($customer_id)
    {
        list($response) = $this->customersV2Get_0WithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customersV2Get_0WithHttpInfo
     *
     * Get a specific customer.
     *
     * @param  string $customer_id Id of the requested customer. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2Get_0WithHttpInfo($customer_id)
    {
        $returnType = 'object';
        $request = $this->customersV2Get_0Request($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2Get_0Async
     *
     * Get a specific customer.
     *
     * @param  string $customer_id Id of the requested customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2Get_0Async($customer_id)
    {
        return $this->customersV2Get_0AsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2Get_0AsyncWithHttpInfo
     *
     * Get a specific customer.
     *
     * @param  string $customer_id Id of the requested customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2Get_0AsyncWithHttpInfo($customer_id)
    {
        $returnType = 'object';
        $request = $this->customersV2Get_0Request($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Get_0'
     *
     * @param  string $customer_id Id of the requested customer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2Get_0Request($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersV2Get_0'
            );
        }

        $resourcePath = '/v2/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Post
     *
     * Creates a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerApi
     */
    public function customersV2Post($body)
    {
        list($response) = $this->customersV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation customersV2PostWithHttpInfo
     *
     * Creates a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2PostAsync
     *
     * Creates a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PostAsync($body)
    {
        return $this->customersV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2PostAsyncWithHttpInfo
     *
     * Creates a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Post'
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customersV2Post'
            );
        }

        $resourcePath = '/v2/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($gln !== null) {
            $formParams['GLN'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_method_id !== null) {
            $formParams['DeliveryMethodId'] = ObjectSerializer::toFormValue($delivery_method_id);
        }
        // form params
        if ($delivery_term_id !== null) {
            $formParams['DeliveryTermId'] = ObjectSerializer::toFormValue($delivery_term_id);
        }
        // form params
        if ($pay_to_account_id !== null) {
            $formParams['PayToAccountId'] = ObjectSerializer::toFormValue($pay_to_account_id);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($webshop_customer_number !== null) {
            $formParams['WebshopCustomerNumber'] = ObjectSerializer::toFormValue($webshop_customer_number);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($last_invoice_date !== null) {
            $formParams['LastInvoiceDate'] = ObjectSerializer::toFormValue($last_invoice_date);
        }
        // form params
        if ($is_private_person !== null) {
            $formParams['IsPrivatePerson'] = ObjectSerializer::toFormValue($is_private_person);
        }
        // form params
        if ($is_northern_ireland !== null) {
            $formParams['IsNorthernIreland'] = ObjectSerializer::toFormValue($is_northern_ireland);
        }
        // form params
        if ($discount_percentage !== null) {
            $formParams['DiscountPercentage'] = ObjectSerializer::toFormValue($discount_percentage);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($force_bookkeep_vat !== null) {
            $formParams['ForceBookkeepVat'] = ObjectSerializer::toFormValue($force_bookkeep_vat);
        }
        // form params
        if ($edi_gln_number !== null) {
            $formParams['EdiGlnNumber'] = ObjectSerializer::toFormValue($edi_gln_number);
        }
        // form params
        if ($sales_document_language !== null) {
            $formParams['SalesDocumentLanguage'] = ObjectSerializer::toFormValue($sales_document_language);
        }
        // form params
        if ($electronic_address !== null) {
            $formParams['ElectronicAddress'] = ObjectSerializer::toFormValue($electronic_address);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($edi_service_deliverer_id !== null) {
            $formParams['EdiServiceDelivererId'] = ObjectSerializer::toFormValue($edi_service_deliverer_id);
        }
        // form params
        if ($auto_invoice_activation_email_sent_date !== null) {
            $formParams['AutoInvoiceActivationEmailSentDate'] = ObjectSerializer::toFormValue($auto_invoice_activation_email_sent_date);
        }
        // form params
        if ($auto_invoice_registration_request_sent_date !== null) {
            $formParams['AutoInvoiceRegistrationRequestSentDate'] = ObjectSerializer::toFormValue($auto_invoice_registration_request_sent_date);
        }
        // form params
        if ($email_addresses !== null) {
            $formParams['EmailAddresses'] = ObjectSerializer::toFormValue($email_addresses);
        }
        // form params
        if ($customer_labels !== null) {
            $formParams['CustomerLabels'] = ObjectSerializer::toFormValue($customer_labels);
        }
        // form params
        if ($is_future_invoice_date_allowed !== null) {
            $formParams['IsFutureInvoiceDateAllowed'] = ObjectSerializer::toFormValue($is_future_invoice_date_allowed);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Post
     *
     * Creates a customer.
     *
     * @param  string $id id (required)
     * @param  string $customer_number customer_number (required)
     * @param  string $corporate_identity_number corporate_identity_number (required)
     * @param  string $contact_person_email contact_person_email (required)
     * @param  string $contact_person_mobile contact_person_mobile (required)
     * @param  string $contact_person_name contact_person_name (required)
     * @param  string $contact_person_phone contact_person_phone (required)
     * @param  string $currency_code currency_code (required)
     * @param  string $gln gln (required)
     * @param  string $email_address email_address (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_method_id delivery_method_id (required)
     * @param  string $delivery_term_id delivery_term_id (required)
     * @param  string $pay_to_account_id pay_to_account_id (required)
     * @param  string $name name (required)
     * @param  string $note note (required)
     * @param  bool $reverse_charge_on_construction_services reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number webshop_customer_number (required)
     * @param  string $mobile_phone mobile_phone (required)
     * @param  string $telephone telephone (required)
     * @param  string $terms_of_payment_id terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment terms_of_payment (required)
     * @param  string $vat_number vat_number (required)
     * @param  string $www_address www_address (required)
     * @param  \DateTime $last_invoice_date last_invoice_date (required)
     * @param  bool $is_private_person is_private_person (required)
     * @param  bool $is_northern_ireland is_northern_ireland (required)
     * @param  double $discount_percentage discount_percentage (required)
     * @param  \DateTime $changed_utc changed_utc (required)
     * @param  bool $is_active is_active (required)
     * @param  bool $force_bookkeep_vat force_bookkeep_vat (required)
     * @param  string $edi_gln_number edi_gln_number (required)
     * @param  string $sales_document_language sales_document_language (required)
     * @param  string $electronic_address electronic_address (required)
     * @param  string $electronic_reference electronic_reference (required)
     * @param  string $edi_service_deliverer_id edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed is_future_invoice_date_allowed (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerApi
     */
    public function customersV2Post($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
    {
        list($response) = $this->customersV2PostWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed);
        return $response;
    }

    /**
     * Operation customersV2PostWithHttpInfo
     *
     * Creates a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2PostWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PostRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2PostAsync
     *
     * Creates a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PostAsync($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
    {
        return $this->customersV2PostAsyncWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2PostAsyncWithHttpInfo
     *
     * Creates a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PostAsyncWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PostRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Post'
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2PostRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customersV2Post'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customersV2Post'
            );
        }
        // verify the required parameter 'corporate_identity_number' is set
        if ($corporate_identity_number === null || (is_array($corporate_identity_number) && count($corporate_identity_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_identity_number when calling customersV2Post'
            );
        }
        // verify the required parameter 'contact_person_email' is set
        if ($contact_person_email === null || (is_array($contact_person_email) && count($contact_person_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_email when calling customersV2Post'
            );
        }
        // verify the required parameter 'contact_person_mobile' is set
        if ($contact_person_mobile === null || (is_array($contact_person_mobile) && count($contact_person_mobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_mobile when calling customersV2Post'
            );
        }
        // verify the required parameter 'contact_person_name' is set
        if ($contact_person_name === null || (is_array($contact_person_name) && count($contact_person_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_name when calling customersV2Post'
            );
        }
        // verify the required parameter 'contact_person_phone' is set
        if ($contact_person_phone === null || (is_array($contact_person_phone) && count($contact_person_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_phone when calling customersV2Post'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling customersV2Post'
            );
        }
        // verify the required parameter 'gln' is set
        if ($gln === null || (is_array($gln) && count($gln) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gln when calling customersV2Post'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling customersV2Post'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling customersV2Post'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling customersV2Post'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling customersV2Post'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling customersV2Post'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_method_id' is set
        if ($delivery_method_id === null || (is_array($delivery_method_id) && count($delivery_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_id when calling customersV2Post'
            );
        }
        // verify the required parameter 'delivery_term_id' is set
        if ($delivery_term_id === null || (is_array($delivery_term_id) && count($delivery_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_id when calling customersV2Post'
            );
        }
        // verify the required parameter 'pay_to_account_id' is set
        if ($pay_to_account_id === null || (is_array($pay_to_account_id) && count($pay_to_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_to_account_id when calling customersV2Post'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling customersV2Post'
            );
        }
        // verify the required parameter 'note' is set
        if ($note === null || (is_array($note) && count($note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note when calling customersV2Post'
            );
        }
        // verify the required parameter 'reverse_charge_on_construction_services' is set
        if ($reverse_charge_on_construction_services === null || (is_array($reverse_charge_on_construction_services) && count($reverse_charge_on_construction_services) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_charge_on_construction_services when calling customersV2Post'
            );
        }
        // verify the required parameter 'webshop_customer_number' is set
        if ($webshop_customer_number === null || (is_array($webshop_customer_number) && count($webshop_customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webshop_customer_number when calling customersV2Post'
            );
        }
        // verify the required parameter 'mobile_phone' is set
        if ($mobile_phone === null || (is_array($mobile_phone) && count($mobile_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mobile_phone when calling customersV2Post'
            );
        }
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling customersV2Post'
            );
        }
        // verify the required parameter 'terms_of_payment_id' is set
        if ($terms_of_payment_id === null || (is_array($terms_of_payment_id) && count($terms_of_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment_id when calling customersV2Post'
            );
        }
        // verify the required parameter 'terms_of_payment' is set
        if ($terms_of_payment === null || (is_array($terms_of_payment) && count($terms_of_payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment when calling customersV2Post'
            );
        }
        // verify the required parameter 'vat_number' is set
        if ($vat_number === null || (is_array($vat_number) && count($vat_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_number when calling customersV2Post'
            );
        }
        // verify the required parameter 'www_address' is set
        if ($www_address === null || (is_array($www_address) && count($www_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $www_address when calling customersV2Post'
            );
        }
        // verify the required parameter 'last_invoice_date' is set
        if ($last_invoice_date === null || (is_array($last_invoice_date) && count($last_invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_invoice_date when calling customersV2Post'
            );
        }
        // verify the required parameter 'is_private_person' is set
        if ($is_private_person === null || (is_array($is_private_person) && count($is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_private_person when calling customersV2Post'
            );
        }
        // verify the required parameter 'is_northern_ireland' is set
        if ($is_northern_ireland === null || (is_array($is_northern_ireland) && count($is_northern_ireland) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_northern_ireland when calling customersV2Post'
            );
        }
        // verify the required parameter 'discount_percentage' is set
        if ($discount_percentage === null || (is_array($discount_percentage) && count($discount_percentage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_percentage when calling customersV2Post'
            );
        }
        // verify the required parameter 'changed_utc' is set
        if ($changed_utc === null || (is_array($changed_utc) && count($changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changed_utc when calling customersV2Post'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling customersV2Post'
            );
        }
        // verify the required parameter 'force_bookkeep_vat' is set
        if ($force_bookkeep_vat === null || (is_array($force_bookkeep_vat) && count($force_bookkeep_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $force_bookkeep_vat when calling customersV2Post'
            );
        }
        // verify the required parameter 'edi_gln_number' is set
        if ($edi_gln_number === null || (is_array($edi_gln_number) && count($edi_gln_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_gln_number when calling customersV2Post'
            );
        }
        // verify the required parameter 'sales_document_language' is set
        if ($sales_document_language === null || (is_array($sales_document_language) && count($sales_document_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_language when calling customersV2Post'
            );
        }
        // verify the required parameter 'electronic_address' is set
        if ($electronic_address === null || (is_array($electronic_address) && count($electronic_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_address when calling customersV2Post'
            );
        }
        // verify the required parameter 'electronic_reference' is set
        if ($electronic_reference === null || (is_array($electronic_reference) && count($electronic_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_reference when calling customersV2Post'
            );
        }
        // verify the required parameter 'edi_service_deliverer_id' is set
        if ($edi_service_deliverer_id === null || (is_array($edi_service_deliverer_id) && count($edi_service_deliverer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_service_deliverer_id when calling customersV2Post'
            );
        }
        // verify the required parameter 'auto_invoice_activation_email_sent_date' is set
        if ($auto_invoice_activation_email_sent_date === null || (is_array($auto_invoice_activation_email_sent_date) && count($auto_invoice_activation_email_sent_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_invoice_activation_email_sent_date when calling customersV2Post'
            );
        }
        // verify the required parameter 'auto_invoice_registration_request_sent_date' is set
        if ($auto_invoice_registration_request_sent_date === null || (is_array($auto_invoice_registration_request_sent_date) && count($auto_invoice_registration_request_sent_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_invoice_registration_request_sent_date when calling customersV2Post'
            );
        }
        // verify the required parameter 'email_addresses' is set
        if ($email_addresses === null || (is_array($email_addresses) && count($email_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_addresses when calling customersV2Post'
            );
        }
        // verify the required parameter 'customer_labels' is set
        if ($customer_labels === null || (is_array($customer_labels) && count($customer_labels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_labels when calling customersV2Post'
            );
        }
        // verify the required parameter 'is_future_invoice_date_allowed' is set
        if ($is_future_invoice_date_allowed === null || (is_array($is_future_invoice_date_allowed) && count($is_future_invoice_date_allowed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_future_invoice_date_allowed when calling customersV2Post'
            );
        }

        $resourcePath = '/v2/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($gln !== null) {
            $formParams['GLN'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_method_id !== null) {
            $formParams['DeliveryMethodId'] = ObjectSerializer::toFormValue($delivery_method_id);
        }
        // form params
        if ($delivery_term_id !== null) {
            $formParams['DeliveryTermId'] = ObjectSerializer::toFormValue($delivery_term_id);
        }
        // form params
        if ($pay_to_account_id !== null) {
            $formParams['PayToAccountId'] = ObjectSerializer::toFormValue($pay_to_account_id);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($webshop_customer_number !== null) {
            $formParams['WebshopCustomerNumber'] = ObjectSerializer::toFormValue($webshop_customer_number);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($last_invoice_date !== null) {
            $formParams['LastInvoiceDate'] = ObjectSerializer::toFormValue($last_invoice_date);
        }
        // form params
        if ($is_private_person !== null) {
            $formParams['IsPrivatePerson'] = ObjectSerializer::toFormValue($is_private_person);
        }
        // form params
        if ($is_northern_ireland !== null) {
            $formParams['IsNorthernIreland'] = ObjectSerializer::toFormValue($is_northern_ireland);
        }
        // form params
        if ($discount_percentage !== null) {
            $formParams['DiscountPercentage'] = ObjectSerializer::toFormValue($discount_percentage);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($force_bookkeep_vat !== null) {
            $formParams['ForceBookkeepVat'] = ObjectSerializer::toFormValue($force_bookkeep_vat);
        }
        // form params
        if ($edi_gln_number !== null) {
            $formParams['EdiGlnNumber'] = ObjectSerializer::toFormValue($edi_gln_number);
        }
        // form params
        if ($sales_document_language !== null) {
            $formParams['SalesDocumentLanguage'] = ObjectSerializer::toFormValue($sales_document_language);
        }
        // form params
        if ($electronic_address !== null) {
            $formParams['ElectronicAddress'] = ObjectSerializer::toFormValue($electronic_address);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($edi_service_deliverer_id !== null) {
            $formParams['EdiServiceDelivererId'] = ObjectSerializer::toFormValue($edi_service_deliverer_id);
        }
        // form params
        if ($auto_invoice_activation_email_sent_date !== null) {
            $formParams['AutoInvoiceActivationEmailSentDate'] = ObjectSerializer::toFormValue($auto_invoice_activation_email_sent_date);
        }
        // form params
        if ($auto_invoice_registration_request_sent_date !== null) {
            $formParams['AutoInvoiceRegistrationRequestSentDate'] = ObjectSerializer::toFormValue($auto_invoice_registration_request_sent_date);
        }
        // form params
        if ($email_addresses !== null) {
            $formParams['EmailAddresses'] = ObjectSerializer::toFormValue($email_addresses);
        }
        // form params
        if ($customer_labels !== null) {
            $formParams['CustomerLabels'] = ObjectSerializer::toFormValue($customer_labels);
        }
        // form params
        if ($is_future_invoice_date_allowed !== null) {
            $formParams['IsFutureInvoiceDateAllowed'] = ObjectSerializer::toFormValue($is_future_invoice_date_allowed);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Put
     *
     * Replace the data in a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body body (required)
     * @param  string $customer_id customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerApi
     */
    public function customersV2Put($body, $customer_id)
    {
        list($response) = $this->customersV2PutWithHttpInfo($body, $customer_id);
        return $response;
    }

    /**
     * Operation customersV2PutWithHttpInfo
     *
     * Replace the data in a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     * @param  string $customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2PutWithHttpInfo($body, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PutRequest($body, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2PutAsync
     *
     * Replace the data in a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PutAsync($body, $customer_id)
    {
        return $this->customersV2PutAsyncWithHttpInfo($body, $customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2PutAsyncWithHttpInfo
     *
     * Replace the data in a customer.
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PutAsyncWithHttpInfo($body, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PutRequest($body, $customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Put'
     *
     * @param  \Swagger\Client\Model\CustomerApi $body (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2PutRequest($body, $customer_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customersV2Put'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersV2Put'
            );
        }

        $resourcePath = '/v2/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($gln !== null) {
            $formParams['GLN'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_method_id !== null) {
            $formParams['DeliveryMethodId'] = ObjectSerializer::toFormValue($delivery_method_id);
        }
        // form params
        if ($delivery_term_id !== null) {
            $formParams['DeliveryTermId'] = ObjectSerializer::toFormValue($delivery_term_id);
        }
        // form params
        if ($pay_to_account_id !== null) {
            $formParams['PayToAccountId'] = ObjectSerializer::toFormValue($pay_to_account_id);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($webshop_customer_number !== null) {
            $formParams['WebshopCustomerNumber'] = ObjectSerializer::toFormValue($webshop_customer_number);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($last_invoice_date !== null) {
            $formParams['LastInvoiceDate'] = ObjectSerializer::toFormValue($last_invoice_date);
        }
        // form params
        if ($is_private_person !== null) {
            $formParams['IsPrivatePerson'] = ObjectSerializer::toFormValue($is_private_person);
        }
        // form params
        if ($is_northern_ireland !== null) {
            $formParams['IsNorthernIreland'] = ObjectSerializer::toFormValue($is_northern_ireland);
        }
        // form params
        if ($discount_percentage !== null) {
            $formParams['DiscountPercentage'] = ObjectSerializer::toFormValue($discount_percentage);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($force_bookkeep_vat !== null) {
            $formParams['ForceBookkeepVat'] = ObjectSerializer::toFormValue($force_bookkeep_vat);
        }
        // form params
        if ($edi_gln_number !== null) {
            $formParams['EdiGlnNumber'] = ObjectSerializer::toFormValue($edi_gln_number);
        }
        // form params
        if ($sales_document_language !== null) {
            $formParams['SalesDocumentLanguage'] = ObjectSerializer::toFormValue($sales_document_language);
        }
        // form params
        if ($electronic_address !== null) {
            $formParams['ElectronicAddress'] = ObjectSerializer::toFormValue($electronic_address);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($edi_service_deliverer_id !== null) {
            $formParams['EdiServiceDelivererId'] = ObjectSerializer::toFormValue($edi_service_deliverer_id);
        }
        // form params
        if ($auto_invoice_activation_email_sent_date !== null) {
            $formParams['AutoInvoiceActivationEmailSentDate'] = ObjectSerializer::toFormValue($auto_invoice_activation_email_sent_date);
        }
        // form params
        if ($auto_invoice_registration_request_sent_date !== null) {
            $formParams['AutoInvoiceRegistrationRequestSentDate'] = ObjectSerializer::toFormValue($auto_invoice_registration_request_sent_date);
        }
        // form params
        if ($email_addresses !== null) {
            $formParams['EmailAddresses'] = ObjectSerializer::toFormValue($email_addresses);
        }
        // form params
        if ($customer_labels !== null) {
            $formParams['CustomerLabels'] = ObjectSerializer::toFormValue($customer_labels);
        }
        // form params
        if ($is_future_invoice_date_allowed !== null) {
            $formParams['IsFutureInvoiceDateAllowed'] = ObjectSerializer::toFormValue($is_future_invoice_date_allowed);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersV2Put
     *
     * Replace the data in a customer.
     *
     * @param  string $id id (required)
     * @param  string $customer_number customer_number (required)
     * @param  string $corporate_identity_number corporate_identity_number (required)
     * @param  string $contact_person_email contact_person_email (required)
     * @param  string $contact_person_mobile contact_person_mobile (required)
     * @param  string $contact_person_name contact_person_name (required)
     * @param  string $contact_person_phone contact_person_phone (required)
     * @param  string $currency_code currency_code (required)
     * @param  string $gln gln (required)
     * @param  string $email_address email_address (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_method_id delivery_method_id (required)
     * @param  string $delivery_term_id delivery_term_id (required)
     * @param  string $pay_to_account_id pay_to_account_id (required)
     * @param  string $name name (required)
     * @param  string $note note (required)
     * @param  bool $reverse_charge_on_construction_services reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number webshop_customer_number (required)
     * @param  string $mobile_phone mobile_phone (required)
     * @param  string $telephone telephone (required)
     * @param  string $terms_of_payment_id terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment terms_of_payment (required)
     * @param  string $vat_number vat_number (required)
     * @param  string $www_address www_address (required)
     * @param  \DateTime $last_invoice_date last_invoice_date (required)
     * @param  bool $is_private_person is_private_person (required)
     * @param  bool $is_northern_ireland is_northern_ireland (required)
     * @param  double $discount_percentage discount_percentage (required)
     * @param  \DateTime $changed_utc changed_utc (required)
     * @param  bool $is_active is_active (required)
     * @param  bool $force_bookkeep_vat force_bookkeep_vat (required)
     * @param  string $edi_gln_number edi_gln_number (required)
     * @param  string $sales_document_language sales_document_language (required)
     * @param  string $electronic_address electronic_address (required)
     * @param  string $electronic_reference electronic_reference (required)
     * @param  string $edi_service_deliverer_id edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed is_future_invoice_date_allowed (required)
     * @param  string $customer_id customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerApi
     */
    public function customersV2Put($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
    {
        list($response) = $this->customersV2PutWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id);
        return $response;
    }

    /**
     * Operation customersV2PutWithHttpInfo
     *
     * Replace the data in a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     * @param  string $customer_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersV2PutWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PutRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersV2PutAsync
     *
     * Replace the data in a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PutAsync($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
    {
        return $this->customersV2PutAsyncWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersV2PutAsyncWithHttpInfo
     *
     * Replace the data in a customer.
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersV2PutAsyncWithHttpInfo($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerApi';
        $request = $this->customersV2PutRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersV2Put'
     *
     * @param  string $id (required)
     * @param  string $customer_number (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $currency_code (required)
     * @param  string $gln (required)
     * @param  string $email_address (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_method_id (required)
     * @param  string $delivery_term_id (required)
     * @param  string $pay_to_account_id (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  bool $reverse_charge_on_construction_services (required)
     * @param  int $webshop_customer_number (required)
     * @param  string $mobile_phone (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  \DateTime $last_invoice_date (required)
     * @param  bool $is_private_person (required)
     * @param  bool $is_northern_ireland (required)
     * @param  double $discount_percentage (required)
     * @param  \DateTime $changed_utc (required)
     * @param  bool $is_active (required)
     * @param  bool $force_bookkeep_vat (required)
     * @param  string $edi_gln_number (required)
     * @param  string $sales_document_language (required)
     * @param  string $electronic_address (required)
     * @param  string $electronic_reference (required)
     * @param  string $edi_service_deliverer_id (required)
     * @param  \DateTime $auto_invoice_activation_email_sent_date (required)
     * @param  \DateTime $auto_invoice_registration_request_sent_date (required)
     * @param  string[] $email_addresses (required)
     * @param  \Swagger\Client\Model\CustomerLabelApi[] $customer_labels (required)
     * @param  bool $is_future_invoice_date_allowed (required)
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customersV2PutRequest($id, $customer_number, $corporate_identity_number, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $currency_code, $gln, $email_address, $invoice_address1, $invoice_address2, $invoice_city, $invoice_country_code, $invoice_postal_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_city, $delivery_country_code, $delivery_postal_code, $delivery_method_id, $delivery_term_id, $pay_to_account_id, $name, $note, $reverse_charge_on_construction_services, $webshop_customer_number, $mobile_phone, $telephone, $terms_of_payment_id, $terms_of_payment, $vat_number, $www_address, $last_invoice_date, $is_private_person, $is_northern_ireland, $discount_percentage, $changed_utc, $is_active, $force_bookkeep_vat, $edi_gln_number, $sales_document_language, $electronic_address, $electronic_reference, $edi_service_deliverer_id, $auto_invoice_activation_email_sent_date, $auto_invoice_registration_request_sent_date, $email_addresses, $customer_labels, $is_future_invoice_date_allowed, $customer_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customersV2Put'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling customersV2Put'
            );
        }
        // verify the required parameter 'corporate_identity_number' is set
        if ($corporate_identity_number === null || (is_array($corporate_identity_number) && count($corporate_identity_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_identity_number when calling customersV2Put'
            );
        }
        // verify the required parameter 'contact_person_email' is set
        if ($contact_person_email === null || (is_array($contact_person_email) && count($contact_person_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_email when calling customersV2Put'
            );
        }
        // verify the required parameter 'contact_person_mobile' is set
        if ($contact_person_mobile === null || (is_array($contact_person_mobile) && count($contact_person_mobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_mobile when calling customersV2Put'
            );
        }
        // verify the required parameter 'contact_person_name' is set
        if ($contact_person_name === null || (is_array($contact_person_name) && count($contact_person_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_name when calling customersV2Put'
            );
        }
        // verify the required parameter 'contact_person_phone' is set
        if ($contact_person_phone === null || (is_array($contact_person_phone) && count($contact_person_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_phone when calling customersV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling customersV2Put'
            );
        }
        // verify the required parameter 'gln' is set
        if ($gln === null || (is_array($gln) && count($gln) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gln when calling customersV2Put'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling customersV2Put'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling customersV2Put'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling customersV2Put'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling customersV2Put'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling customersV2Put'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_method_id' is set
        if ($delivery_method_id === null || (is_array($delivery_method_id) && count($delivery_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_id when calling customersV2Put'
            );
        }
        // verify the required parameter 'delivery_term_id' is set
        if ($delivery_term_id === null || (is_array($delivery_term_id) && count($delivery_term_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_id when calling customersV2Put'
            );
        }
        // verify the required parameter 'pay_to_account_id' is set
        if ($pay_to_account_id === null || (is_array($pay_to_account_id) && count($pay_to_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_to_account_id when calling customersV2Put'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling customersV2Put'
            );
        }
        // verify the required parameter 'note' is set
        if ($note === null || (is_array($note) && count($note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note when calling customersV2Put'
            );
        }
        // verify the required parameter 'reverse_charge_on_construction_services' is set
        if ($reverse_charge_on_construction_services === null || (is_array($reverse_charge_on_construction_services) && count($reverse_charge_on_construction_services) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reverse_charge_on_construction_services when calling customersV2Put'
            );
        }
        // verify the required parameter 'webshop_customer_number' is set
        if ($webshop_customer_number === null || (is_array($webshop_customer_number) && count($webshop_customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webshop_customer_number when calling customersV2Put'
            );
        }
        // verify the required parameter 'mobile_phone' is set
        if ($mobile_phone === null || (is_array($mobile_phone) && count($mobile_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mobile_phone when calling customersV2Put'
            );
        }
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling customersV2Put'
            );
        }
        // verify the required parameter 'terms_of_payment_id' is set
        if ($terms_of_payment_id === null || (is_array($terms_of_payment_id) && count($terms_of_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment_id when calling customersV2Put'
            );
        }
        // verify the required parameter 'terms_of_payment' is set
        if ($terms_of_payment === null || (is_array($terms_of_payment) && count($terms_of_payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment when calling customersV2Put'
            );
        }
        // verify the required parameter 'vat_number' is set
        if ($vat_number === null || (is_array($vat_number) && count($vat_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_number when calling customersV2Put'
            );
        }
        // verify the required parameter 'www_address' is set
        if ($www_address === null || (is_array($www_address) && count($www_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $www_address when calling customersV2Put'
            );
        }
        // verify the required parameter 'last_invoice_date' is set
        if ($last_invoice_date === null || (is_array($last_invoice_date) && count($last_invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_invoice_date when calling customersV2Put'
            );
        }
        // verify the required parameter 'is_private_person' is set
        if ($is_private_person === null || (is_array($is_private_person) && count($is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_private_person when calling customersV2Put'
            );
        }
        // verify the required parameter 'is_northern_ireland' is set
        if ($is_northern_ireland === null || (is_array($is_northern_ireland) && count($is_northern_ireland) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_northern_ireland when calling customersV2Put'
            );
        }
        // verify the required parameter 'discount_percentage' is set
        if ($discount_percentage === null || (is_array($discount_percentage) && count($discount_percentage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discount_percentage when calling customersV2Put'
            );
        }
        // verify the required parameter 'changed_utc' is set
        if ($changed_utc === null || (is_array($changed_utc) && count($changed_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $changed_utc when calling customersV2Put'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling customersV2Put'
            );
        }
        // verify the required parameter 'force_bookkeep_vat' is set
        if ($force_bookkeep_vat === null || (is_array($force_bookkeep_vat) && count($force_bookkeep_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $force_bookkeep_vat when calling customersV2Put'
            );
        }
        // verify the required parameter 'edi_gln_number' is set
        if ($edi_gln_number === null || (is_array($edi_gln_number) && count($edi_gln_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_gln_number when calling customersV2Put'
            );
        }
        // verify the required parameter 'sales_document_language' is set
        if ($sales_document_language === null || (is_array($sales_document_language) && count($sales_document_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_language when calling customersV2Put'
            );
        }
        // verify the required parameter 'electronic_address' is set
        if ($electronic_address === null || (is_array($electronic_address) && count($electronic_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_address when calling customersV2Put'
            );
        }
        // verify the required parameter 'electronic_reference' is set
        if ($electronic_reference === null || (is_array($electronic_reference) && count($electronic_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $electronic_reference when calling customersV2Put'
            );
        }
        // verify the required parameter 'edi_service_deliverer_id' is set
        if ($edi_service_deliverer_id === null || (is_array($edi_service_deliverer_id) && count($edi_service_deliverer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $edi_service_deliverer_id when calling customersV2Put'
            );
        }
        // verify the required parameter 'auto_invoice_activation_email_sent_date' is set
        if ($auto_invoice_activation_email_sent_date === null || (is_array($auto_invoice_activation_email_sent_date) && count($auto_invoice_activation_email_sent_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_invoice_activation_email_sent_date when calling customersV2Put'
            );
        }
        // verify the required parameter 'auto_invoice_registration_request_sent_date' is set
        if ($auto_invoice_registration_request_sent_date === null || (is_array($auto_invoice_registration_request_sent_date) && count($auto_invoice_registration_request_sent_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_invoice_registration_request_sent_date when calling customersV2Put'
            );
        }
        // verify the required parameter 'email_addresses' is set
        if ($email_addresses === null || (is_array($email_addresses) && count($email_addresses) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_addresses when calling customersV2Put'
            );
        }
        // verify the required parameter 'customer_labels' is set
        if ($customer_labels === null || (is_array($customer_labels) && count($customer_labels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_labels when calling customersV2Put'
            );
        }
        // verify the required parameter 'is_future_invoice_date_allowed' is set
        if ($is_future_invoice_date_allowed === null || (is_array($is_future_invoice_date_allowed) && count($is_future_invoice_date_allowed) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_future_invoice_date_allowed when calling customersV2Put'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling customersV2Put'
            );
        }

        $resourcePath = '/v2/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($customer_number !== null) {
            $formParams['CustomerNumber'] = ObjectSerializer::toFormValue($customer_number);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($gln !== null) {
            $formParams['GLN'] = ObjectSerializer::toFormValue($gln);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_method_id !== null) {
            $formParams['DeliveryMethodId'] = ObjectSerializer::toFormValue($delivery_method_id);
        }
        // form params
        if ($delivery_term_id !== null) {
            $formParams['DeliveryTermId'] = ObjectSerializer::toFormValue($delivery_term_id);
        }
        // form params
        if ($pay_to_account_id !== null) {
            $formParams['PayToAccountId'] = ObjectSerializer::toFormValue($pay_to_account_id);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($reverse_charge_on_construction_services !== null) {
            $formParams['ReverseChargeOnConstructionServices'] = ObjectSerializer::toFormValue($reverse_charge_on_construction_services);
        }
        // form params
        if ($webshop_customer_number !== null) {
            $formParams['WebshopCustomerNumber'] = ObjectSerializer::toFormValue($webshop_customer_number);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($last_invoice_date !== null) {
            $formParams['LastInvoiceDate'] = ObjectSerializer::toFormValue($last_invoice_date);
        }
        // form params
        if ($is_private_person !== null) {
            $formParams['IsPrivatePerson'] = ObjectSerializer::toFormValue($is_private_person);
        }
        // form params
        if ($is_northern_ireland !== null) {
            $formParams['IsNorthernIreland'] = ObjectSerializer::toFormValue($is_northern_ireland);
        }
        // form params
        if ($discount_percentage !== null) {
            $formParams['DiscountPercentage'] = ObjectSerializer::toFormValue($discount_percentage);
        }
        // form params
        if ($changed_utc !== null) {
            $formParams['ChangedUtc'] = ObjectSerializer::toFormValue($changed_utc);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($force_bookkeep_vat !== null) {
            $formParams['ForceBookkeepVat'] = ObjectSerializer::toFormValue($force_bookkeep_vat);
        }
        // form params
        if ($edi_gln_number !== null) {
            $formParams['EdiGlnNumber'] = ObjectSerializer::toFormValue($edi_gln_number);
        }
        // form params
        if ($sales_document_language !== null) {
            $formParams['SalesDocumentLanguage'] = ObjectSerializer::toFormValue($sales_document_language);
        }
        // form params
        if ($electronic_address !== null) {
            $formParams['ElectronicAddress'] = ObjectSerializer::toFormValue($electronic_address);
        }
        // form params
        if ($electronic_reference !== null) {
            $formParams['ElectronicReference'] = ObjectSerializer::toFormValue($electronic_reference);
        }
        // form params
        if ($edi_service_deliverer_id !== null) {
            $formParams['EdiServiceDelivererId'] = ObjectSerializer::toFormValue($edi_service_deliverer_id);
        }
        // form params
        if ($auto_invoice_activation_email_sent_date !== null) {
            $formParams['AutoInvoiceActivationEmailSentDate'] = ObjectSerializer::toFormValue($auto_invoice_activation_email_sent_date);
        }
        // form params
        if ($auto_invoice_registration_request_sent_date !== null) {
            $formParams['AutoInvoiceRegistrationRequestSentDate'] = ObjectSerializer::toFormValue($auto_invoice_registration_request_sent_date);
        }
        // form params
        if ($email_addresses !== null) {
            $formParams['EmailAddresses'] = ObjectSerializer::toFormValue($email_addresses);
        }
        // form params
        if ($customer_labels !== null) {
            $formParams['CustomerLabels'] = ObjectSerializer::toFormValue($customer_labels);
        }
        // form params
        if ($is_future_invoice_date_allowed !== null) {
            $formParams['IsFutureInvoiceDateAllowed'] = ObjectSerializer::toFormValue($is_future_invoice_date_allowed);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
