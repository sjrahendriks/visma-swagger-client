<?php
/**
 * NotesV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * NotesV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotesV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation notesV2Get
     *
     * Get all notes.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Get()
    {
        list($response) = $this->notesV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation notesV2GetWithHttpInfo
     *
     * Get all notes.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2GetAsync
     *
     * Get all notes.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2GetAsync()
    {
        return $this->notesV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2GetAsyncWithHttpInfo
     *
     * Get all notes.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2GetRequest()
    {

        $resourcePath = '/v2/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notesV2Get_0
     *
     * Get a specific note.
     *
     * @param  string $note_id note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Get_0($note_id)
    {
        list($response) = $this->notesV2Get_0WithHttpInfo($note_id);
        return $response;
    }

    /**
     * Operation notesV2Get_0WithHttpInfo
     *
     * Get a specific note.
     *
     * @param  string $note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2Get_0WithHttpInfo($note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2Get_0Request($note_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2Get_0Async
     *
     * Get a specific note.
     *
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2Get_0Async($note_id)
    {
        return $this->notesV2Get_0AsyncWithHttpInfo($note_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2Get_0AsyncWithHttpInfo
     *
     * Get a specific note.
     *
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2Get_0AsyncWithHttpInfo($note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2Get_0Request($note_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Get_0'
     *
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2Get_0Request($note_id)
    {
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling notesV2Get_0'
            );
        }

        $resourcePath = '/v2/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notesV2Post
     *
     * Create a new note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Post($body)
    {
        list($response) = $this->notesV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation notesV2PostWithHttpInfo
     *
     * Create a new note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2PostAsync
     *
     * Create a new note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PostAsync($body)
    {
        return $this->notesV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2PostAsyncWithHttpInfo
     *
     * Create a new note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Post'
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling notesV2Post'
            );
        }

        $resourcePath = '/v2/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['UserId'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($attached_to !== null) {
            $formParams['AttachedTo'] = ObjectSerializer::toFormValue($attached_to);
        }
        // form params
        if ($text !== null) {
            $formParams['Text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($subject !== null) {
            $formParams['Subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($document_type !== null) {
            $formParams['DocumentType'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($is_done !== null) {
            $formParams['IsDone'] = ObjectSerializer::toFormValue($is_done);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notesV2Post
     *
     * Create a new note.
     *
     * @param  string $id id (required)
     * @param  string $user_id user_id (required)
     * @param  string $attached_to attached_to (required)
     * @param  string $text text (required)
     * @param  string $subject subject (required)
     * @param  int $document_type document_type (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  bool $is_done is_done (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Post($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
    {
        list($response) = $this->notesV2PostWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done);
        return $response;
    }

    /**
     * Operation notesV2PostWithHttpInfo
     *
     * Create a new note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2PostWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PostRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2PostAsync
     *
     * Create a new note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PostAsync($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
    {
        return $this->notesV2PostAsyncWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2PostAsyncWithHttpInfo
     *
     * Create a new note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PostAsyncWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PostRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Post'
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2PostRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling notesV2Post'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling notesV2Post'
            );
        }
        // verify the required parameter 'attached_to' is set
        if ($attached_to === null || (is_array($attached_to) && count($attached_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attached_to when calling notesV2Post'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling notesV2Post'
            );
        }
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling notesV2Post'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling notesV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling notesV2Post'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling notesV2Post'
            );
        }
        // verify the required parameter 'is_done' is set
        if ($is_done === null || (is_array($is_done) && count($is_done) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_done when calling notesV2Post'
            );
        }

        $resourcePath = '/v2/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['UserId'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($attached_to !== null) {
            $formParams['AttachedTo'] = ObjectSerializer::toFormValue($attached_to);
        }
        // form params
        if ($text !== null) {
            $formParams['Text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($subject !== null) {
            $formParams['Subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($document_type !== null) {
            $formParams['DocumentType'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($is_done !== null) {
            $formParams['IsDone'] = ObjectSerializer::toFormValue($is_done);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notesV2Put
     *
     * Updates a note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body body (required)
     * @param  string $note_id note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Put($body, $note_id)
    {
        list($response) = $this->notesV2PutWithHttpInfo($body, $note_id);
        return $response;
    }

    /**
     * Operation notesV2PutWithHttpInfo
     *
     * Updates a note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     * @param  string $note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2PutWithHttpInfo($body, $note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PutRequest($body, $note_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2PutAsync
     *
     * Updates a note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PutAsync($body, $note_id)
    {
        return $this->notesV2PutAsyncWithHttpInfo($body, $note_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2PutAsyncWithHttpInfo
     *
     * Updates a note.
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PutAsyncWithHttpInfo($body, $note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PutRequest($body, $note_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Put'
     *
     * @param  \Swagger\Client\Model\NoteApi $body (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2PutRequest($body, $note_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling notesV2Put'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling notesV2Put'
            );
        }

        $resourcePath = '/v2/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['UserId'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($attached_to !== null) {
            $formParams['AttachedTo'] = ObjectSerializer::toFormValue($attached_to);
        }
        // form params
        if ($text !== null) {
            $formParams['Text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($subject !== null) {
            $formParams['Subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($document_type !== null) {
            $formParams['DocumentType'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($is_done !== null) {
            $formParams['IsDone'] = ObjectSerializer::toFormValue($is_done);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation notesV2Put
     *
     * Updates a note.
     *
     * @param  string $id id (required)
     * @param  string $user_id user_id (required)
     * @param  string $attached_to attached_to (required)
     * @param  string $text text (required)
     * @param  string $subject subject (required)
     * @param  int $document_type document_type (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  bool $is_done is_done (required)
     * @param  string $note_id note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\NoteApi
     */
    public function notesV2Put($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
    {
        list($response) = $this->notesV2PutWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id);
        return $response;
    }

    /**
     * Operation notesV2PutWithHttpInfo
     *
     * Updates a note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     * @param  string $note_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\NoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function notesV2PutWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PutRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation notesV2PutAsync
     *
     * Updates a note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PutAsync($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
    {
        return $this->notesV2PutAsyncWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation notesV2PutAsyncWithHttpInfo
     *
     * Updates a note.
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function notesV2PutAsyncWithHttpInfo($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
    {
        $returnType = '\Swagger\Client\Model\NoteApi';
        $request = $this->notesV2PutRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'notesV2Put'
     *
     * @param  string $id (required)
     * @param  string $user_id (required)
     * @param  string $attached_to (required)
     * @param  string $text (required)
     * @param  string $subject (required)
     * @param  int $document_type (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  bool $is_done (required)
     * @param  string $note_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesV2PutRequest($id, $user_id, $attached_to, $text, $subject, $document_type, $created_utc, $modified_utc, $is_done, $note_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling notesV2Put'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling notesV2Put'
            );
        }
        // verify the required parameter 'attached_to' is set
        if ($attached_to === null || (is_array($attached_to) && count($attached_to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attached_to when calling notesV2Put'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling notesV2Put'
            );
        }
        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subject when calling notesV2Put'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling notesV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling notesV2Put'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling notesV2Put'
            );
        }
        // verify the required parameter 'is_done' is set
        if ($is_done === null || (is_array($is_done) && count($is_done) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_done when calling notesV2Put'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling notesV2Put'
            );
        }

        $resourcePath = '/v2/notes/{noteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noteId' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['UserId'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($attached_to !== null) {
            $formParams['AttachedTo'] = ObjectSerializer::toFormValue($attached_to);
        }
        // form params
        if ($text !== null) {
            $formParams['Text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($subject !== null) {
            $formParams['Subject'] = ObjectSerializer::toFormValue($subject);
        }
        // form params
        if ($document_type !== null) {
            $formParams['DocumentType'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($is_done !== null) {
            $formParams['IsDone'] = ObjectSerializer::toFormValue($is_done);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
