<?php
/**
 * QuotesV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * QuotesV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuotesV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation quotesV2ConvertToInvoice
     *
     * Converts an existing quote to a customer invoice
     *
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerInvoiceApi
     */
    public function quotesV2ConvertToInvoice($id)
    {
        list($response) = $this->quotesV2ConvertToInvoiceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation quotesV2ConvertToInvoiceWithHttpInfo
     *
     * Converts an existing quote to a customer invoice
     *
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerInvoiceApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2ConvertToInvoiceWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->quotesV2ConvertToInvoiceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerInvoiceApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2ConvertToInvoiceAsync
     *
     * Converts an existing quote to a customer invoice
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToInvoiceAsync($id)
    {
        return $this->quotesV2ConvertToInvoiceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2ConvertToInvoiceAsyncWithHttpInfo
     *
     * Converts an existing quote to a customer invoice
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToInvoiceAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\CustomerInvoiceApi';
        $request = $this->quotesV2ConvertToInvoiceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2ConvertToInvoice'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2ConvertToInvoiceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2ConvertToInvoice'
            );
        }

        $resourcePath = '/v2/quotes/{id}/converttocustomerinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2ConvertToOrder
     *
     * Converts an existing quote to a order type
     *
     * @param  \Swagger\Client\Model\QuoteConversionApi $body body (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OrderApi
     */
    public function quotesV2ConvertToOrder($body, $id)
    {
        list($response) = $this->quotesV2ConvertToOrderWithHttpInfo($body, $id);
        return $response;
    }

    /**
     * Operation quotesV2ConvertToOrderWithHttpInfo
     *
     * Converts an existing quote to a order type
     *
     * @param  \Swagger\Client\Model\QuoteConversionApi $body (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OrderApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2ConvertToOrderWithHttpInfo($body, $id)
    {
        $returnType = '\Swagger\Client\Model\OrderApi';
        $request = $this->quotesV2ConvertToOrderRequest($body, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OrderApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2ConvertToOrderAsync
     *
     * Converts an existing quote to a order type
     *
     * @param  \Swagger\Client\Model\QuoteConversionApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToOrderAsync($body, $id)
    {
        return $this->quotesV2ConvertToOrderAsyncWithHttpInfo($body, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2ConvertToOrderAsyncWithHttpInfo
     *
     * Converts an existing quote to a order type
     *
     * @param  \Swagger\Client\Model\QuoteConversionApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToOrderAsyncWithHttpInfo($body, $id)
    {
        $returnType = '\Swagger\Client\Model\OrderApi';
        $request = $this->quotesV2ConvertToOrderRequest($body, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2ConvertToOrder'
     *
     * @param  \Swagger\Client\Model\QuoteConversionApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2ConvertToOrderRequest($body, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling quotesV2ConvertToOrder'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2ConvertToOrder'
            );
        }

        $resourcePath = '/v2/quotes/{id}/converttoorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($type !== null) {
            $formParams['Type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2ConvertToOrder
     *
     * Converts an existing quote to a order type
     *
     * @param  int $type type (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OrderApi
     */
    public function quotesV2ConvertToOrder($type, $id)
    {
        list($response) = $this->quotesV2ConvertToOrderWithHttpInfo($type, $id);
        return $response;
    }

    /**
     * Operation quotesV2ConvertToOrderWithHttpInfo
     *
     * Converts an existing quote to a order type
     *
     * @param  int $type (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OrderApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2ConvertToOrderWithHttpInfo($type, $id)
    {
        $returnType = '\Swagger\Client\Model\OrderApi';
        $request = $this->quotesV2ConvertToOrderRequest($type, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OrderApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2ConvertToOrderAsync
     *
     * Converts an existing quote to a order type
     *
     * @param  int $type (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToOrderAsync($type, $id)
    {
        return $this->quotesV2ConvertToOrderAsyncWithHttpInfo($type, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2ConvertToOrderAsyncWithHttpInfo
     *
     * Converts an existing quote to a order type
     *
     * @param  int $type (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2ConvertToOrderAsyncWithHttpInfo($type, $id)
    {
        $returnType = '\Swagger\Client\Model\OrderApi';
        $request = $this->quotesV2ConvertToOrderRequest($type, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2ConvertToOrder'
     *
     * @param  int $type (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2ConvertToOrderRequest($type, $id)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling quotesV2ConvertToOrder'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2ConvertToOrder'
            );
        }

        $resourcePath = '/v2/quotes/{id}/converttoorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($type !== null) {
            $formParams['Type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Delete
     *
     * Delete an quote.
     *
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function quotesV2Delete($id)
    {
        list($response) = $this->quotesV2DeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation quotesV2DeleteWithHttpInfo
     *
     * Delete an quote.
     *
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2DeleteWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2DeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2DeleteAsync
     *
     * Delete an quote.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2DeleteAsync($id)
    {
        return $this->quotesV2DeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2DeleteAsyncWithHttpInfo
     *
     * Delete an quote.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2DeleteAsyncWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2DeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Delete'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2DeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Delete'
            );
        }

        $resourcePath = '/v2/quotes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Get
     *
     * Get sent and converted quotes.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseQuoteApi
     */
    public function quotesV2Get()
    {
        list($response) = $this->quotesV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation quotesV2GetWithHttpInfo
     *
     * Get sent and converted quotes.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseQuoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseQuoteApi';
        $request = $this->quotesV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseQuoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2GetAsync
     *
     * Get sent and converted quotes.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2GetAsync()
    {
        return $this->quotesV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2GetAsyncWithHttpInfo
     *
     * Get sent and converted quotes.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseQuoteApi';
        $request = $this->quotesV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2GetRequest()
    {

        $resourcePath = '/v2/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Get_0
     *
     * Get a sent and converted quote
     *
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QuoteApi
     */
    public function quotesV2Get_0($id)
    {
        list($response) = $this->quotesV2Get_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation quotesV2Get_0WithHttpInfo
     *
     * Get a sent and converted quote
     *
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QuoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2Get_0WithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2Get_0Request($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QuoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2Get_0Async
     *
     * Get a sent and converted quote
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2Get_0Async($id)
    {
        return $this->quotesV2Get_0AsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2Get_0AsyncWithHttpInfo
     *
     * Get a sent and converted quote
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2Get_0AsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2Get_0Request($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Get_0'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2Get_0Request($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Get_0'
            );
        }

        $resourcePath = '/v2/quotes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Post
     *
     * Create a quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QuoteApi
     */
    public function quotesV2Post($body)
    {
        list($response) = $this->quotesV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation quotesV2PostWithHttpInfo
     *
     * Create a quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QuoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QuoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2PostAsync
     *
     * Create a quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PostAsync($body)
    {
        return $this->quotesV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2PostAsyncWithHttpInfo
     *
     * Create a quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Post'
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling quotesV2Post'
            );
        }

        $resourcePath = '/v2/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($quote_date !== null) {
            $formParams['QuoteDate'] = ObjectSerializer::toFormValue($quote_date);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($approved_date !== null) {
            $formParams['ApprovedDate'] = ObjectSerializer::toFormValue($approved_date);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($status !== null) {
            $formParams['Status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($company_reference !== null) {
            $formParams['CompanyReference'] = ObjectSerializer::toFormValue($company_reference);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_reference !== null) {
            $formParams['CustomerReference'] = ObjectSerializer::toFormValue($customer_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat_amount !== null) {
            $formParams['VatAmount'] = ObjectSerializer::toFormValue($vat_amount);
        }
        // form params
        if ($roundings_amount !== null) {
            $formParams['RoundingsAmount'] = ObjectSerializer::toFormValue($roundings_amount);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Post
     *
     * Create a quote.
     *
     * @param  string $id id (required)
     * @param  int $number number (required)
     * @param  string $customer_id customer_id (required)
     * @param  \DateTime $due_date due_date (required)
     * @param  \DateTime $quote_date quote_date (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $approved_date approved_date (required)
     * @param  string $currency_code currency_code (required)
     * @param  int $status status (required)
     * @param  double $currency_rate currency_rate (required)
     * @param  string $company_reference company_reference (required)
     * @param  bool $eu_third_party eu_third_party (required)
     * @param  string $customer_reference customer_reference (required)
     * @param  string $invoice_customer_name invoice_customer_name (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_method_name delivery_method_name (required)
     * @param  string $delivery_method_code delivery_method_code (required)
     * @param  string $delivery_term_code delivery_term_code (required)
     * @param  string $delivery_term_name delivery_term_name (required)
     * @param  bool $customer_is_private_person customer_is_private_person (required)
     * @param  bool $includes_vat includes_vat (required)
     * @param  bool $is_domestic is_domestic (required)
     * @param  int $rot_reduced_invoicing_type rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment terms_of_payment (required)
     * @param  string[] $sales_document_attachments sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows rows (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $vat_amount vat_amount (required)
     * @param  double $roundings_amount roundings_amount (required)
     * @param  bool $uses_green_technology uses_green_technology (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\QuoteApi
     */
    public function quotesV2Post($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
    {
        list($response) = $this->quotesV2PostWithHttpInfo($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology);
        return $response;
    }

    /**
     * Operation quotesV2PostWithHttpInfo
     *
     * Create a quote.
     *
     * @param  string $id (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\QuoteApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2PostWithHttpInfo($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2PostRequest($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\QuoteApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2PostAsync
     *
     * Create a quote.
     *
     * @param  string $id (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PostAsync($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
    {
        return $this->quotesV2PostAsyncWithHttpInfo($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2PostAsyncWithHttpInfo
     *
     * Create a quote.
     *
     * @param  string $id (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PostAsyncWithHttpInfo($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
    {
        $returnType = '\Swagger\Client\Model\QuoteApi';
        $request = $this->quotesV2PostRequest($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Post'
     *
     * @param  string $id (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2PostRequest($id, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Post'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling quotesV2Post'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling quotesV2Post'
            );
        }
        // verify the required parameter 'due_date' is set
        if ($due_date === null || (is_array($due_date) && count($due_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $due_date when calling quotesV2Post'
            );
        }
        // verify the required parameter 'quote_date' is set
        if ($quote_date === null || (is_array($quote_date) && count($quote_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_date when calling quotesV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling quotesV2Post'
            );
        }
        // verify the required parameter 'approved_date' is set
        if ($approved_date === null || (is_array($approved_date) && count($approved_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approved_date when calling quotesV2Post'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling quotesV2Post'
            );
        }
        // verify the required parameter 'currency_rate' is set
        if ($currency_rate === null || (is_array($currency_rate) && count($currency_rate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_rate when calling quotesV2Post'
            );
        }
        // verify the required parameter 'company_reference' is set
        if ($company_reference === null || (is_array($company_reference) && count($company_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_reference when calling quotesV2Post'
            );
        }
        // verify the required parameter 'eu_third_party' is set
        if ($eu_third_party === null || (is_array($eu_third_party) && count($eu_third_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eu_third_party when calling quotesV2Post'
            );
        }
        // verify the required parameter 'customer_reference' is set
        if ($customer_reference === null || (is_array($customer_reference) && count($customer_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_reference when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_customer_name' is set
        if ($invoice_customer_name === null || (is_array($invoice_customer_name) && count($invoice_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_customer_name when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling quotesV2Post'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_method_name' is set
        if ($delivery_method_name === null || (is_array($delivery_method_name) && count($delivery_method_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_name when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_method_code' is set
        if ($delivery_method_code === null || (is_array($delivery_method_code) && count($delivery_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_term_code' is set
        if ($delivery_term_code === null || (is_array($delivery_term_code) && count($delivery_term_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_code when calling quotesV2Post'
            );
        }
        // verify the required parameter 'delivery_term_name' is set
        if ($delivery_term_name === null || (is_array($delivery_term_name) && count($delivery_term_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_name when calling quotesV2Post'
            );
        }
        // verify the required parameter 'customer_is_private_person' is set
        if ($customer_is_private_person === null || (is_array($customer_is_private_person) && count($customer_is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_is_private_person when calling quotesV2Post'
            );
        }
        // verify the required parameter 'includes_vat' is set
        if ($includes_vat === null || (is_array($includes_vat) && count($includes_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includes_vat when calling quotesV2Post'
            );
        }
        // verify the required parameter 'is_domestic' is set
        if ($is_domestic === null || (is_array($is_domestic) && count($is_domestic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_domestic when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_type' is set
        if ($rot_reduced_invoicing_type === null || (is_array($rot_reduced_invoicing_type) && count($rot_reduced_invoicing_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_type when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_property_type' is set
        if ($rot_property_type === null || (is_array($rot_property_type) && count($rot_property_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_property_type when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_property_name' is set
        if ($rot_reduced_invoicing_property_name === null || (is_array($rot_reduced_invoicing_property_name) && count($rot_reduced_invoicing_property_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_property_name when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_org_number' is set
        if ($rot_reduced_invoicing_org_number === null || (is_array($rot_reduced_invoicing_org_number) && count($rot_reduced_invoicing_org_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_org_number when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_amount' is set
        if ($rot_reduced_invoicing_amount === null || (is_array($rot_reduced_invoicing_amount) && count($rot_reduced_invoicing_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_amount when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_automatic_distribution' is set
        if ($rot_reduced_invoicing_automatic_distribution === null || (is_array($rot_reduced_invoicing_automatic_distribution) && count($rot_reduced_invoicing_automatic_distribution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_automatic_distribution when calling quotesV2Post'
            );
        }
        // verify the required parameter 'persons' is set
        if ($persons === null || (is_array($persons) && count($persons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $persons when calling quotesV2Post'
            );
        }
        // verify the required parameter 'terms_of_payment' is set
        if ($terms_of_payment === null || (is_array($terms_of_payment) && count($terms_of_payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment when calling quotesV2Post'
            );
        }
        // verify the required parameter 'sales_document_attachments' is set
        if ($sales_document_attachments === null || (is_array($sales_document_attachments) && count($sales_document_attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_attachments when calling quotesV2Post'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling quotesV2Post'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling quotesV2Post'
            );
        }
        // verify the required parameter 'vat_amount' is set
        if ($vat_amount === null || (is_array($vat_amount) && count($vat_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_amount when calling quotesV2Post'
            );
        }
        // verify the required parameter 'roundings_amount' is set
        if ($roundings_amount === null || (is_array($roundings_amount) && count($roundings_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roundings_amount when calling quotesV2Post'
            );
        }
        // verify the required parameter 'uses_green_technology' is set
        if ($uses_green_technology === null || (is_array($uses_green_technology) && count($uses_green_technology) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_green_technology when calling quotesV2Post'
            );
        }

        $resourcePath = '/v2/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($quote_date !== null) {
            $formParams['QuoteDate'] = ObjectSerializer::toFormValue($quote_date);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($approved_date !== null) {
            $formParams['ApprovedDate'] = ObjectSerializer::toFormValue($approved_date);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($status !== null) {
            $formParams['Status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($company_reference !== null) {
            $formParams['CompanyReference'] = ObjectSerializer::toFormValue($company_reference);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_reference !== null) {
            $formParams['CustomerReference'] = ObjectSerializer::toFormValue($customer_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat_amount !== null) {
            $formParams['VatAmount'] = ObjectSerializer::toFormValue($vat_amount);
        }
        // form params
        if ($roundings_amount !== null) {
            $formParams['RoundingsAmount'] = ObjectSerializer::toFormValue($roundings_amount);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Print
     *
     * Get a pdf-file of a quote.
     *
     * @param  string $id The id of the quote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function quotesV2Print($id)
    {
        list($response) = $this->quotesV2PrintWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation quotesV2PrintWithHttpInfo
     *
     * Get a pdf-file of a quote.
     *
     * @param  string $id The id of the quote (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2PrintWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PrintRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2PrintAsync
     *
     * Get a pdf-file of a quote.
     *
     * @param  string $id The id of the quote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PrintAsync($id)
    {
        return $this->quotesV2PrintAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2PrintAsyncWithHttpInfo
     *
     * Get a pdf-file of a quote.
     *
     * @param  string $id The id of the quote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PrintAsyncWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PrintRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Print'
     *
     * @param  string $id The id of the quote (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2PrintRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Print'
            );
        }

        $resourcePath = '/v2/quotes/{id}/print';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/pdf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/pdf'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Put
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body body (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function quotesV2Put($body, $id)
    {
        list($response) = $this->quotesV2PutWithHttpInfo($body, $id);
        return $response;
    }

    /**
     * Operation quotesV2PutWithHttpInfo
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2PutWithHttpInfo($body, $id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PutRequest($body, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2PutAsync
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PutAsync($body, $id)
    {
        return $this->quotesV2PutAsyncWithHttpInfo($body, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2PutAsyncWithHttpInfo
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PutAsyncWithHttpInfo($body, $id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PutRequest($body, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Put'
     *
     * @param  \Swagger\Client\Model\QuoteApi $body (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2PutRequest($body, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling quotesV2Put'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Put'
            );
        }

        $resourcePath = '/v2/quotes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($quote_date !== null) {
            $formParams['QuoteDate'] = ObjectSerializer::toFormValue($quote_date);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($approved_date !== null) {
            $formParams['ApprovedDate'] = ObjectSerializer::toFormValue($approved_date);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($status !== null) {
            $formParams['Status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($company_reference !== null) {
            $formParams['CompanyReference'] = ObjectSerializer::toFormValue($company_reference);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_reference !== null) {
            $formParams['CustomerReference'] = ObjectSerializer::toFormValue($customer_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat_amount !== null) {
            $formParams['VatAmount'] = ObjectSerializer::toFormValue($vat_amount);
        }
        // form params
        if ($roundings_amount !== null) {
            $formParams['RoundingsAmount'] = ObjectSerializer::toFormValue($roundings_amount);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Put
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  string $id2 id2 (required)
     * @param  int $number number (required)
     * @param  string $customer_id customer_id (required)
     * @param  \DateTime $due_date due_date (required)
     * @param  \DateTime $quote_date quote_date (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $approved_date approved_date (required)
     * @param  string $currency_code currency_code (required)
     * @param  int $status status (required)
     * @param  double $currency_rate currency_rate (required)
     * @param  string $company_reference company_reference (required)
     * @param  bool $eu_third_party eu_third_party (required)
     * @param  string $customer_reference customer_reference (required)
     * @param  string $invoice_customer_name invoice_customer_name (required)
     * @param  string $invoice_address1 invoice_address1 (required)
     * @param  string $invoice_address2 invoice_address2 (required)
     * @param  string $invoice_postal_code invoice_postal_code (required)
     * @param  string $invoice_city invoice_city (required)
     * @param  string $invoice_country_code invoice_country_code (required)
     * @param  string $delivery_customer_name delivery_customer_name (required)
     * @param  string $delivery_address1 delivery_address1 (required)
     * @param  string $delivery_address2 delivery_address2 (required)
     * @param  string $delivery_postal_code delivery_postal_code (required)
     * @param  string $delivery_city delivery_city (required)
     * @param  string $delivery_country_code delivery_country_code (required)
     * @param  string $delivery_method_name delivery_method_name (required)
     * @param  string $delivery_method_code delivery_method_code (required)
     * @param  string $delivery_term_code delivery_term_code (required)
     * @param  string $delivery_term_name delivery_term_name (required)
     * @param  bool $customer_is_private_person customer_is_private_person (required)
     * @param  bool $includes_vat includes_vat (required)
     * @param  bool $is_domestic is_domestic (required)
     * @param  int $rot_reduced_invoicing_type rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment terms_of_payment (required)
     * @param  string[] $sales_document_attachments sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows rows (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $vat_amount vat_amount (required)
     * @param  double $roundings_amount roundings_amount (required)
     * @param  bool $uses_green_technology uses_green_technology (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function quotesV2Put($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
    {
        list($response) = $this->quotesV2PutWithHttpInfo($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id);
        return $response;
    }

    /**
     * Operation quotesV2PutWithHttpInfo
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  string $id2 (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2PutWithHttpInfo($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PutRequest($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2PutAsync
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  string $id2 (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PutAsync($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
    {
        return $this->quotesV2PutAsyncWithHttpInfo($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2PutAsyncWithHttpInfo
     *
     * Replace the contents of an ongoing quote.
     *
     * @param  string $id2 (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2PutAsyncWithHttpInfo($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
    {
        $returnType = 'object';
        $request = $this->quotesV2PutRequest($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Put'
     *
     * @param  string $id2 (required)
     * @param  int $number (required)
     * @param  string $customer_id (required)
     * @param  \DateTime $due_date (required)
     * @param  \DateTime $quote_date (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $approved_date (required)
     * @param  string $currency_code (required)
     * @param  int $status (required)
     * @param  double $currency_rate (required)
     * @param  string $company_reference (required)
     * @param  bool $eu_third_party (required)
     * @param  string $customer_reference (required)
     * @param  string $invoice_customer_name (required)
     * @param  string $invoice_address1 (required)
     * @param  string $invoice_address2 (required)
     * @param  string $invoice_postal_code (required)
     * @param  string $invoice_city (required)
     * @param  string $invoice_country_code (required)
     * @param  string $delivery_customer_name (required)
     * @param  string $delivery_address1 (required)
     * @param  string $delivery_address2 (required)
     * @param  string $delivery_postal_code (required)
     * @param  string $delivery_city (required)
     * @param  string $delivery_country_code (required)
     * @param  string $delivery_method_name (required)
     * @param  string $delivery_method_code (required)
     * @param  string $delivery_term_code (required)
     * @param  string $delivery_term_name (required)
     * @param  bool $customer_is_private_person (required)
     * @param  bool $includes_vat (required)
     * @param  bool $is_domestic (required)
     * @param  int $rot_reduced_invoicing_type (required)
     * @param  int $rot_property_type (required)
     * @param  string $rot_reduced_invoicing_property_name (required)
     * @param  string $rot_reduced_invoicing_org_number (required)
     * @param  double $rot_reduced_invoicing_amount (required)
     * @param  bool $rot_reduced_invoicing_automatic_distribution (required)
     * @param  \Swagger\Client\Model\SalesDocumentRotRutReductionPersonApi[] $persons (required)
     * @param  \Swagger\Client\Model\TermsOfPaymentApi $terms_of_payment (required)
     * @param  string[] $sales_document_attachments (required)
     * @param  \Swagger\Client\Model\QuoteRowApi[] $rows (required)
     * @param  double $total_amount (required)
     * @param  double $vat_amount (required)
     * @param  double $roundings_amount (required)
     * @param  bool $uses_green_technology (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2PutRequest($id2, $number, $customer_id, $due_date, $quote_date, $created_utc, $approved_date, $currency_code, $status, $currency_rate, $company_reference, $eu_third_party, $customer_reference, $invoice_customer_name, $invoice_address1, $invoice_address2, $invoice_postal_code, $invoice_city, $invoice_country_code, $delivery_customer_name, $delivery_address1, $delivery_address2, $delivery_postal_code, $delivery_city, $delivery_country_code, $delivery_method_name, $delivery_method_code, $delivery_term_code, $delivery_term_name, $customer_is_private_person, $includes_vat, $is_domestic, $rot_reduced_invoicing_type, $rot_property_type, $rot_reduced_invoicing_property_name, $rot_reduced_invoicing_org_number, $rot_reduced_invoicing_amount, $rot_reduced_invoicing_automatic_distribution, $persons, $terms_of_payment, $sales_document_attachments, $rows, $total_amount, $vat_amount, $roundings_amount, $uses_green_technology, $id)
    {
        // verify the required parameter 'id2' is set
        if ($id2 === null || (is_array($id2) && count($id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id2 when calling quotesV2Put'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling quotesV2Put'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling quotesV2Put'
            );
        }
        // verify the required parameter 'due_date' is set
        if ($due_date === null || (is_array($due_date) && count($due_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $due_date when calling quotesV2Put'
            );
        }
        // verify the required parameter 'quote_date' is set
        if ($quote_date === null || (is_array($quote_date) && count($quote_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_date when calling quotesV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling quotesV2Put'
            );
        }
        // verify the required parameter 'approved_date' is set
        if ($approved_date === null || (is_array($approved_date) && count($approved_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approved_date when calling quotesV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling quotesV2Put'
            );
        }
        // verify the required parameter 'currency_rate' is set
        if ($currency_rate === null || (is_array($currency_rate) && count($currency_rate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_rate when calling quotesV2Put'
            );
        }
        // verify the required parameter 'company_reference' is set
        if ($company_reference === null || (is_array($company_reference) && count($company_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_reference when calling quotesV2Put'
            );
        }
        // verify the required parameter 'eu_third_party' is set
        if ($eu_third_party === null || (is_array($eu_third_party) && count($eu_third_party) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eu_third_party when calling quotesV2Put'
            );
        }
        // verify the required parameter 'customer_reference' is set
        if ($customer_reference === null || (is_array($customer_reference) && count($customer_reference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_reference when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_customer_name' is set
        if ($invoice_customer_name === null || (is_array($invoice_customer_name) && count($invoice_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_customer_name when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_address1' is set
        if ($invoice_address1 === null || (is_array($invoice_address1) && count($invoice_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address1 when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_address2' is set
        if ($invoice_address2 === null || (is_array($invoice_address2) && count($invoice_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_address2 when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_postal_code' is set
        if ($invoice_postal_code === null || (is_array($invoice_postal_code) && count($invoice_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_postal_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_city' is set
        if ($invoice_city === null || (is_array($invoice_city) && count($invoice_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_city when calling quotesV2Put'
            );
        }
        // verify the required parameter 'invoice_country_code' is set
        if ($invoice_country_code === null || (is_array($invoice_country_code) && count($invoice_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_country_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_customer_name' is set
        if ($delivery_customer_name === null || (is_array($delivery_customer_name) && count($delivery_customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_customer_name when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_address1' is set
        if ($delivery_address1 === null || (is_array($delivery_address1) && count($delivery_address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address1 when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_address2' is set
        if ($delivery_address2 === null || (is_array($delivery_address2) && count($delivery_address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address2 when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_postal_code' is set
        if ($delivery_postal_code === null || (is_array($delivery_postal_code) && count($delivery_postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_postal_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_city' is set
        if ($delivery_city === null || (is_array($delivery_city) && count($delivery_city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_city when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_country_code' is set
        if ($delivery_country_code === null || (is_array($delivery_country_code) && count($delivery_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_country_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_method_name' is set
        if ($delivery_method_name === null || (is_array($delivery_method_name) && count($delivery_method_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_name when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_method_code' is set
        if ($delivery_method_code === null || (is_array($delivery_method_code) && count($delivery_method_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_method_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_term_code' is set
        if ($delivery_term_code === null || (is_array($delivery_term_code) && count($delivery_term_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_code when calling quotesV2Put'
            );
        }
        // verify the required parameter 'delivery_term_name' is set
        if ($delivery_term_name === null || (is_array($delivery_term_name) && count($delivery_term_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_term_name when calling quotesV2Put'
            );
        }
        // verify the required parameter 'customer_is_private_person' is set
        if ($customer_is_private_person === null || (is_array($customer_is_private_person) && count($customer_is_private_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_is_private_person when calling quotesV2Put'
            );
        }
        // verify the required parameter 'includes_vat' is set
        if ($includes_vat === null || (is_array($includes_vat) && count($includes_vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $includes_vat when calling quotesV2Put'
            );
        }
        // verify the required parameter 'is_domestic' is set
        if ($is_domestic === null || (is_array($is_domestic) && count($is_domestic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_domestic when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_type' is set
        if ($rot_reduced_invoicing_type === null || (is_array($rot_reduced_invoicing_type) && count($rot_reduced_invoicing_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_type when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_property_type' is set
        if ($rot_property_type === null || (is_array($rot_property_type) && count($rot_property_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_property_type when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_property_name' is set
        if ($rot_reduced_invoicing_property_name === null || (is_array($rot_reduced_invoicing_property_name) && count($rot_reduced_invoicing_property_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_property_name when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_org_number' is set
        if ($rot_reduced_invoicing_org_number === null || (is_array($rot_reduced_invoicing_org_number) && count($rot_reduced_invoicing_org_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_org_number when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_amount' is set
        if ($rot_reduced_invoicing_amount === null || (is_array($rot_reduced_invoicing_amount) && count($rot_reduced_invoicing_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_amount when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rot_reduced_invoicing_automatic_distribution' is set
        if ($rot_reduced_invoicing_automatic_distribution === null || (is_array($rot_reduced_invoicing_automatic_distribution) && count($rot_reduced_invoicing_automatic_distribution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rot_reduced_invoicing_automatic_distribution when calling quotesV2Put'
            );
        }
        // verify the required parameter 'persons' is set
        if ($persons === null || (is_array($persons) && count($persons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $persons when calling quotesV2Put'
            );
        }
        // verify the required parameter 'terms_of_payment' is set
        if ($terms_of_payment === null || (is_array($terms_of_payment) && count($terms_of_payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment when calling quotesV2Put'
            );
        }
        // verify the required parameter 'sales_document_attachments' is set
        if ($sales_document_attachments === null || (is_array($sales_document_attachments) && count($sales_document_attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_document_attachments when calling quotesV2Put'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling quotesV2Put'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling quotesV2Put'
            );
        }
        // verify the required parameter 'vat_amount' is set
        if ($vat_amount === null || (is_array($vat_amount) && count($vat_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_amount when calling quotesV2Put'
            );
        }
        // verify the required parameter 'roundings_amount' is set
        if ($roundings_amount === null || (is_array($roundings_amount) && count($roundings_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roundings_amount when calling quotesV2Put'
            );
        }
        // verify the required parameter 'uses_green_technology' is set
        if ($uses_green_technology === null || (is_array($uses_green_technology) && count($uses_green_technology) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_green_technology when calling quotesV2Put'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Put'
            );
        }

        $resourcePath = '/v2/quotes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($number !== null) {
            $formParams['Number'] = ObjectSerializer::toFormValue($number);
        }
        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($quote_date !== null) {
            $formParams['QuoteDate'] = ObjectSerializer::toFormValue($quote_date);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($approved_date !== null) {
            $formParams['ApprovedDate'] = ObjectSerializer::toFormValue($approved_date);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($status !== null) {
            $formParams['Status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($company_reference !== null) {
            $formParams['CompanyReference'] = ObjectSerializer::toFormValue($company_reference);
        }
        // form params
        if ($eu_third_party !== null) {
            $formParams['EuThirdParty'] = ObjectSerializer::toFormValue($eu_third_party);
        }
        // form params
        if ($customer_reference !== null) {
            $formParams['CustomerReference'] = ObjectSerializer::toFormValue($customer_reference);
        }
        // form params
        if ($invoice_customer_name !== null) {
            $formParams['InvoiceCustomerName'] = ObjectSerializer::toFormValue($invoice_customer_name);
        }
        // form params
        if ($invoice_address1 !== null) {
            $formParams['InvoiceAddress1'] = ObjectSerializer::toFormValue($invoice_address1);
        }
        // form params
        if ($invoice_address2 !== null) {
            $formParams['InvoiceAddress2'] = ObjectSerializer::toFormValue($invoice_address2);
        }
        // form params
        if ($invoice_postal_code !== null) {
            $formParams['InvoicePostalCode'] = ObjectSerializer::toFormValue($invoice_postal_code);
        }
        // form params
        if ($invoice_city !== null) {
            $formParams['InvoiceCity'] = ObjectSerializer::toFormValue($invoice_city);
        }
        // form params
        if ($invoice_country_code !== null) {
            $formParams['InvoiceCountryCode'] = ObjectSerializer::toFormValue($invoice_country_code);
        }
        // form params
        if ($delivery_customer_name !== null) {
            $formParams['DeliveryCustomerName'] = ObjectSerializer::toFormValue($delivery_customer_name);
        }
        // form params
        if ($delivery_address1 !== null) {
            $formParams['DeliveryAddress1'] = ObjectSerializer::toFormValue($delivery_address1);
        }
        // form params
        if ($delivery_address2 !== null) {
            $formParams['DeliveryAddress2'] = ObjectSerializer::toFormValue($delivery_address2);
        }
        // form params
        if ($delivery_postal_code !== null) {
            $formParams['DeliveryPostalCode'] = ObjectSerializer::toFormValue($delivery_postal_code);
        }
        // form params
        if ($delivery_city !== null) {
            $formParams['DeliveryCity'] = ObjectSerializer::toFormValue($delivery_city);
        }
        // form params
        if ($delivery_country_code !== null) {
            $formParams['DeliveryCountryCode'] = ObjectSerializer::toFormValue($delivery_country_code);
        }
        // form params
        if ($delivery_method_name !== null) {
            $formParams['DeliveryMethodName'] = ObjectSerializer::toFormValue($delivery_method_name);
        }
        // form params
        if ($delivery_method_code !== null) {
            $formParams['DeliveryMethodCode'] = ObjectSerializer::toFormValue($delivery_method_code);
        }
        // form params
        if ($delivery_term_code !== null) {
            $formParams['DeliveryTermCode'] = ObjectSerializer::toFormValue($delivery_term_code);
        }
        // form params
        if ($delivery_term_name !== null) {
            $formParams['DeliveryTermName'] = ObjectSerializer::toFormValue($delivery_term_name);
        }
        // form params
        if ($customer_is_private_person !== null) {
            $formParams['CustomerIsPrivatePerson'] = ObjectSerializer::toFormValue($customer_is_private_person);
        }
        // form params
        if ($includes_vat !== null) {
            $formParams['IncludesVat'] = ObjectSerializer::toFormValue($includes_vat);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($rot_reduced_invoicing_type !== null) {
            $formParams['RotReducedInvoicingType'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_type);
        }
        // form params
        if ($rot_property_type !== null) {
            $formParams['RotPropertyType'] = ObjectSerializer::toFormValue($rot_property_type);
        }
        // form params
        if ($rot_reduced_invoicing_property_name !== null) {
            $formParams['RotReducedInvoicingPropertyName'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_property_name);
        }
        // form params
        if ($rot_reduced_invoicing_org_number !== null) {
            $formParams['RotReducedInvoicingOrgNumber'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_org_number);
        }
        // form params
        if ($rot_reduced_invoicing_amount !== null) {
            $formParams['RotReducedInvoicingAmount'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_amount);
        }
        // form params
        if ($rot_reduced_invoicing_automatic_distribution !== null) {
            $formParams['RotReducedInvoicingAutomaticDistribution'] = ObjectSerializer::toFormValue($rot_reduced_invoicing_automatic_distribution);
        }
        // form params
        if ($persons !== null) {
            $formParams['Persons'] = ObjectSerializer::toFormValue($persons);
        }
        // form params
        if ($terms_of_payment !== null) {
            $formParams['TermsOfPayment'] = ObjectSerializer::toFormValue($terms_of_payment);
        }
        // form params
        if ($sales_document_attachments !== null) {
            $formParams['SalesDocumentAttachments'] = ObjectSerializer::toFormValue($sales_document_attachments);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat_amount !== null) {
            $formParams['VatAmount'] = ObjectSerializer::toFormValue($vat_amount);
        }
        // form params
        if ($roundings_amount !== null) {
            $formParams['RoundingsAmount'] = ObjectSerializer::toFormValue($roundings_amount);
        }
        // form params
        if ($uses_green_technology !== null) {
            $formParams['UsesGreenTechnology'] = ObjectSerializer::toFormValue($uses_green_technology);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quotesV2Put_0
     *
     * Accepts an ongoing quote
     *
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function quotesV2Put_0($id)
    {
        list($response) = $this->quotesV2Put_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation quotesV2Put_0WithHttpInfo
     *
     * Accepts an ongoing quote
     *
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function quotesV2Put_0WithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2Put_0Request($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quotesV2Put_0Async
     *
     * Accepts an ongoing quote
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2Put_0Async($id)
    {
        return $this->quotesV2Put_0AsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quotesV2Put_0AsyncWithHttpInfo
     *
     * Accepts an ongoing quote
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quotesV2Put_0AsyncWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->quotesV2Put_0Request($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quotesV2Put_0'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quotesV2Put_0Request($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling quotesV2Put_0'
            );
        }

        $resourcePath = '/v2/quotes/{id}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
