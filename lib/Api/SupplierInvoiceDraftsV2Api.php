<?php
/**
 * SupplierInvoiceDraftsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SupplierInvoiceDraftsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierInvoiceDraftsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation supplierInvoiceDraftsV2Convert
     *
     * Converts a supplier invoice draft to a supplier invoice
     *
     * @param  string $supplier_invoice_draft_id supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceApi
     */
    public function supplierInvoiceDraftsV2Convert($supplier_invoice_draft_id)
    {
        list($response) = $this->supplierInvoiceDraftsV2ConvertWithHttpInfo($supplier_invoice_draft_id);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2ConvertWithHttpInfo
     *
     * Converts a supplier invoice draft to a supplier invoice
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2ConvertWithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceApi';
        $request = $this->supplierInvoiceDraftsV2ConvertRequest($supplier_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2ConvertAsync
     *
     * Converts a supplier invoice draft to a supplier invoice
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2ConvertAsync($supplier_invoice_draft_id)
    {
        return $this->supplierInvoiceDraftsV2ConvertAsyncWithHttpInfo($supplier_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2ConvertAsyncWithHttpInfo
     *
     * Converts a supplier invoice draft to a supplier invoice
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2ConvertAsyncWithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceApi';
        $request = $this->supplierInvoiceDraftsV2ConvertRequest($supplier_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Convert'
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2ConvertRequest($supplier_invoice_draft_id)
    {
        // verify the required parameter 'supplier_invoice_draft_id' is set
        if ($supplier_invoice_draft_id === null || (is_array($supplier_invoice_draft_id) && count($supplier_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_draft_id when calling supplierInvoiceDraftsV2Convert'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts/{supplierInvoiceDraftId}/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Delete
     *
     * Deletes a supplier invoice draft
     *
     * @param  string $supplier_invoice_draft_id supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function supplierInvoiceDraftsV2Delete($supplier_invoice_draft_id)
    {
        list($response) = $this->supplierInvoiceDraftsV2DeleteWithHttpInfo($supplier_invoice_draft_id);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2DeleteWithHttpInfo
     *
     * Deletes a supplier invoice draft
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2DeleteWithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->supplierInvoiceDraftsV2DeleteRequest($supplier_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2DeleteAsync
     *
     * Deletes a supplier invoice draft
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2DeleteAsync($supplier_invoice_draft_id)
    {
        return $this->supplierInvoiceDraftsV2DeleteAsyncWithHttpInfo($supplier_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2DeleteAsyncWithHttpInfo
     *
     * Deletes a supplier invoice draft
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2DeleteAsyncWithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->supplierInvoiceDraftsV2DeleteRequest($supplier_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Delete'
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2DeleteRequest($supplier_invoice_draft_id)
    {
        // verify the required parameter 'supplier_invoice_draft_id' is set
        if ($supplier_invoice_draft_id === null || (is_array($supplier_invoice_draft_id) && count($supplier_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_draft_id when calling supplierInvoiceDraftsV2Delete'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts/{supplierInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Get
     *
     * Get a paginated list of all supplier invoice drafts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseSupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Get()
    {
        list($response) = $this->supplierInvoiceDraftsV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2GetWithHttpInfo
     *
     * Get a paginated list of all supplier invoice drafts.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseSupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseSupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseSupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2GetAsync
     *
     * Get a paginated list of all supplier invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2GetAsync()
    {
        return $this->supplierInvoiceDraftsV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2GetAsyncWithHttpInfo
     *
     * Get a paginated list of all supplier invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseSupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2GetRequest()
    {

        $resourcePath = '/v2/supplierinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Get_0
     *
     * Get a single supplier invoice draft.
     *
     * @param  string $supplier_invoice_draft_id supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Get_0($supplier_invoice_draft_id)
    {
        list($response) = $this->supplierInvoiceDraftsV2Get_0WithHttpInfo($supplier_invoice_draft_id);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2Get_0WithHttpInfo
     *
     * Get a single supplier invoice draft.
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2Get_0WithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2Get_0Request($supplier_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2Get_0Async
     *
     * Get a single supplier invoice draft.
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2Get_0Async($supplier_invoice_draft_id)
    {
        return $this->supplierInvoiceDraftsV2Get_0AsyncWithHttpInfo($supplier_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2Get_0AsyncWithHttpInfo
     *
     * Get a single supplier invoice draft.
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2Get_0AsyncWithHttpInfo($supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2Get_0Request($supplier_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Get_0'
     *
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2Get_0Request($supplier_invoice_draft_id)
    {
        // verify the required parameter 'supplier_invoice_draft_id' is set
        if ($supplier_invoice_draft_id === null || (is_array($supplier_invoice_draft_id) && count($supplier_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_draft_id when calling supplierInvoiceDraftsV2Get_0'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts/{supplierInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Post
     *
     * Create a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body body (required)
     * @param  bool $use_default_vat_codes use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Post($body, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        list($response) = $this->supplierInvoiceDraftsV2PostWithHttpInfo($body, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2PostWithHttpInfo
     *
     * Create a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2PostWithHttpInfo($body, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PostRequest($body, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2PostAsync
     *
     * Create a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PostAsync($body, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        return $this->supplierInvoiceDraftsV2PostAsyncWithHttpInfo($body, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2PostAsyncWithHttpInfo
     *
     * Create a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PostAsyncWithHttpInfo($body, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PostRequest($body, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Post'
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2PostRequest($body, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling supplierInvoiceDraftsV2Post'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($use_default_vat_codes !== null) {
            $queryParams['useDefaultVatCodes'] = ObjectSerializer::toQueryValue($use_default_vat_codes, null);
        }
        // query params
        if ($calculate_vat_on_cost_accounts !== null) {
            $queryParams['calculateVatOnCostAccounts'] = ObjectSerializer::toQueryValue($calculate_vat_on_cost_accounts, null);
        }
        // query params
        if ($batch_process_extended_validation !== null) {
            $queryParams['batchProcessExtendedValidation'] = ObjectSerializer::toQueryValue($batch_process_extended_validation, null);
        }
        // query params
        if ($duplicate_check_extended_validation !== null) {
            $queryParams['duplicateCheckExtendedValidation'] = ObjectSerializer::toQueryValue($duplicate_check_extended_validation, null);
        }


        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_id !== null) {
            $formParams['SupplierId'] = ObjectSerializer::toFormValue($supplier_id);
        }
        // form params
        if ($bank_account_id !== null) {
            $formParams['BankAccountId'] = ObjectSerializer::toFormValue($bank_account_id);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($payment_date !== null) {
            $formParams['PaymentDate'] = ObjectSerializer::toFormValue($payment_date);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($invoice_number !== null) {
            $formParams['InvoiceNumber'] = ObjectSerializer::toFormValue($invoice_number);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat !== null) {
            $formParams['Vat'] = ObjectSerializer::toFormValue($vat);
        }
        // form params
        if ($vat_high !== null) {
            $formParams['VatHigh'] = ObjectSerializer::toFormValue($vat_high);
        }
        // form params
        if ($vat_medium !== null) {
            $formParams['VatMedium'] = ObjectSerializer::toFormValue($vat_medium);
        }
        // form params
        if ($vat_low !== null) {
            $formParams['VatLow'] = ObjectSerializer::toFormValue($vat_low);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($ocr_number !== null) {
            $formParams['OcrNumber'] = ObjectSerializer::toFormValue($ocr_number);
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($supplier_name !== null) {
            $formParams['SupplierName'] = ObjectSerializer::toFormValue($supplier_name);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // form params
        if ($is_quick_invoice !== null) {
            $formParams['IsQuickInvoice'] = ObjectSerializer::toFormValue($is_quick_invoice);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($approval_status !== null) {
            $formParams['ApprovalStatus'] = ObjectSerializer::toFormValue($approval_status);
        }
        // form params
        if ($skip_send_to_bank !== null) {
            $formParams['SkipSendToBank'] = ObjectSerializer::toFormValue($skip_send_to_bank);
        }
        // form params
        if ($allocation_periods !== null) {
            $formParams['AllocationPeriods'] = ObjectSerializer::toFormValue($allocation_periods);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Post
     *
     * Create a supplier invoice draft.
     *
     * @param  string $id id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $bank_account_id bank_account_id (required)
     * @param  \DateTime $invoice_date invoice_date (required)
     * @param  \DateTime $payment_date payment_date (required)
     * @param  \DateTime $due_date due_date (required)
     * @param  string $invoice_number invoice_number (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $vat vat (required)
     * @param  double $vat_high vat_high (required)
     * @param  double $vat_medium vat_medium (required)
     * @param  double $vat_low vat_low (required)
     * @param  bool $is_credit_invoice is_credit_invoice (required)
     * @param  string $currency_code currency_code (required)
     * @param  double $currency_rate currency_rate (required)
     * @param  string $ocr_number ocr_number (required)
     * @param  string $message message (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows rows (required)
     * @param  string $supplier_name supplier_name (required)
     * @param  string $supplier_number supplier_number (required)
     * @param  bool $self_employed_without_fixed_address self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice is_quick_invoice (required)
     * @param  bool $is_domestic is_domestic (required)
     * @param  int $approval_status approval_status (required)
     * @param  bool $skip_send_to_bank skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments attachments (required)
     * @param  bool $use_default_vat_codes use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Post($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        list($response) = $this->supplierInvoiceDraftsV2PostWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2PostWithHttpInfo
     *
     * Create a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2PostWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PostRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2PostAsync
     *
     * Create a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PostAsync($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        return $this->supplierInvoiceDraftsV2PostAsyncWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2PostAsyncWithHttpInfo
     *
     * Create a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PostAsyncWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PostRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes, $calculate_vat_on_cost_accounts, $batch_process_extended_validation, $duplicate_check_extended_validation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Post'
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  bool $use_default_vat_codes (optional)
     * @param  bool $calculate_vat_on_cost_accounts Automatic calculation of VAT based on vat code. DK, NL and SE only. If this is set to true, then vat rows will be added based on the vat code of the accounts which can be default or custom based on the \&quot;useDefaultVatCodes\&quot; parameter. (optional)
     * @param  bool $batch_process_extended_validation Validate for batch process and fiscal year. (optional)
     * @param  bool $duplicate_check_extended_validation Check if the invoice is duplicate. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2PostRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $use_default_vat_codes = null, $calculate_vat_on_cost_accounts = null, $batch_process_extended_validation = null, $duplicate_check_extended_validation = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_date' is set
        if ($invoice_date === null || (is_array($invoice_date) && count($invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_date when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'payment_date' is set
        if ($payment_date === null || (is_array($payment_date) && count($payment_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_date when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'due_date' is set
        if ($due_date === null || (is_array($due_date) && count($due_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $due_date when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'invoice_number' is set
        if ($invoice_number === null || (is_array($invoice_number) && count($invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_number when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'vat' is set
        if ($vat === null || (is_array($vat) && count($vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'vat_high' is set
        if ($vat_high === null || (is_array($vat_high) && count($vat_high) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_high when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'vat_medium' is set
        if ($vat_medium === null || (is_array($vat_medium) && count($vat_medium) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_medium when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'vat_low' is set
        if ($vat_low === null || (is_array($vat_low) && count($vat_low) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_low when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'is_credit_invoice' is set
        if ($is_credit_invoice === null || (is_array($is_credit_invoice) && count($is_credit_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_credit_invoice when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'currency_rate' is set
        if ($currency_rate === null || (is_array($currency_rate) && count($currency_rate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_rate when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'ocr_number' is set
        if ($ocr_number === null || (is_array($ocr_number) && count($ocr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ocr_number when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'supplier_name' is set
        if ($supplier_name === null || (is_array($supplier_name) && count($supplier_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_name when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'supplier_number' is set
        if ($supplier_number === null || (is_array($supplier_number) && count($supplier_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_number when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'self_employed_without_fixed_address' is set
        if ($self_employed_without_fixed_address === null || (is_array($self_employed_without_fixed_address) && count($self_employed_without_fixed_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $self_employed_without_fixed_address when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'is_quick_invoice' is set
        if ($is_quick_invoice === null || (is_array($is_quick_invoice) && count($is_quick_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_quick_invoice when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'is_domestic' is set
        if ($is_domestic === null || (is_array($is_domestic) && count($is_domestic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_domestic when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'approval_status' is set
        if ($approval_status === null || (is_array($approval_status) && count($approval_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approval_status when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'skip_send_to_bank' is set
        if ($skip_send_to_bank === null || (is_array($skip_send_to_bank) && count($skip_send_to_bank) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $skip_send_to_bank when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'allocation_periods' is set
        if ($allocation_periods === null || (is_array($allocation_periods) && count($allocation_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_periods when calling supplierInvoiceDraftsV2Post'
            );
        }
        // verify the required parameter 'attachments' is set
        if ($attachments === null || (is_array($attachments) && count($attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments when calling supplierInvoiceDraftsV2Post'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($use_default_vat_codes !== null) {
            $queryParams['useDefaultVatCodes'] = ObjectSerializer::toQueryValue($use_default_vat_codes, null);
        }
        // query params
        if ($calculate_vat_on_cost_accounts !== null) {
            $queryParams['calculateVatOnCostAccounts'] = ObjectSerializer::toQueryValue($calculate_vat_on_cost_accounts, null);
        }
        // query params
        if ($batch_process_extended_validation !== null) {
            $queryParams['batchProcessExtendedValidation'] = ObjectSerializer::toQueryValue($batch_process_extended_validation, null);
        }
        // query params
        if ($duplicate_check_extended_validation !== null) {
            $queryParams['duplicateCheckExtendedValidation'] = ObjectSerializer::toQueryValue($duplicate_check_extended_validation, null);
        }


        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_id !== null) {
            $formParams['SupplierId'] = ObjectSerializer::toFormValue($supplier_id);
        }
        // form params
        if ($bank_account_id !== null) {
            $formParams['BankAccountId'] = ObjectSerializer::toFormValue($bank_account_id);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($payment_date !== null) {
            $formParams['PaymentDate'] = ObjectSerializer::toFormValue($payment_date);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($invoice_number !== null) {
            $formParams['InvoiceNumber'] = ObjectSerializer::toFormValue($invoice_number);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat !== null) {
            $formParams['Vat'] = ObjectSerializer::toFormValue($vat);
        }
        // form params
        if ($vat_high !== null) {
            $formParams['VatHigh'] = ObjectSerializer::toFormValue($vat_high);
        }
        // form params
        if ($vat_medium !== null) {
            $formParams['VatMedium'] = ObjectSerializer::toFormValue($vat_medium);
        }
        // form params
        if ($vat_low !== null) {
            $formParams['VatLow'] = ObjectSerializer::toFormValue($vat_low);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($ocr_number !== null) {
            $formParams['OcrNumber'] = ObjectSerializer::toFormValue($ocr_number);
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($supplier_name !== null) {
            $formParams['SupplierName'] = ObjectSerializer::toFormValue($supplier_name);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // form params
        if ($is_quick_invoice !== null) {
            $formParams['IsQuickInvoice'] = ObjectSerializer::toFormValue($is_quick_invoice);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($approval_status !== null) {
            $formParams['ApprovalStatus'] = ObjectSerializer::toFormValue($approval_status);
        }
        // form params
        if ($skip_send_to_bank !== null) {
            $formParams['SkipSendToBank'] = ObjectSerializer::toFormValue($skip_send_to_bank);
        }
        // form params
        if ($allocation_periods !== null) {
            $formParams['AllocationPeriods'] = ObjectSerializer::toFormValue($allocation_periods);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Put
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body body (required)
     * @param  string $supplier_invoice_draft_id supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Put($body, $supplier_invoice_draft_id)
    {
        list($response) = $this->supplierInvoiceDraftsV2PutWithHttpInfo($body, $supplier_invoice_draft_id);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2PutWithHttpInfo
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2PutWithHttpInfo($body, $supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PutRequest($body, $supplier_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2PutAsync
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PutAsync($body, $supplier_invoice_draft_id)
    {
        return $this->supplierInvoiceDraftsV2PutAsyncWithHttpInfo($body, $supplier_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2PutAsyncWithHttpInfo
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PutAsyncWithHttpInfo($body, $supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PutRequest($body, $supplier_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Put'
     *
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftApi $body (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2PutRequest($body, $supplier_invoice_draft_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'supplier_invoice_draft_id' is set
        if ($supplier_invoice_draft_id === null || (is_array($supplier_invoice_draft_id) && count($supplier_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_draft_id when calling supplierInvoiceDraftsV2Put'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts/{supplierInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_id !== null) {
            $formParams['SupplierId'] = ObjectSerializer::toFormValue($supplier_id);
        }
        // form params
        if ($bank_account_id !== null) {
            $formParams['BankAccountId'] = ObjectSerializer::toFormValue($bank_account_id);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($payment_date !== null) {
            $formParams['PaymentDate'] = ObjectSerializer::toFormValue($payment_date);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($invoice_number !== null) {
            $formParams['InvoiceNumber'] = ObjectSerializer::toFormValue($invoice_number);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat !== null) {
            $formParams['Vat'] = ObjectSerializer::toFormValue($vat);
        }
        // form params
        if ($vat_high !== null) {
            $formParams['VatHigh'] = ObjectSerializer::toFormValue($vat_high);
        }
        // form params
        if ($vat_medium !== null) {
            $formParams['VatMedium'] = ObjectSerializer::toFormValue($vat_medium);
        }
        // form params
        if ($vat_low !== null) {
            $formParams['VatLow'] = ObjectSerializer::toFormValue($vat_low);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($ocr_number !== null) {
            $formParams['OcrNumber'] = ObjectSerializer::toFormValue($ocr_number);
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($supplier_name !== null) {
            $formParams['SupplierName'] = ObjectSerializer::toFormValue($supplier_name);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // form params
        if ($is_quick_invoice !== null) {
            $formParams['IsQuickInvoice'] = ObjectSerializer::toFormValue($is_quick_invoice);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($approval_status !== null) {
            $formParams['ApprovalStatus'] = ObjectSerializer::toFormValue($approval_status);
        }
        // form params
        if ($skip_send_to_bank !== null) {
            $formParams['SkipSendToBank'] = ObjectSerializer::toFormValue($skip_send_to_bank);
        }
        // form params
        if ($allocation_periods !== null) {
            $formParams['AllocationPeriods'] = ObjectSerializer::toFormValue($allocation_periods);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation supplierInvoiceDraftsV2Put
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  string $id id (required)
     * @param  string $supplier_id supplier_id (required)
     * @param  string $bank_account_id bank_account_id (required)
     * @param  \DateTime $invoice_date invoice_date (required)
     * @param  \DateTime $payment_date payment_date (required)
     * @param  \DateTime $due_date due_date (required)
     * @param  string $invoice_number invoice_number (required)
     * @param  double $total_amount total_amount (required)
     * @param  double $vat vat (required)
     * @param  double $vat_high vat_high (required)
     * @param  double $vat_medium vat_medium (required)
     * @param  double $vat_low vat_low (required)
     * @param  bool $is_credit_invoice is_credit_invoice (required)
     * @param  string $currency_code currency_code (required)
     * @param  double $currency_rate currency_rate (required)
     * @param  string $ocr_number ocr_number (required)
     * @param  string $message message (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows rows (required)
     * @param  string $supplier_name supplier_name (required)
     * @param  string $supplier_number supplier_number (required)
     * @param  bool $self_employed_without_fixed_address self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice is_quick_invoice (required)
     * @param  bool $is_domestic is_domestic (required)
     * @param  int $approval_status approval_status (required)
     * @param  bool $skip_send_to_bank skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments attachments (required)
     * @param  string $supplier_invoice_draft_id supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierInvoiceDraftApi
     */
    public function supplierInvoiceDraftsV2Put($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
    {
        list($response) = $this->supplierInvoiceDraftsV2PutWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id);
        return $response;
    }

    /**
     * Operation supplierInvoiceDraftsV2PutWithHttpInfo
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function supplierInvoiceDraftsV2PutWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PutRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation supplierInvoiceDraftsV2PutAsync
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PutAsync($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
    {
        return $this->supplierInvoiceDraftsV2PutAsyncWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation supplierInvoiceDraftsV2PutAsyncWithHttpInfo
     *
     * Replace content in a supplier invoice draft.
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function supplierInvoiceDraftsV2PutAsyncWithHttpInfo($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierInvoiceDraftApi';
        $request = $this->supplierInvoiceDraftsV2PutRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'supplierInvoiceDraftsV2Put'
     *
     * @param  string $id (required)
     * @param  string $supplier_id (required)
     * @param  string $bank_account_id (required)
     * @param  \DateTime $invoice_date (required)
     * @param  \DateTime $payment_date (required)
     * @param  \DateTime $due_date (required)
     * @param  string $invoice_number (required)
     * @param  double $total_amount (required)
     * @param  double $vat (required)
     * @param  double $vat_high (required)
     * @param  double $vat_medium (required)
     * @param  double $vat_low (required)
     * @param  bool $is_credit_invoice (required)
     * @param  string $currency_code (required)
     * @param  double $currency_rate (required)
     * @param  string $ocr_number (required)
     * @param  string $message (required)
     * @param  \DateTime $created_utc (required)
     * @param  \DateTime $modified_utc (required)
     * @param  \Swagger\Client\Model\SupplierInvoiceDraftRowApi[] $rows (required)
     * @param  string $supplier_name (required)
     * @param  string $supplier_number (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  bool $is_quick_invoice (required)
     * @param  bool $is_domestic (required)
     * @param  int $approval_status (required)
     * @param  bool $skip_send_to_bank (required)
     * @param  \Swagger\Client\Model\AllocationPeriodApi[] $allocation_periods (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  string $supplier_invoice_draft_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function supplierInvoiceDraftsV2PutRequest($id, $supplier_id, $bank_account_id, $invoice_date, $payment_date, $due_date, $invoice_number, $total_amount, $vat, $vat_high, $vat_medium, $vat_low, $is_credit_invoice, $currency_code, $currency_rate, $ocr_number, $message, $created_utc, $modified_utc, $rows, $supplier_name, $supplier_number, $self_employed_without_fixed_address, $is_quick_invoice, $is_domestic, $approval_status, $skip_send_to_bank, $allocation_periods, $attachments, $supplier_invoice_draft_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'bank_account_id' is set
        if ($bank_account_id === null || (is_array($bank_account_id) && count($bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_id when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_date' is set
        if ($invoice_date === null || (is_array($invoice_date) && count($invoice_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_date when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'payment_date' is set
        if ($payment_date === null || (is_array($payment_date) && count($payment_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_date when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'due_date' is set
        if ($due_date === null || (is_array($due_date) && count($due_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $due_date when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'invoice_number' is set
        if ($invoice_number === null || (is_array($invoice_number) && count($invoice_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_number when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'total_amount' is set
        if ($total_amount === null || (is_array($total_amount) && count($total_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $total_amount when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'vat' is set
        if ($vat === null || (is_array($vat) && count($vat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'vat_high' is set
        if ($vat_high === null || (is_array($vat_high) && count($vat_high) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_high when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'vat_medium' is set
        if ($vat_medium === null || (is_array($vat_medium) && count($vat_medium) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_medium when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'vat_low' is set
        if ($vat_low === null || (is_array($vat_low) && count($vat_low) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_low when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'is_credit_invoice' is set
        if ($is_credit_invoice === null || (is_array($is_credit_invoice) && count($is_credit_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_credit_invoice when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'currency_rate' is set
        if ($currency_rate === null || (is_array($currency_rate) && count($currency_rate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_rate when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'ocr_number' is set
        if ($ocr_number === null || (is_array($ocr_number) && count($ocr_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ocr_number when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'supplier_name' is set
        if ($supplier_name === null || (is_array($supplier_name) && count($supplier_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_name when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'supplier_number' is set
        if ($supplier_number === null || (is_array($supplier_number) && count($supplier_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_number when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'self_employed_without_fixed_address' is set
        if ($self_employed_without_fixed_address === null || (is_array($self_employed_without_fixed_address) && count($self_employed_without_fixed_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $self_employed_without_fixed_address when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'is_quick_invoice' is set
        if ($is_quick_invoice === null || (is_array($is_quick_invoice) && count($is_quick_invoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_quick_invoice when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'is_domestic' is set
        if ($is_domestic === null || (is_array($is_domestic) && count($is_domestic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_domestic when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'approval_status' is set
        if ($approval_status === null || (is_array($approval_status) && count($approval_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approval_status when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'skip_send_to_bank' is set
        if ($skip_send_to_bank === null || (is_array($skip_send_to_bank) && count($skip_send_to_bank) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $skip_send_to_bank when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'allocation_periods' is set
        if ($allocation_periods === null || (is_array($allocation_periods) && count($allocation_periods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_periods when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'attachments' is set
        if ($attachments === null || (is_array($attachments) && count($attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments when calling supplierInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'supplier_invoice_draft_id' is set
        if ($supplier_invoice_draft_id === null || (is_array($supplier_invoice_draft_id) && count($supplier_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_invoice_draft_id when calling supplierInvoiceDraftsV2Put'
            );
        }

        $resourcePath = '/v2/supplierinvoicedrafts/{supplierInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($supplier_invoice_draft_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_id !== null) {
            $formParams['SupplierId'] = ObjectSerializer::toFormValue($supplier_id);
        }
        // form params
        if ($bank_account_id !== null) {
            $formParams['BankAccountId'] = ObjectSerializer::toFormValue($bank_account_id);
        }
        // form params
        if ($invoice_date !== null) {
            $formParams['InvoiceDate'] = ObjectSerializer::toFormValue($invoice_date);
        }
        // form params
        if ($payment_date !== null) {
            $formParams['PaymentDate'] = ObjectSerializer::toFormValue($payment_date);
        }
        // form params
        if ($due_date !== null) {
            $formParams['DueDate'] = ObjectSerializer::toFormValue($due_date);
        }
        // form params
        if ($invoice_number !== null) {
            $formParams['InvoiceNumber'] = ObjectSerializer::toFormValue($invoice_number);
        }
        // form params
        if ($total_amount !== null) {
            $formParams['TotalAmount'] = ObjectSerializer::toFormValue($total_amount);
        }
        // form params
        if ($vat !== null) {
            $formParams['Vat'] = ObjectSerializer::toFormValue($vat);
        }
        // form params
        if ($vat_high !== null) {
            $formParams['VatHigh'] = ObjectSerializer::toFormValue($vat_high);
        }
        // form params
        if ($vat_medium !== null) {
            $formParams['VatMedium'] = ObjectSerializer::toFormValue($vat_medium);
        }
        // form params
        if ($vat_low !== null) {
            $formParams['VatLow'] = ObjectSerializer::toFormValue($vat_low);
        }
        // form params
        if ($is_credit_invoice !== null) {
            $formParams['IsCreditInvoice'] = ObjectSerializer::toFormValue($is_credit_invoice);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($currency_rate !== null) {
            $formParams['CurrencyRate'] = ObjectSerializer::toFormValue($currency_rate);
        }
        // form params
        if ($ocr_number !== null) {
            $formParams['OcrNumber'] = ObjectSerializer::toFormValue($ocr_number);
        }
        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($supplier_name !== null) {
            $formParams['SupplierName'] = ObjectSerializer::toFormValue($supplier_name);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // form params
        if ($is_quick_invoice !== null) {
            $formParams['IsQuickInvoice'] = ObjectSerializer::toFormValue($is_quick_invoice);
        }
        // form params
        if ($is_domestic !== null) {
            $formParams['IsDomestic'] = ObjectSerializer::toFormValue($is_domestic);
        }
        // form params
        if ($approval_status !== null) {
            $formParams['ApprovalStatus'] = ObjectSerializer::toFormValue($approval_status);
        }
        // form params
        if ($skip_send_to_bank !== null) {
            $formParams['SkipSendToBank'] = ObjectSerializer::toFormValue($skip_send_to_bank);
        }
        // form params
        if ($allocation_periods !== null) {
            $formParams['AllocationPeriods'] = ObjectSerializer::toFormValue($allocation_periods);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
