<?php
/**
 * SuppliersV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SuppliersV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuppliersV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation suppliersV2Delete
     *
     * Deletes a supplier
     *
     * @param  string $supplier_id supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function suppliersV2Delete($supplier_id)
    {
        list($response) = $this->suppliersV2DeleteWithHttpInfo($supplier_id);
        return $response;
    }

    /**
     * Operation suppliersV2DeleteWithHttpInfo
     *
     * Deletes a supplier
     *
     * @param  string $supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2DeleteWithHttpInfo($supplier_id)
    {
        $returnType = 'object';
        $request = $this->suppliersV2DeleteRequest($supplier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2DeleteAsync
     *
     * Deletes a supplier
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2DeleteAsync($supplier_id)
    {
        return $this->suppliersV2DeleteAsyncWithHttpInfo($supplier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2DeleteAsyncWithHttpInfo
     *
     * Deletes a supplier
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2DeleteAsyncWithHttpInfo($supplier_id)
    {
        $returnType = 'object';
        $request = $this->suppliersV2DeleteRequest($supplier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Delete'
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2DeleteRequest($supplier_id)
    {
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling suppliersV2Delete'
            );
        }

        $resourcePath = '/v2/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Get
     *
     * Get a list of suppliers.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseSupplierApi
     */
    public function suppliersV2Get()
    {
        list($response) = $this->suppliersV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation suppliersV2GetWithHttpInfo
     *
     * Get a list of suppliers.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseSupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseSupplierApi';
        $request = $this->suppliersV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseSupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2GetAsync
     *
     * Get a list of suppliers.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2GetAsync()
    {
        return $this->suppliersV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2GetAsyncWithHttpInfo
     *
     * Get a list of suppliers.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseSupplierApi';
        $request = $this->suppliersV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2GetRequest()
    {

        $resourcePath = '/v2/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Get_0
     *
     * Get a specific supplier.
     *
     * @param  string $supplier_id supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierApi
     */
    public function suppliersV2Get_0($supplier_id)
    {
        list($response) = $this->suppliersV2Get_0WithHttpInfo($supplier_id);
        return $response;
    }

    /**
     * Operation suppliersV2Get_0WithHttpInfo
     *
     * Get a specific supplier.
     *
     * @param  string $supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2Get_0WithHttpInfo($supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2Get_0Request($supplier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2Get_0Async
     *
     * Get a specific supplier.
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2Get_0Async($supplier_id)
    {
        return $this->suppliersV2Get_0AsyncWithHttpInfo($supplier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2Get_0AsyncWithHttpInfo
     *
     * Get a specific supplier.
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2Get_0AsyncWithHttpInfo($supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2Get_0Request($supplier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Get_0'
     *
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2Get_0Request($supplier_id)
    {
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling suppliersV2Get_0'
            );
        }

        $resourcePath = '/v2/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Post
     *
     * Post a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierApi
     */
    public function suppliersV2Post($body)
    {
        list($response) = $this->suppliersV2PostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation suppliersV2PostWithHttpInfo
     *
     * Post a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2PostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2PostAsync
     *
     * Post a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PostAsync($body)
    {
        return $this->suppliersV2PostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2PostAsyncWithHttpInfo
     *
     * Post a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Post'
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2PostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling suppliersV2Post'
            );
        }

        $resourcePath = '/v2/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($automatic_payment_service !== null) {
            $formParams['AutomaticPaymentService'] = ObjectSerializer::toFormValue($automatic_payment_service);
        }
        // form params
        if ($bank_account_number !== null) {
            $formParams['BankAccountNumber'] = ObjectSerializer::toFormValue($bank_account_number);
        }
        // form params
        if ($bank_bban !== null) {
            $formParams['BankBban'] = ObjectSerializer::toFormValue($bank_bban);
        }
        // form params
        if ($bank_bic !== null) {
            $formParams['BankBic'] = ObjectSerializer::toFormValue($bank_bic);
        }
        // form params
        if ($bank_code !== null) {
            $formParams['BankCode'] = ObjectSerializer::toFormValue($bank_code);
        }
        // form params
        if ($bank_country_code !== null) {
            $formParams['BankCountryCode'] = ObjectSerializer::toFormValue($bank_country_code);
        }
        // form params
        if ($bankgiro_number !== null) {
            $formParams['BankgiroNumber'] = ObjectSerializer::toFormValue($bankgiro_number);
        }
        // form params
        if ($bank_iban !== null) {
            $formParams['BankIban'] = ObjectSerializer::toFormValue($bank_iban);
        }
        // form params
        if ($bank_name !== null) {
            $formParams['BankName'] = ObjectSerializer::toFormValue($bank_name);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($plusgiro_number !== null) {
            $formParams['PlusgiroNumber'] = ObjectSerializer::toFormValue($plusgiro_number);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($bank_fee_code !== null) {
            $formParams['BankFeeCode'] = ObjectSerializer::toFormValue($bank_fee_code);
        }
        // form params
        if ($pay_from_bank_account_id !== null) {
            $formParams['PayFromBankAccountId'] = ObjectSerializer::toFormValue($pay_from_bank_account_id);
        }
        // form params
        if ($foreign_payment_code_id !== null) {
            $formParams['ForeignPaymentCodeId'] = ObjectSerializer::toFormValue($foreign_payment_code_id);
        }
        // form params
        if ($uses_payment_reference_numbers !== null) {
            $formParams['UsesPaymentReferenceNumbers'] = ObjectSerializer::toFormValue($uses_payment_reference_numbers);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Post
     *
     * Post a supplier
     *
     * @param  string $id id (required)
     * @param  string $supplier_number supplier_number (required)
     * @param  string $address1 address1 (required)
     * @param  string $address2 address2 (required)
     * @param  bool $automatic_payment_service automatic_payment_service (required)
     * @param  string $bank_account_number bank_account_number (required)
     * @param  string $bank_bban bank_bban (required)
     * @param  string $bank_bic bank_bic (required)
     * @param  string $bank_code bank_code (required)
     * @param  string $bank_country_code bank_country_code (required)
     * @param  string $bankgiro_number bankgiro_number (required)
     * @param  string $bank_iban bank_iban (required)
     * @param  string $bank_name bank_name (required)
     * @param  string $city city (required)
     * @param  string $contact_person_email contact_person_email (required)
     * @param  string $contact_person_mobile contact_person_mobile (required)
     * @param  string $contact_person_name contact_person_name (required)
     * @param  string $contact_person_phone contact_person_phone (required)
     * @param  string $corporate_identity_number corporate_identity_number (required)
     * @param  string $country_code country_code (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  string $currency_code currency_code (required)
     * @param  string $email_address email_address (required)
     * @param  string $mobile_phone mobile_phone (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  string $name name (required)
     * @param  string $note note (required)
     * @param  string $plusgiro_number plusgiro_number (required)
     * @param  string $postal_code postal_code (required)
     * @param  string $telephone telephone (required)
     * @param  string $terms_of_payment_id terms_of_payment_id (required)
     * @param  string $vat_number vat_number (required)
     * @param  string $www_address www_address (required)
     * @param  int $bank_fee_code bank_fee_code (required)
     * @param  string $pay_from_bank_account_id pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers uses_payment_reference_numbers (required)
     * @param  bool $is_active is_active (required)
     * @param  bool $self_employed_without_fixed_address self_employed_without_fixed_address (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierApi
     */
    public function suppliersV2Post($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
    {
        list($response) = $this->suppliersV2PostWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address);
        return $response;
    }

    /**
     * Operation suppliersV2PostWithHttpInfo
     *
     * Post a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2PostWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PostRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2PostAsync
     *
     * Post a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PostAsync($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
    {
        return $this->suppliersV2PostAsyncWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2PostAsyncWithHttpInfo
     *
     * Post a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PostAsyncWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PostRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Post'
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2PostRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'supplier_number' is set
        if ($supplier_number === null || (is_array($supplier_number) && count($supplier_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'address1' is set
        if ($address1 === null || (is_array($address1) && count($address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address1 when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'address2' is set
        if ($address2 === null || (is_array($address2) && count($address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address2 when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'automatic_payment_service' is set
        if ($automatic_payment_service === null || (is_array($automatic_payment_service) && count($automatic_payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automatic_payment_service when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_account_number' is set
        if ($bank_account_number === null || (is_array($bank_account_number) && count($bank_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_bban' is set
        if ($bank_bban === null || (is_array($bank_bban) && count($bank_bban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_bban when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_bic' is set
        if ($bank_bic === null || (is_array($bank_bic) && count($bank_bic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_bic when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_code' is set
        if ($bank_code === null || (is_array($bank_code) && count($bank_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_country_code' is set
        if ($bank_country_code === null || (is_array($bank_country_code) && count($bank_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_country_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bankgiro_number' is set
        if ($bankgiro_number === null || (is_array($bankgiro_number) && count($bankgiro_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankgiro_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_iban' is set
        if ($bank_iban === null || (is_array($bank_iban) && count($bank_iban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_iban when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_name' is set
        if ($bank_name === null || (is_array($bank_name) && count($bank_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_name when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'contact_person_email' is set
        if ($contact_person_email === null || (is_array($contact_person_email) && count($contact_person_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_email when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'contact_person_mobile' is set
        if ($contact_person_mobile === null || (is_array($contact_person_mobile) && count($contact_person_mobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_mobile when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'contact_person_name' is set
        if ($contact_person_name === null || (is_array($contact_person_name) && count($contact_person_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_name when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'contact_person_phone' is set
        if ($contact_person_phone === null || (is_array($contact_person_phone) && count($contact_person_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_phone when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'corporate_identity_number' is set
        if ($corporate_identity_number === null || (is_array($corporate_identity_number) && count($corporate_identity_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_identity_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'mobile_phone' is set
        if ($mobile_phone === null || (is_array($mobile_phone) && count($mobile_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mobile_phone when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'note' is set
        if ($note === null || (is_array($note) && count($note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'plusgiro_number' is set
        if ($plusgiro_number === null || (is_array($plusgiro_number) && count($plusgiro_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plusgiro_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'postal_code' is set
        if ($postal_code === null || (is_array($postal_code) && count($postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postal_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'terms_of_payment_id' is set
        if ($terms_of_payment_id === null || (is_array($terms_of_payment_id) && count($terms_of_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment_id when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'vat_number' is set
        if ($vat_number === null || (is_array($vat_number) && count($vat_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_number when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'www_address' is set
        if ($www_address === null || (is_array($www_address) && count($www_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $www_address when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'bank_fee_code' is set
        if ($bank_fee_code === null || (is_array($bank_fee_code) && count($bank_fee_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_fee_code when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'pay_from_bank_account_id' is set
        if ($pay_from_bank_account_id === null || (is_array($pay_from_bank_account_id) && count($pay_from_bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_from_bank_account_id when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'foreign_payment_code_id' is set
        if ($foreign_payment_code_id === null || (is_array($foreign_payment_code_id) && count($foreign_payment_code_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $foreign_payment_code_id when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'uses_payment_reference_numbers' is set
        if ($uses_payment_reference_numbers === null || (is_array($uses_payment_reference_numbers) && count($uses_payment_reference_numbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_payment_reference_numbers when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling suppliersV2Post'
            );
        }
        // verify the required parameter 'self_employed_without_fixed_address' is set
        if ($self_employed_without_fixed_address === null || (is_array($self_employed_without_fixed_address) && count($self_employed_without_fixed_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $self_employed_without_fixed_address when calling suppliersV2Post'
            );
        }

        $resourcePath = '/v2/suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($automatic_payment_service !== null) {
            $formParams['AutomaticPaymentService'] = ObjectSerializer::toFormValue($automatic_payment_service);
        }
        // form params
        if ($bank_account_number !== null) {
            $formParams['BankAccountNumber'] = ObjectSerializer::toFormValue($bank_account_number);
        }
        // form params
        if ($bank_bban !== null) {
            $formParams['BankBban'] = ObjectSerializer::toFormValue($bank_bban);
        }
        // form params
        if ($bank_bic !== null) {
            $formParams['BankBic'] = ObjectSerializer::toFormValue($bank_bic);
        }
        // form params
        if ($bank_code !== null) {
            $formParams['BankCode'] = ObjectSerializer::toFormValue($bank_code);
        }
        // form params
        if ($bank_country_code !== null) {
            $formParams['BankCountryCode'] = ObjectSerializer::toFormValue($bank_country_code);
        }
        // form params
        if ($bankgiro_number !== null) {
            $formParams['BankgiroNumber'] = ObjectSerializer::toFormValue($bankgiro_number);
        }
        // form params
        if ($bank_iban !== null) {
            $formParams['BankIban'] = ObjectSerializer::toFormValue($bank_iban);
        }
        // form params
        if ($bank_name !== null) {
            $formParams['BankName'] = ObjectSerializer::toFormValue($bank_name);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($plusgiro_number !== null) {
            $formParams['PlusgiroNumber'] = ObjectSerializer::toFormValue($plusgiro_number);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($bank_fee_code !== null) {
            $formParams['BankFeeCode'] = ObjectSerializer::toFormValue($bank_fee_code);
        }
        // form params
        if ($pay_from_bank_account_id !== null) {
            $formParams['PayFromBankAccountId'] = ObjectSerializer::toFormValue($pay_from_bank_account_id);
        }
        // form params
        if ($foreign_payment_code_id !== null) {
            $formParams['ForeignPaymentCodeId'] = ObjectSerializer::toFormValue($foreign_payment_code_id);
        }
        // form params
        if ($uses_payment_reference_numbers !== null) {
            $formParams['UsesPaymentReferenceNumbers'] = ObjectSerializer::toFormValue($uses_payment_reference_numbers);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Put
     *
     * Replace a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body body (required)
     * @param  string $supplier_id supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierApi
     */
    public function suppliersV2Put($body, $supplier_id)
    {
        list($response) = $this->suppliersV2PutWithHttpInfo($body, $supplier_id);
        return $response;
    }

    /**
     * Operation suppliersV2PutWithHttpInfo
     *
     * Replace a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     * @param  string $supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2PutWithHttpInfo($body, $supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PutRequest($body, $supplier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2PutAsync
     *
     * Replace a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PutAsync($body, $supplier_id)
    {
        return $this->suppliersV2PutAsyncWithHttpInfo($body, $supplier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2PutAsyncWithHttpInfo
     *
     * Replace a supplier
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PutAsyncWithHttpInfo($body, $supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PutRequest($body, $supplier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Put'
     *
     * @param  \Swagger\Client\Model\SupplierApi $body (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2PutRequest($body, $supplier_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling suppliersV2Put'
            );
        }

        $resourcePath = '/v2/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($automatic_payment_service !== null) {
            $formParams['AutomaticPaymentService'] = ObjectSerializer::toFormValue($automatic_payment_service);
        }
        // form params
        if ($bank_account_number !== null) {
            $formParams['BankAccountNumber'] = ObjectSerializer::toFormValue($bank_account_number);
        }
        // form params
        if ($bank_bban !== null) {
            $formParams['BankBban'] = ObjectSerializer::toFormValue($bank_bban);
        }
        // form params
        if ($bank_bic !== null) {
            $formParams['BankBic'] = ObjectSerializer::toFormValue($bank_bic);
        }
        // form params
        if ($bank_code !== null) {
            $formParams['BankCode'] = ObjectSerializer::toFormValue($bank_code);
        }
        // form params
        if ($bank_country_code !== null) {
            $formParams['BankCountryCode'] = ObjectSerializer::toFormValue($bank_country_code);
        }
        // form params
        if ($bankgiro_number !== null) {
            $formParams['BankgiroNumber'] = ObjectSerializer::toFormValue($bankgiro_number);
        }
        // form params
        if ($bank_iban !== null) {
            $formParams['BankIban'] = ObjectSerializer::toFormValue($bank_iban);
        }
        // form params
        if ($bank_name !== null) {
            $formParams['BankName'] = ObjectSerializer::toFormValue($bank_name);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($plusgiro_number !== null) {
            $formParams['PlusgiroNumber'] = ObjectSerializer::toFormValue($plusgiro_number);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($bank_fee_code !== null) {
            $formParams['BankFeeCode'] = ObjectSerializer::toFormValue($bank_fee_code);
        }
        // form params
        if ($pay_from_bank_account_id !== null) {
            $formParams['PayFromBankAccountId'] = ObjectSerializer::toFormValue($pay_from_bank_account_id);
        }
        // form params
        if ($foreign_payment_code_id !== null) {
            $formParams['ForeignPaymentCodeId'] = ObjectSerializer::toFormValue($foreign_payment_code_id);
        }
        // form params
        if ($uses_payment_reference_numbers !== null) {
            $formParams['UsesPaymentReferenceNumbers'] = ObjectSerializer::toFormValue($uses_payment_reference_numbers);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation suppliersV2Put
     *
     * Replace a supplier
     *
     * @param  string $id id (required)
     * @param  string $supplier_number supplier_number (required)
     * @param  string $address1 address1 (required)
     * @param  string $address2 address2 (required)
     * @param  bool $automatic_payment_service automatic_payment_service (required)
     * @param  string $bank_account_number bank_account_number (required)
     * @param  string $bank_bban bank_bban (required)
     * @param  string $bank_bic bank_bic (required)
     * @param  string $bank_code bank_code (required)
     * @param  string $bank_country_code bank_country_code (required)
     * @param  string $bankgiro_number bankgiro_number (required)
     * @param  string $bank_iban bank_iban (required)
     * @param  string $bank_name bank_name (required)
     * @param  string $city city (required)
     * @param  string $contact_person_email contact_person_email (required)
     * @param  string $contact_person_mobile contact_person_mobile (required)
     * @param  string $contact_person_name contact_person_name (required)
     * @param  string $contact_person_phone contact_person_phone (required)
     * @param  string $corporate_identity_number corporate_identity_number (required)
     * @param  string $country_code country_code (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  string $currency_code currency_code (required)
     * @param  string $email_address email_address (required)
     * @param  string $mobile_phone mobile_phone (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  string $name name (required)
     * @param  string $note note (required)
     * @param  string $plusgiro_number plusgiro_number (required)
     * @param  string $postal_code postal_code (required)
     * @param  string $telephone telephone (required)
     * @param  string $terms_of_payment_id terms_of_payment_id (required)
     * @param  string $vat_number vat_number (required)
     * @param  string $www_address www_address (required)
     * @param  int $bank_fee_code bank_fee_code (required)
     * @param  string $pay_from_bank_account_id pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers uses_payment_reference_numbers (required)
     * @param  bool $is_active is_active (required)
     * @param  bool $self_employed_without_fixed_address self_employed_without_fixed_address (required)
     * @param  string $supplier_id supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplierApi
     */
    public function suppliersV2Put($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
    {
        list($response) = $this->suppliersV2PutWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id);
        return $response;
    }

    /**
     * Operation suppliersV2PutWithHttpInfo
     *
     * Replace a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  string $supplier_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplierApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function suppliersV2PutWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PutRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplierApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation suppliersV2PutAsync
     *
     * Replace a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PutAsync($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
    {
        return $this->suppliersV2PutAsyncWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation suppliersV2PutAsyncWithHttpInfo
     *
     * Replace a supplier
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function suppliersV2PutAsyncWithHttpInfo($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
    {
        $returnType = '\Swagger\Client\Model\SupplierApi';
        $request = $this->suppliersV2PutRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'suppliersV2Put'
     *
     * @param  string $id (required)
     * @param  string $supplier_number (required)
     * @param  string $address1 (required)
     * @param  string $address2 (required)
     * @param  bool $automatic_payment_service (required)
     * @param  string $bank_account_number (required)
     * @param  string $bank_bban (required)
     * @param  string $bank_bic (required)
     * @param  string $bank_code (required)
     * @param  string $bank_country_code (required)
     * @param  string $bankgiro_number (required)
     * @param  string $bank_iban (required)
     * @param  string $bank_name (required)
     * @param  string $city (required)
     * @param  string $contact_person_email (required)
     * @param  string $contact_person_mobile (required)
     * @param  string $contact_person_name (required)
     * @param  string $contact_person_phone (required)
     * @param  string $corporate_identity_number (required)
     * @param  string $country_code (required)
     * @param  \DateTime $created_utc (required)
     * @param  string $currency_code (required)
     * @param  string $email_address (required)
     * @param  string $mobile_phone (required)
     * @param  \DateTime $modified_utc (required)
     * @param  string $name (required)
     * @param  string $note (required)
     * @param  string $plusgiro_number (required)
     * @param  string $postal_code (required)
     * @param  string $telephone (required)
     * @param  string $terms_of_payment_id (required)
     * @param  string $vat_number (required)
     * @param  string $www_address (required)
     * @param  int $bank_fee_code (required)
     * @param  string $pay_from_bank_account_id (required)
     * @param  string $foreign_payment_code_id (required)
     * @param  bool $uses_payment_reference_numbers (required)
     * @param  bool $is_active (required)
     * @param  bool $self_employed_without_fixed_address (required)
     * @param  string $supplier_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function suppliersV2PutRequest($id, $supplier_number, $address1, $address2, $automatic_payment_service, $bank_account_number, $bank_bban, $bank_bic, $bank_code, $bank_country_code, $bankgiro_number, $bank_iban, $bank_name, $city, $contact_person_email, $contact_person_mobile, $contact_person_name, $contact_person_phone, $corporate_identity_number, $country_code, $created_utc, $currency_code, $email_address, $mobile_phone, $modified_utc, $name, $note, $plusgiro_number, $postal_code, $telephone, $terms_of_payment_id, $vat_number, $www_address, $bank_fee_code, $pay_from_bank_account_id, $foreign_payment_code_id, $uses_payment_reference_numbers, $is_active, $self_employed_without_fixed_address, $supplier_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'supplier_number' is set
        if ($supplier_number === null || (is_array($supplier_number) && count($supplier_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'address1' is set
        if ($address1 === null || (is_array($address1) && count($address1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address1 when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'address2' is set
        if ($address2 === null || (is_array($address2) && count($address2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address2 when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'automatic_payment_service' is set
        if ($automatic_payment_service === null || (is_array($automatic_payment_service) && count($automatic_payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $automatic_payment_service when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_account_number' is set
        if ($bank_account_number === null || (is_array($bank_account_number) && count($bank_account_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_account_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_bban' is set
        if ($bank_bban === null || (is_array($bank_bban) && count($bank_bban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_bban when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_bic' is set
        if ($bank_bic === null || (is_array($bank_bic) && count($bank_bic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_bic when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_code' is set
        if ($bank_code === null || (is_array($bank_code) && count($bank_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_country_code' is set
        if ($bank_country_code === null || (is_array($bank_country_code) && count($bank_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_country_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bankgiro_number' is set
        if ($bankgiro_number === null || (is_array($bankgiro_number) && count($bankgiro_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankgiro_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_iban' is set
        if ($bank_iban === null || (is_array($bank_iban) && count($bank_iban) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_iban when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_name' is set
        if ($bank_name === null || (is_array($bank_name) && count($bank_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_name when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'contact_person_email' is set
        if ($contact_person_email === null || (is_array($contact_person_email) && count($contact_person_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_email when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'contact_person_mobile' is set
        if ($contact_person_mobile === null || (is_array($contact_person_mobile) && count($contact_person_mobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_mobile when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'contact_person_name' is set
        if ($contact_person_name === null || (is_array($contact_person_name) && count($contact_person_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_name when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'contact_person_phone' is set
        if ($contact_person_phone === null || (is_array($contact_person_phone) && count($contact_person_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_person_phone when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'corporate_identity_number' is set
        if ($corporate_identity_number === null || (is_array($corporate_identity_number) && count($corporate_identity_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_identity_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'currency_code' is set
        if ($currency_code === null || (is_array($currency_code) && count($currency_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'email_address' is set
        if ($email_address === null || (is_array($email_address) && count($email_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_address when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'mobile_phone' is set
        if ($mobile_phone === null || (is_array($mobile_phone) && count($mobile_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mobile_phone when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'note' is set
        if ($note === null || (is_array($note) && count($note) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'plusgiro_number' is set
        if ($plusgiro_number === null || (is_array($plusgiro_number) && count($plusgiro_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plusgiro_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'postal_code' is set
        if ($postal_code === null || (is_array($postal_code) && count($postal_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postal_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'telephone' is set
        if ($telephone === null || (is_array($telephone) && count($telephone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $telephone when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'terms_of_payment_id' is set
        if ($terms_of_payment_id === null || (is_array($terms_of_payment_id) && count($terms_of_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $terms_of_payment_id when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'vat_number' is set
        if ($vat_number === null || (is_array($vat_number) && count($vat_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vat_number when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'www_address' is set
        if ($www_address === null || (is_array($www_address) && count($www_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $www_address when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'bank_fee_code' is set
        if ($bank_fee_code === null || (is_array($bank_fee_code) && count($bank_fee_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bank_fee_code when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'pay_from_bank_account_id' is set
        if ($pay_from_bank_account_id === null || (is_array($pay_from_bank_account_id) && count($pay_from_bank_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pay_from_bank_account_id when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'foreign_payment_code_id' is set
        if ($foreign_payment_code_id === null || (is_array($foreign_payment_code_id) && count($foreign_payment_code_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $foreign_payment_code_id when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'uses_payment_reference_numbers' is set
        if ($uses_payment_reference_numbers === null || (is_array($uses_payment_reference_numbers) && count($uses_payment_reference_numbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uses_payment_reference_numbers when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'is_active' is set
        if ($is_active === null || (is_array($is_active) && count($is_active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'self_employed_without_fixed_address' is set
        if ($self_employed_without_fixed_address === null || (is_array($self_employed_without_fixed_address) && count($self_employed_without_fixed_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $self_employed_without_fixed_address when calling suppliersV2Put'
            );
        }
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null || (is_array($supplier_id) && count($supplier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_id when calling suppliersV2Put'
            );
        }

        $resourcePath = '/v2/suppliers/{supplierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'supplierId' . '}',
                ObjectSerializer::toPathValue($supplier_id),
                $resourcePath
            );
        }

        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($supplier_number !== null) {
            $formParams['SupplierNumber'] = ObjectSerializer::toFormValue($supplier_number);
        }
        // form params
        if ($address1 !== null) {
            $formParams['Address1'] = ObjectSerializer::toFormValue($address1);
        }
        // form params
        if ($address2 !== null) {
            $formParams['Address2'] = ObjectSerializer::toFormValue($address2);
        }
        // form params
        if ($automatic_payment_service !== null) {
            $formParams['AutomaticPaymentService'] = ObjectSerializer::toFormValue($automatic_payment_service);
        }
        // form params
        if ($bank_account_number !== null) {
            $formParams['BankAccountNumber'] = ObjectSerializer::toFormValue($bank_account_number);
        }
        // form params
        if ($bank_bban !== null) {
            $formParams['BankBban'] = ObjectSerializer::toFormValue($bank_bban);
        }
        // form params
        if ($bank_bic !== null) {
            $formParams['BankBic'] = ObjectSerializer::toFormValue($bank_bic);
        }
        // form params
        if ($bank_code !== null) {
            $formParams['BankCode'] = ObjectSerializer::toFormValue($bank_code);
        }
        // form params
        if ($bank_country_code !== null) {
            $formParams['BankCountryCode'] = ObjectSerializer::toFormValue($bank_country_code);
        }
        // form params
        if ($bankgiro_number !== null) {
            $formParams['BankgiroNumber'] = ObjectSerializer::toFormValue($bankgiro_number);
        }
        // form params
        if ($bank_iban !== null) {
            $formParams['BankIban'] = ObjectSerializer::toFormValue($bank_iban);
        }
        // form params
        if ($bank_name !== null) {
            $formParams['BankName'] = ObjectSerializer::toFormValue($bank_name);
        }
        // form params
        if ($city !== null) {
            $formParams['City'] = ObjectSerializer::toFormValue($city);
        }
        // form params
        if ($contact_person_email !== null) {
            $formParams['ContactPersonEmail'] = ObjectSerializer::toFormValue($contact_person_email);
        }
        // form params
        if ($contact_person_mobile !== null) {
            $formParams['ContactPersonMobile'] = ObjectSerializer::toFormValue($contact_person_mobile);
        }
        // form params
        if ($contact_person_name !== null) {
            $formParams['ContactPersonName'] = ObjectSerializer::toFormValue($contact_person_name);
        }
        // form params
        if ($contact_person_phone !== null) {
            $formParams['ContactPersonPhone'] = ObjectSerializer::toFormValue($contact_person_phone);
        }
        // form params
        if ($corporate_identity_number !== null) {
            $formParams['CorporateIdentityNumber'] = ObjectSerializer::toFormValue($corporate_identity_number);
        }
        // form params
        if ($country_code !== null) {
            $formParams['CountryCode'] = ObjectSerializer::toFormValue($country_code);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // form params
        if ($currency_code !== null) {
            $formParams['CurrencyCode'] = ObjectSerializer::toFormValue($currency_code);
        }
        // form params
        if ($email_address !== null) {
            $formParams['EmailAddress'] = ObjectSerializer::toFormValue($email_address);
        }
        // form params
        if ($mobile_phone !== null) {
            $formParams['MobilePhone'] = ObjectSerializer::toFormValue($mobile_phone);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($name !== null) {
            $formParams['Name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($note !== null) {
            $formParams['Note'] = ObjectSerializer::toFormValue($note);
        }
        // form params
        if ($plusgiro_number !== null) {
            $formParams['PlusgiroNumber'] = ObjectSerializer::toFormValue($plusgiro_number);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['PostalCode'] = ObjectSerializer::toFormValue($postal_code);
        }
        // form params
        if ($telephone !== null) {
            $formParams['Telephone'] = ObjectSerializer::toFormValue($telephone);
        }
        // form params
        if ($terms_of_payment_id !== null) {
            $formParams['TermsOfPaymentId'] = ObjectSerializer::toFormValue($terms_of_payment_id);
        }
        // form params
        if ($vat_number !== null) {
            $formParams['VatNumber'] = ObjectSerializer::toFormValue($vat_number);
        }
        // form params
        if ($www_address !== null) {
            $formParams['WwwAddress'] = ObjectSerializer::toFormValue($www_address);
        }
        // form params
        if ($bank_fee_code !== null) {
            $formParams['BankFeeCode'] = ObjectSerializer::toFormValue($bank_fee_code);
        }
        // form params
        if ($pay_from_bank_account_id !== null) {
            $formParams['PayFromBankAccountId'] = ObjectSerializer::toFormValue($pay_from_bank_account_id);
        }
        // form params
        if ($foreign_payment_code_id !== null) {
            $formParams['ForeignPaymentCodeId'] = ObjectSerializer::toFormValue($foreign_payment_code_id);
        }
        // form params
        if ($uses_payment_reference_numbers !== null) {
            $formParams['UsesPaymentReferenceNumbers'] = ObjectSerializer::toFormValue($uses_payment_reference_numbers);
        }
        // form params
        if ($is_active !== null) {
            $formParams['IsActive'] = ObjectSerializer::toFormValue($is_active);
        }
        // form params
        if ($self_employed_without_fixed_address !== null) {
            $formParams['SelfEmployedWithoutFixedAddress'] = ObjectSerializer::toFormValue($self_employed_without_fixed_address);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
