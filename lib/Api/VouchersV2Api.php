<?php
/**
 * VouchersV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VouchersV2Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VouchersV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation vouchersV2Get
     *
     * Get all vouchers from all fiscal years.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseVoucherApi
     */
    public function vouchersV2Get()
    {
        list($response) = $this->vouchersV2GetWithHttpInfo();
        return $response;
    }

    /**
     * Operation vouchersV2GetWithHttpInfo
     *
     * Get all vouchers from all fiscal years.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseVoucherApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function vouchersV2GetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseVoucherApi';
        $request = $this->vouchersV2GetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseVoucherApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vouchersV2GetAsync
     *
     * Get all vouchers from all fiscal years.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2GetAsync()
    {
        return $this->vouchersV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vouchersV2GetAsyncWithHttpInfo
     *
     * Get all vouchers from all fiscal years.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseVoucherApi';
        $request = $this->vouchersV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vouchersV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vouchersV2GetRequest()
    {

        $resourcePath = '/v2/vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vouchersV2Get_0
     *
     * Get all vouchers in a given fiscal year.
     *
     * @param  string $fiscalyear_id fiscalyear_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PaginatedResponseVoucherApi
     */
    public function vouchersV2Get_0($fiscalyear_id)
    {
        list($response) = $this->vouchersV2Get_0WithHttpInfo($fiscalyear_id);
        return $response;
    }

    /**
     * Operation vouchersV2Get_0WithHttpInfo
     *
     * Get all vouchers in a given fiscal year.
     *
     * @param  string $fiscalyear_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PaginatedResponseVoucherApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function vouchersV2Get_0WithHttpInfo($fiscalyear_id)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseVoucherApi';
        $request = $this->vouchersV2Get_0Request($fiscalyear_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PaginatedResponseVoucherApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vouchersV2Get_0Async
     *
     * Get all vouchers in a given fiscal year.
     *
     * @param  string $fiscalyear_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2Get_0Async($fiscalyear_id)
    {
        return $this->vouchersV2Get_0AsyncWithHttpInfo($fiscalyear_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vouchersV2Get_0AsyncWithHttpInfo
     *
     * Get all vouchers in a given fiscal year.
     *
     * @param  string $fiscalyear_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2Get_0AsyncWithHttpInfo($fiscalyear_id)
    {
        $returnType = '\Swagger\Client\Model\PaginatedResponseVoucherApi';
        $request = $this->vouchersV2Get_0Request($fiscalyear_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vouchersV2Get_0'
     *
     * @param  string $fiscalyear_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vouchersV2Get_0Request($fiscalyear_id)
    {
        // verify the required parameter 'fiscalyear_id' is set
        if ($fiscalyear_id === null || (is_array($fiscalyear_id) && count($fiscalyear_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscalyear_id when calling vouchersV2Get_0'
            );
        }

        $resourcePath = '/v2/vouchers/{fiscalyearId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($fiscalyear_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalyearId' . '}',
                ObjectSerializer::toPathValue($fiscalyear_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vouchersV2Get_1
     *
     * Get a single voucher from a given fiscal year
     *
     * @param  string $fiscalyear_id fiscalyear_id (required)
     * @param  string $voucher_id voucher_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VoucherApi
     */
    public function vouchersV2Get_1($fiscalyear_id, $voucher_id)
    {
        list($response) = $this->vouchersV2Get_1WithHttpInfo($fiscalyear_id, $voucher_id);
        return $response;
    }

    /**
     * Operation vouchersV2Get_1WithHttpInfo
     *
     * Get a single voucher from a given fiscal year
     *
     * @param  string $fiscalyear_id (required)
     * @param  string $voucher_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VoucherApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function vouchersV2Get_1WithHttpInfo($fiscalyear_id, $voucher_id)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2Get_1Request($fiscalyear_id, $voucher_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VoucherApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vouchersV2Get_1Async
     *
     * Get a single voucher from a given fiscal year
     *
     * @param  string $fiscalyear_id (required)
     * @param  string $voucher_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2Get_1Async($fiscalyear_id, $voucher_id)
    {
        return $this->vouchersV2Get_1AsyncWithHttpInfo($fiscalyear_id, $voucher_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vouchersV2Get_1AsyncWithHttpInfo
     *
     * Get a single voucher from a given fiscal year
     *
     * @param  string $fiscalyear_id (required)
     * @param  string $voucher_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2Get_1AsyncWithHttpInfo($fiscalyear_id, $voucher_id)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2Get_1Request($fiscalyear_id, $voucher_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vouchersV2Get_1'
     *
     * @param  string $fiscalyear_id (required)
     * @param  string $voucher_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vouchersV2Get_1Request($fiscalyear_id, $voucher_id)
    {
        // verify the required parameter 'fiscalyear_id' is set
        if ($fiscalyear_id === null || (is_array($fiscalyear_id) && count($fiscalyear_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fiscalyear_id when calling vouchersV2Get_1'
            );
        }
        // verify the required parameter 'voucher_id' is set
        if ($voucher_id === null || (is_array($voucher_id) && count($voucher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_id when calling vouchersV2Get_1'
            );
        }

        $resourcePath = '/v2/vouchers/{fiscalyearId}/{voucherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($fiscalyear_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fiscalyearId' . '}',
                ObjectSerializer::toPathValue($fiscalyear_id),
                $resourcePath
            );
        }
        // path params
        if ($voucher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voucherId' . '}',
                ObjectSerializer::toPathValue($voucher_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vouchersV2Post
     *
     * Create a voucher.
     *
     * @param  \Swagger\Client\Model\VoucherApi $body body (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VoucherApi
     */
    public function vouchersV2Post($body, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        list($response) = $this->vouchersV2PostWithHttpInfo($body, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);
        return $response;
    }

    /**
     * Operation vouchersV2PostWithHttpInfo
     *
     * Create a voucher.
     *
     * @param  \Swagger\Client\Model\VoucherApi $body (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VoucherApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function vouchersV2PostWithHttpInfo($body, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2PostRequest($body, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VoucherApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vouchersV2PostAsync
     *
     * Create a voucher.
     *
     * @param  \Swagger\Client\Model\VoucherApi $body (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2PostAsync($body, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        return $this->vouchersV2PostAsyncWithHttpInfo($body, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vouchersV2PostAsyncWithHttpInfo
     *
     * Create a voucher.
     *
     * @param  \Swagger\Client\Model\VoucherApi $body (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2PostAsyncWithHttpInfo($body, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2PostRequest($body, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vouchersV2Post'
     *
     * @param  \Swagger\Client\Model\VoucherApi $body (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vouchersV2PostRequest($body, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling vouchersV2Post'
            );
        }

        $resourcePath = '/v2/vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($use_automatic_vat_calculation !== null) {
            $queryParams['useAutomaticVatCalculation'] = ObjectSerializer::toQueryValue($use_automatic_vat_calculation, null);
        }
        // query params
        if ($use_default_vat_codes !== null) {
            $queryParams['useDefaultVatCodes'] = ObjectSerializer::toQueryValue($use_default_vat_codes, null);
        }
        // query params
        if ($use_default_voucher_series !== null) {
            $queryParams['useDefaultVoucherSeries'] = ObjectSerializer::toQueryValue($use_default_voucher_series, null);
        }


        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($voucher_date !== null) {
            $formParams['VoucherDate'] = ObjectSerializer::toFormValue($voucher_date);
        }
        // form params
        if ($voucher_text !== null) {
            $formParams['VoucherText'] = ObjectSerializer::toFormValue($voucher_text);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($number_and_number_series !== null) {
            $formParams['NumberAndNumberSeries'] = ObjectSerializer::toFormValue($number_and_number_series);
        }
        // form params
        if ($number_series !== null) {
            $formParams['NumberSeries'] = ObjectSerializer::toFormValue($number_series);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($voucher_type !== null) {
            $formParams['VoucherType'] = ObjectSerializer::toFormValue($voucher_type);
        }
        // form params
        if ($source_id !== null) {
            $formParams['SourceId'] = ObjectSerializer::toFormValue($source_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation vouchersV2Post
     *
     * Create a voucher.
     *
     * @param  string $id id (required)
     * @param  \DateTime $voucher_date voucher_date (required)
     * @param  string $voucher_text voucher_text (required)
     * @param  \Swagger\Client\Model\VoucherRowApi[] $rows rows (required)
     * @param  string $number_and_number_series number_and_number_series (required)
     * @param  string $number_series number_series (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments attachments (required)
     * @param  \DateTime $modified_utc modified_utc (required)
     * @param  int $voucher_type voucher_type (required)
     * @param  string $source_id source_id (required)
     * @param  \DateTime $created_utc created_utc (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VoucherApi
     */
    public function vouchersV2Post($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        list($response) = $this->vouchersV2PostWithHttpInfo($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);
        return $response;
    }

    /**
     * Operation vouchersV2PostWithHttpInfo
     *
     * Create a voucher.
     *
     * @param  string $id (required)
     * @param  \DateTime $voucher_date (required)
     * @param  string $voucher_text (required)
     * @param  \Swagger\Client\Model\VoucherRowApi[] $rows (required)
     * @param  string $number_and_number_series (required)
     * @param  string $number_series (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  \DateTime $modified_utc (required)
     * @param  int $voucher_type (required)
     * @param  string $source_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VoucherApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function vouchersV2PostWithHttpInfo($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2PostRequest($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VoucherApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation vouchersV2PostAsync
     *
     * Create a voucher.
     *
     * @param  string $id (required)
     * @param  \DateTime $voucher_date (required)
     * @param  string $voucher_text (required)
     * @param  \Swagger\Client\Model\VoucherRowApi[] $rows (required)
     * @param  string $number_and_number_series (required)
     * @param  string $number_series (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  \DateTime $modified_utc (required)
     * @param  int $voucher_type (required)
     * @param  string $source_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2PostAsync($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        return $this->vouchersV2PostAsyncWithHttpInfo($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation vouchersV2PostAsyncWithHttpInfo
     *
     * Create a voucher.
     *
     * @param  string $id (required)
     * @param  \DateTime $voucher_date (required)
     * @param  string $voucher_text (required)
     * @param  \Swagger\Client\Model\VoucherRowApi[] $rows (required)
     * @param  string $number_and_number_series (required)
     * @param  string $number_series (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  \DateTime $modified_utc (required)
     * @param  int $voucher_type (required)
     * @param  string $source_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function vouchersV2PostAsyncWithHttpInfo($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        $returnType = '\Swagger\Client\Model\VoucherApi';
        $request = $this->vouchersV2PostRequest($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation, $use_default_vat_codes, $use_default_voucher_series);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'vouchersV2Post'
     *
     * @param  string $id (required)
     * @param  \DateTime $voucher_date (required)
     * @param  string $voucher_text (required)
     * @param  \Swagger\Client\Model\VoucherRowApi[] $rows (required)
     * @param  string $number_and_number_series (required)
     * @param  string $number_series (required)
     * @param  \Swagger\Client\Model\AttachmentLinkApi $attachments (required)
     * @param  \DateTime $modified_utc (required)
     * @param  int $voucher_type (required)
     * @param  string $source_id (required)
     * @param  \DateTime $created_utc (required)
     * @param  bool $use_automatic_vat_calculation Default value: false. Set to true and specify the sales or purchase gross amount and vat rows will be added automatically. (optional)
     * @param  bool $use_default_vat_codes Default value: True. Set to false and override default vatcodes on all rows in the request. (optional)
     * @param  bool $use_default_voucher_series Default value: True. Set to false and override default voucher series (alphabetic character before number). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function vouchersV2PostRequest($id, $voucher_date, $voucher_text, $rows, $number_and_number_series, $number_series, $attachments, $modified_utc, $voucher_type, $source_id, $created_utc, $use_automatic_vat_calculation = null, $use_default_vat_codes = null, $use_default_voucher_series = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'voucher_date' is set
        if ($voucher_date === null || (is_array($voucher_date) && count($voucher_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_date when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'voucher_text' is set
        if ($voucher_text === null || (is_array($voucher_text) && count($voucher_text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_text when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'rows' is set
        if ($rows === null || (is_array($rows) && count($rows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rows when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'number_and_number_series' is set
        if ($number_and_number_series === null || (is_array($number_and_number_series) && count($number_and_number_series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_and_number_series when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'number_series' is set
        if ($number_series === null || (is_array($number_series) && count($number_series) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_series when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'attachments' is set
        if ($attachments === null || (is_array($attachments) && count($attachments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachments when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'modified_utc' is set
        if ($modified_utc === null || (is_array($modified_utc) && count($modified_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_utc when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'voucher_type' is set
        if ($voucher_type === null || (is_array($voucher_type) && count($voucher_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $voucher_type when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'source_id' is set
        if ($source_id === null || (is_array($source_id) && count($source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_id when calling vouchersV2Post'
            );
        }
        // verify the required parameter 'created_utc' is set
        if ($created_utc === null || (is_array($created_utc) && count($created_utc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created_utc when calling vouchersV2Post'
            );
        }

        $resourcePath = '/v2/vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($use_automatic_vat_calculation !== null) {
            $queryParams['useAutomaticVatCalculation'] = ObjectSerializer::toQueryValue($use_automatic_vat_calculation, null);
        }
        // query params
        if ($use_default_vat_codes !== null) {
            $queryParams['useDefaultVatCodes'] = ObjectSerializer::toQueryValue($use_default_vat_codes, null);
        }
        // query params
        if ($use_default_voucher_series !== null) {
            $queryParams['useDefaultVoucherSeries'] = ObjectSerializer::toQueryValue($use_default_voucher_series, null);
        }


        // form params
        if ($id !== null) {
            $formParams['Id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($voucher_date !== null) {
            $formParams['VoucherDate'] = ObjectSerializer::toFormValue($voucher_date);
        }
        // form params
        if ($voucher_text !== null) {
            $formParams['VoucherText'] = ObjectSerializer::toFormValue($voucher_text);
        }
        // form params
        if ($rows !== null) {
            $formParams['Rows'] = ObjectSerializer::toFormValue($rows);
        }
        // form params
        if ($number_and_number_series !== null) {
            $formParams['NumberAndNumberSeries'] = ObjectSerializer::toFormValue($number_and_number_series);
        }
        // form params
        if ($number_series !== null) {
            $formParams['NumberSeries'] = ObjectSerializer::toFormValue($number_series);
        }
        // form params
        if ($attachments !== null) {
            $formParams['Attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($modified_utc !== null) {
            $formParams['ModifiedUtc'] = ObjectSerializer::toFormValue($modified_utc);
        }
        // form params
        if ($voucher_type !== null) {
            $formParams['VoucherType'] = ObjectSerializer::toFormValue($voucher_type);
        }
        // form params
        if ($source_id !== null) {
            $formParams['SourceId'] = ObjectSerializer::toFormValue($source_id);
        }
        // form params
        if ($created_utc !== null) {
            $formParams['CreatedUtc'] = ObjectSerializer::toFormValue($created_utc);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
